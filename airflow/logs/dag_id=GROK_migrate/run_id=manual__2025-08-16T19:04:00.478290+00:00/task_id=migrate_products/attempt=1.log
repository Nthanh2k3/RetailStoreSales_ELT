{"timestamp":"2025-08-16T19:04:13.443118","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-16T19:04:13.443546","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/grok_migration.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-16T19:04:13.482885Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T19:04:13.483009Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T19:04:13.483095Z","level":"info","event":"Current task name:migrate_products","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T19:04:13.483145Z","level":"info","event":"Dag name:GROK_migrate","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T19:04:13.484972","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `from airflow.sdk import Connection` instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-08-16T19:04:13.491396","level":"info","event":"Connection Retrieved 'mysql_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-08-16T19:04:13.491509","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-08-16T19:04:13.495645","level":"info","event":"Running statement: SHOW COLUMNS FROM `retail_db`.`products`, parameters: None","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-08-16T19:04:13.496927","level":"info","event":"Rows affected: 8","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-08-16T19:04:13.503950","level":"info","event":"Connection Retrieved 'pg_raw'","logger":"airflow.hooks.base"}
{"timestamp":"2025-08-16T19:04:13.504077","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-08-16T19:04:13.510104","level":"info","event":"Connection Retrieved 'pg_raw'","logger":"airflow.hooks.base"}
{"timestamp":"2025-08-16T19:04:21.575909","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/common/sql/hooks/sql.py:479: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n  return psql.read_sql(sql, con=conn, params=parameters, **kwargs)\n","logger":"py.warnings"}
{"timestamp":"2025-08-16T19:04:22.749189Z","level":"info","event":"[OK] Migrated products (500 rows).","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T19:04:22.749761","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-08-16T19:04:22.766441Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T19:04:22.766557Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T19:04:22.766722Z","level":"info","event":"Task operator:<Task(PythonOperator): migrate_products>","chan":"stdout","logger":"task"}
