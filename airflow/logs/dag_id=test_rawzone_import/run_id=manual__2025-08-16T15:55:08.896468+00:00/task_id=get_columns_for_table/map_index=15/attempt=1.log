{"timestamp":"2025-08-16T15:55:12.552879","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-16T15:55:12.553430","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/raw_zone_migration.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-16T15:55:12.630826Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T15:55:12.630991Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T15:55:12.632837Z","level":"info","event":"Current task name:get_columns_for_table","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T15:55:12.632960Z","level":"info","event":"Dag name:test_rawzone_import","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T15:55:12.635741","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `from airflow.sdk import Connection` instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-08-16T15:55:12.645777","level":"info","event":"Connection Retrieved 'mysql_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-08-16T15:55:12.645929","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-08-16T15:55:12.650304","level":"info","event":"Done. Returned value was: [{'column_name': 'item_id'}, {'column_name': 'transaction_id'}, {'column_name': 'product_id'}, {'column_name': 'quantity'}, {'column_name': 'unit_price'}, {'column_name': 'discount'}, {'column_name': 'tax'}]","logger":"airflow.task.operators.airflow.providers.standard.decorators.python._PythonDecoratedOperator"}
{"timestamp":"2025-08-16T15:55:12.650561","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0198b397-8c3f-7dc8-bc8c-8413fa336b70'), task_id='get_columns_for_table', dag_id='test_rawzone_import', run_id='manual__2025-08-16T15:55:08.896468+00:00', try_number=1, map_index=15, hostname='ef59016127b3', context_carrier={}, task=<Task(_PythonDecoratedOperator): get_columns_for_table>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 8, 16, 15, 55, 12, 50014, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=True, rendered_map_index=None, log_url='http://localhost:8080/dags/test_rawzone_import/runs/manual__2025-08-16T15%3A55%3A08.896468%2B00%3A00/tasks/get_columns_for_table/mapped/15?try_number=1')","logger":"task"}
{"timestamp":"2025-08-16T15:55:12.674465Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T15:55:12.674604Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T15:55:12.677786Z","level":"info","event":"Task operator:<Task(_PythonDecoratedOperator): get_columns_for_table>","chan":"stdout","logger":"task"}
