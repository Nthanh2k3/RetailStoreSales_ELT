{"timestamp":"2025-08-16T14:52:45.732936","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-16T14:52:45.733288","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/mysql_to_rds_migration.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-16T14:52:45.776770Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T14:52:45.776933Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T14:52:45.778936Z","level":"info","event":"Current task name:discover_tables","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T14:52:45.779010Z","level":"info","event":"Dag name:mysql_to_rds_fullload","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T14:52:45.781016","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `from airflow.sdk import Connection` instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-08-16T14:52:45.786343","level":"info","event":"Connection Retrieved 'mysql_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-08-16T14:52:45.786462","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-08-16T14:52:45.792215","level":"info","event":"Done. Returned value was: ['brands', 'campaigns', 'categories', 'customer_feedback', 'customers', 'discount_rules', 'employees', 'inventory', 'loyalty_programs', 'payments', 'pricing_history', 'products', 'promotions', 'purchase_orders', 'returns', 'sales_items', 'sales_transactions', 'shipments', 'stock_movements', 'store_visits', 'stores', 'suppliers', 'tax_rules']","logger":"airflow.task.operators.airflow.providers.standard.decorators.python._PythonDecoratedOperator"}
{"timestamp":"2025-08-16T14:52:45.792497","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0198b35e-6562-79c6-a91e-202b1595c02c'), task_id='discover_tables', dag_id='mysql_to_rds_fullload', run_id='manual__2025-08-16T14:52:44.751419+00:00', try_number=1, map_index=-1, hostname='ef59016127b3', context_carrier={}, task=<Task(_PythonDecoratedOperator): discover_tables>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 8, 16, 14, 52, 45, 384483, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/mysql_to_rds_fullload/runs/manual__2025-08-16T14%3A52%3A44.751419%2B00%3A00/tasks/discover_tables?try_number=1')","logger":"task"}
{"timestamp":"2025-08-16T14:52:45.815289Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T14:52:45.815407Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T14:52:45.817216Z","level":"info","event":"Task operator:<Task(_PythonDecoratedOperator): discover_tables>","chan":"stdout","logger":"task"}
