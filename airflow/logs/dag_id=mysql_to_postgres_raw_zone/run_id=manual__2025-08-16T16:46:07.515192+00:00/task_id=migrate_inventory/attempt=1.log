{"timestamp":"2025-08-16T16:46:08.196412","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-16T16:46:08.197061","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/grok_migration.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-16T16:46:08.226430Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T16:46:08.226559Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T16:46:08.226690Z","level":"info","event":"Current task name:migrate_inventory","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T16:46:08.226751Z","level":"info","event":"Dag name:mysql_to_postgres_raw_zone","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T16:46:08.228502","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `from airflow.sdk import Connection` instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-08-16T16:46:08.233821","level":"info","event":"Connection Retrieved 'mysql_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-08-16T16:46:08.233933","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-08-16T16:46:08.237713","level":"info","event":"Connection Retrieved 'pg_raw'","logger":"airflow.hooks.base"}
{"timestamp":"2025-08-16T16:46:08.237811","level":"warning","event":"This setter is for backward compatibility and should not be used.\nSince the introduction of connection property, the providers listed below breaks due to assigning value to self.connection in their __init__ method.\n* apache-airflow-providers-mysql<5.7.1\n* apache-airflow-providers-elasticsearch<5.5.1\n* apache-airflow-providers-postgres<5.13.0","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-08-16T16:46:08.242057","level":"info","event":"Running statement: SHOW COLUMNS FROM inventory, parameters: None","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-08-16T16:46:08.243382","level":"info","event":"Rows affected: 5","logger":"airflow.task.hooks.airflow.providers.mysql.hooks.mysql.MySqlHook"}
{"timestamp":"2025-08-16T16:46:10.060431","level":"info","event":"Running statement: \n    CREATE TABLE IF NOT EXISTS raw.inventory (\"inventory_id\" TEXT, \"store_id\" TEXT, \"product_id\" TEXT, \"quantity\" TEXT, \"last_updated\" TEXT);\n    , parameters: None","logger":"airflow.task.hooks.airflow.providers.postgres.hooks.postgres.PostgresHook"}
{"timestamp":"2025-08-16T16:46:10.511699","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"InvalidSchemaName","exc_value":"schema \"raw\" does not exist\nLINE 2:     CREATE TABLE IF NOT EXISTS raw.inventory (\"inventory_id\"...\n                                       ^\n","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":890,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1177,"name":"_execute_task"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":397,"name":"wrapper"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":217,"name":"execute"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":240,"name":"execute_callable"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/opt/airflow/dags/grok_migration.py","lineno":48,"name":"migrate_table"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/common/sql/hooks/sql.py","lineno":767,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/common/sql/hooks/sql.py","lineno":815,"name":"_run_command"}],"is_group":false,"exceptions":[]}]}
{"timestamp":"2025-08-16T16:46:10.524898Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T16:46:10.525138Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T16:46:10.525249Z","level":"info","event":"Task:<Task(PythonOperator): migrate_inventory>","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T16:46:10.525310Z","level":"info","event":"Failure caused by schema \"raw\" does not exist","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T16:46:10.525357Z","level":"info","event":"LINE 2:     CREATE TABLE IF NOT EXISTS raw.inventory (\"inventory_id\"...","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T16:46:10.525398Z","level":"info","event":"                                       ^","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-16T16:46:10.525437Z","level":"info","event":"","chan":"stdout","logger":"task"}
