{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.10.9", "generated_at": "2025-08-28T03:15:02.821737Z", "invocation_id": "1587cc2f-8876-4c13-8c77-a78e6f6aa2cb", "invocation_started_at": "2025-08-26T15:21:18.736187+00:00", "env": {}, "project_name": "retail_dbt", "project_id": "b70854c8e0cca5622a9bd5fb06793849", "user_id": "c26e5b31-b176-45ec-b899-708f0be558bc", "send_anonymous_usage_stats": true, "adapter_type": "postgres", "quoting": {"database": true, "schema": true, "identifier": true, "column": null}}, "nodes": {"model.retail_dbt.tax_rules_silver": {"database": "postgres", "schema": "silver", "name": "tax_rules_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/tax_rules_silver.sql", "original_file_path": "models/silver/tax_rules_silver.sql", "unique_id": "model.retail_dbt.tax_rules_silver", "fqn": ["retail_dbt", "silver", "tax_rules_silver"], "alias": "tax_rules_silver", "checksum": {"name": "sha256", "checksum": "6374095e5749ce545a85edebfd183f990fd669c9635a63f6d6c9e0518789d65e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for tax rules data", "columns": {"tax_id": {"name": "tax_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tax_rate": {"name": "tax_rate", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region": {"name": "region", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9277904, "relation_name": "\"postgres\".\"silver\".\"tax_rules_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_tax_rules') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_tax_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_tax_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.campaigns_silver": {"database": "postgres", "schema": "silver", "name": "campaigns_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/campaigns_silver.sql", "original_file_path": "models/silver/campaigns_silver.sql", "unique_id": "model.retail_dbt.campaigns_silver", "fqn": ["retail_dbt", "silver", "campaigns_silver"], "alias": "campaigns_silver", "checksum": {"name": "sha256", "checksum": "ee42c894e4e1e9cfc1b0865555cf146d316746bea54911957b766f4a8b8b9bb0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for campaign data", "columns": {"campaign_id": {"name": "campaign_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "budget": {"name": "budget", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_date": {"name": "start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "end_date": {"name": "end_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "staged_at": {"name": "staged_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9009004, "relation_name": "\"postgres\".\"silver\".\"campaigns_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_campaigns') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_campaigns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.suppliers_silver": {"database": "postgres", "schema": "silver", "name": "suppliers_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/suppliers_silver.sql", "original_file_path": "models/silver/suppliers_silver.sql", "unique_id": "model.retail_dbt.suppliers_silver", "fqn": ["retail_dbt", "silver", "suppliers_silver"], "alias": "suppliers_silver", "checksum": {"name": "sha256", "checksum": "6c4797f69290e9b5f2936288d868fc395b0ed16f85516a7bcef25b67d512f006"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for supplier data", "columns": {"supplier_id": {"name": "supplier_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_info": {"name": "contact_info", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9265435, "relation_name": "\"postgres\".\"silver\".\"suppliers_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_suppliers') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_suppliers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_suppliers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.shipments_silver": {"database": "postgres", "schema": "silver", "name": "shipments_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/shipments_silver.sql", "original_file_path": "models/silver/shipments_silver.sql", "unique_id": "model.retail_dbt.shipments_silver", "fqn": ["retail_dbt", "silver", "shipments_silver"], "alias": "shipments_silver", "checksum": {"name": "sha256", "checksum": "9acfe9f5ffe18c221746596ece6d9c7a32d83985738074878d7dd58b130019f4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for shipment data", "columns": {"shipment_id": {"name": "shipment_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipped_date": {"name": "shipped_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "received_date": {"name": "received_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.922394, "relation_name": "\"postgres\".\"silver\".\"shipments_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_shipments') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.pricing_history_silver": {"database": "postgres", "schema": "silver", "name": "pricing_history_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/pricing_history_silver.sql", "original_file_path": "models/silver/pricing_history_silver.sql", "unique_id": "model.retail_dbt.pricing_history_silver", "fqn": ["retail_dbt", "silver", "pricing_history_silver"], "alias": "pricing_history_silver", "checksum": {"name": "sha256", "checksum": "a5b9283316c5411587781e01e12e2718ce7500063511476b2d1aeffa810ac3e0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for pricing history data", "columns": {"history_id": {"name": "history_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price": {"name": "price", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "effective_date": {"name": "effective_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9131172, "relation_name": "\"postgres\".\"silver\".\"pricing_history_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_pricing_history') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_pricing_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_pricing_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.purchase_orders_silver": {"database": "postgres", "schema": "silver", "name": "purchase_orders_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/purchase_orders_silver.sql", "original_file_path": "models/silver/purchase_orders_silver.sql", "unique_id": "model.retail_dbt.purchase_orders_silver", "fqn": ["retail_dbt", "silver", "purchase_orders_silver"], "alias": "purchase_orders_silver", "checksum": {"name": "sha256", "checksum": "9f07617113bbd8360f95bbf1976e57fa0a50e797585393e23aed0f8e57b3a409"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for purchase orders data", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_id": {"name": "supplier_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_date": {"name": "order_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9162, "relation_name": "\"postgres\".\"silver\".\"purchase_orders_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_purchase_orders') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_purchase_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_purchase_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.products_silver": {"database": "postgres", "schema": "silver", "name": "products_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/products_silver.sql", "original_file_path": "models/silver/products_silver.sql", "unique_id": "model.retail_dbt.products_silver", "fqn": ["retail_dbt", "silver", "products_silver"], "alias": "products_silver", "checksum": {"name": "sha256", "checksum": "befbf6274ae95ff70b35fd1ddb80aa3352425f481b8b5c26b4db2e1d2901a0f9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for product data", "columns": {"product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_id": {"name": "category_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "brand_id": {"name": "brand_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_id": {"name": "supplier_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price": {"name": "price", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "season": {"name": "season", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9144492, "relation_name": "\"postgres\".\"silver\".\"products_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_products') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_products", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.inventory_silver": {"database": "postgres", "schema": "silver", "name": "inventory_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/inventory_silver.sql", "original_file_path": "models/silver/inventory_silver.sql", "unique_id": "model.retail_dbt.inventory_silver", "fqn": ["retail_dbt", "silver", "inventory_silver"], "alias": "inventory_silver", "checksum": {"name": "sha256", "checksum": "8b6f11aa5d0ea400f4f7f5e20e000647bf8e7306f79709f1aa5958e93548e7a2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for inventory data", "columns": {"inventory_id": {"name": "inventory_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_updated": {"name": "last_updated", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9096344, "relation_name": "\"postgres\".\"silver\".\"inventory_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_inventory') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_inventory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_inventory"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.customer_feedback_silver": {"database": "postgres", "schema": "silver", "name": "customer_feedback_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/customer_feedback_silver.sql", "original_file_path": "models/silver/customer_feedback_silver.sql", "unique_id": "model.retail_dbt.customer_feedback_silver", "fqn": ["retail_dbt", "silver", "customer_feedback_silver"], "alias": "customer_feedback_silver", "checksum": {"name": "sha256", "checksum": "fc2829c23948f4dd76f3781e698110da80c31cde2b51e0f964eb778e98cf89d2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for customer feedback data", "columns": {"feedback_id": {"name": "feedback_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "rating": {"name": "rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "comments": {"name": "comments", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "feedback_date": {"name": "feedback_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9039562, "relation_name": "\"postgres\".\"silver\".\"customer_feedback_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_customer_feedback') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customer_feedback", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.sales_transactions_silver": {"database": "postgres", "schema": "silver", "name": "sales_transactions_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/sales_transactions_silver.sql", "original_file_path": "models/silver/sales_transactions_silver.sql", "unique_id": "model.retail_dbt.sales_transactions_silver", "fqn": ["retail_dbt", "silver", "sales_transactions_silver"], "alias": "sales_transactions_silver", "checksum": {"name": "sha256", "checksum": "d4013f32277eb728341d902ff9364b306655408c5528b4c3a6ec6994a5c7c02c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for sales transaction data", "columns": {"transaction_id": {"name": "transaction_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_id": {"name": "employee_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_date": {"name": "transaction_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_amount": {"name": "total_amount", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "payment_id": {"name": "payment_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.921121, "relation_name": "\"postgres\".\"silver\".\"sales_transactions_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_sales_transactions') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stock_movements_silver": {"database": "postgres", "schema": "silver", "name": "stock_movements_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/stock_movements_silver.sql", "original_file_path": "models/silver/stock_movements_silver.sql", "unique_id": "model.retail_dbt.stock_movements_silver", "fqn": ["retail_dbt", "silver", "stock_movements_silver"], "alias": "stock_movements_silver", "checksum": {"name": "sha256", "checksum": "66d7fd1ec19127945c1fe33a3da133d9b47c5dd6393c180e5cbd1a34692470c4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for stock movement data", "columns": {"movement_id": {"name": "movement_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "movement_type": {"name": "movement_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "movement_date": {"name": "movement_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9237309, "relation_name": "\"postgres\".\"silver\".\"stock_movements_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_stock_movements') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_stock_movements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_stock_movements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.employees_silver": {"database": "postgres", "schema": "silver", "name": "employees_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/employees_silver.sql", "original_file_path": "models/silver/employees_silver.sql", "unique_id": "model.retail_dbt.employees_silver", "fqn": ["retail_dbt", "silver", "employees_silver"], "alias": "employees_silver", "checksum": {"name": "sha256", "checksum": "91251b8210a3e65a36b02f4c875af497c3e7059ebad0089f927fa9fa8b694aa9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for employee data", "columns": {"employee_id": {"name": "employee_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "role": {"name": "role", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9082987, "relation_name": "\"postgres\".\"silver\".\"employees_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_employees') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_employees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_employees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.brands_silver": {"database": "postgres", "schema": "silver", "name": "brands_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/brands_silver.sql", "original_file_path": "models/silver/brands_silver.sql", "unique_id": "model.retail_dbt.brands_silver", "fqn": ["retail_dbt", "silver", "brands_silver"], "alias": "brands_silver", "checksum": {"name": "sha256", "checksum": "7c8245f0ac35f828111dc1daeae2be7a1b2922d4454629f09f2f4584e90abdfb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for brand data", "columns": {"brand_id": {"name": "brand_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "staged_at": {"name": "staged_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.8991191, "relation_name": "\"postgres\".\"silver\".\"brands_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_brands') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_brands", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_brands"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.loyalty_programs_silver": {"database": "postgres", "schema": "silver", "name": "loyalty_programs_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/loyalty_programs_silver.sql", "original_file_path": "models/silver/loyalty_programs_silver.sql", "unique_id": "model.retail_dbt.loyalty_programs_silver", "fqn": ["retail_dbt", "silver", "loyalty_programs_silver"], "alias": "loyalty_programs_silver", "checksum": {"name": "sha256", "checksum": "58a2fb37ded7364f06a3dad4da7b7f3ba6f54151ee025ab0bf319915c56738ea"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for loyalty programs data", "columns": {"loyalty_program_id": {"name": "loyalty_program_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "points_per_dollar": {"name": "points_per_dollar", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9104254, "relation_name": "\"postgres\".\"silver\".\"loyalty_programs_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_loyalty_programs') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_loyalty_programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_loyalty_programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.customers_silver": {"database": "postgres", "schema": "silver", "name": "customers_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/customers_silver.sql", "original_file_path": "models/silver/customers_silver.sql", "unique_id": "model.retail_dbt.customers_silver", "fqn": ["retail_dbt", "silver", "customers_silver"], "alias": "customers_silver", "checksum": {"name": "sha256", "checksum": "66fb297facf0afaf521cc1569d5ac3d86e3632144d9724b747520460a00e2342"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for customer data", "columns": {"customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "email": {"name": "email", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "phone": {"name": "phone", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loyalty_program_id": {"name": "loyalty_program_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9055386, "relation_name": "\"postgres\".\"silver\".\"customers_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_customers') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.payments_silver": {"database": "postgres", "schema": "silver", "name": "payments_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/payments_silver.sql", "original_file_path": "models/silver/payments_silver.sql", "unique_id": "model.retail_dbt.payments_silver", "fqn": ["retail_dbt", "silver", "payments_silver"], "alias": "payments_silver", "checksum": {"name": "sha256", "checksum": "8a6285ff5367ee897ca7d88c867ed2ef6786340e9f3671e70e1b2e2deaf33e98"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for payment data", "columns": {"payment_id": {"name": "payment_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "method": {"name": "method", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "paid_at": {"name": "paid_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9118314, "relation_name": "\"postgres\".\"silver\".\"payments_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_payments') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.promotions_silver": {"database": "postgres", "schema": "silver", "name": "promotions_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/promotions_silver.sql", "original_file_path": "models/silver/promotions_silver.sql", "unique_id": "model.retail_dbt.promotions_silver", "fqn": ["retail_dbt", "silver", "promotions_silver"], "alias": "promotions_silver", "checksum": {"name": "sha256", "checksum": "12c4bc040a08c2dc817d48f1607d393adaa3a32a06c9232eba21e99e1e5edc72"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for promotion data", "columns": {"promotion_id": {"name": "promotion_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_date": {"name": "start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "end_date": {"name": "end_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9152184, "relation_name": "\"postgres\".\"silver\".\"promotions_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_promotions') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_promotions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_promotions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.sales_items_silver": {"database": "postgres", "schema": "silver", "name": "sales_items_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/sales_items_silver.sql", "original_file_path": "models/silver/sales_items_silver.sql", "unique_id": "model.retail_dbt.sales_items_silver", "fqn": ["retail_dbt", "silver", "sales_items_silver"], "alias": "sales_items_silver", "checksum": {"name": "sha256", "checksum": "df5e645fa4ba16733fc69f9a1c483e686d0e855b04290c289fe031363d842403"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for sales item data", "columns": {"item_id": {"name": "item_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_id": {"name": "transaction_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit_price": {"name": "unit_price", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "discount": {"name": "discount", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tax": {"name": "tax", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gross_amount": {"name": "gross_amount", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "net_amount": {"name": "net_amount", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "business_validation_flag": {"name": "business_validation_flag", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.919991, "relation_name": "\"postgres\".\"silver\".\"sales_items_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_sales_items') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.discount_rules_silver": {"database": "postgres", "schema": "silver", "name": "discount_rules_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/discount_rules_silver.sql", "original_file_path": "models/silver/discount_rules_silver.sql", "unique_id": "model.retail_dbt.discount_rules_silver", "fqn": ["retail_dbt", "silver", "discount_rules_silver"], "alias": "discount_rules_silver", "checksum": {"name": "sha256", "checksum": "355fb5dde109dc90eea7185982314512e49b4e83baf41530c2165a7905ed7e4d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for discount rules data", "columns": {"rule_id": {"name": "rule_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "discount_type": {"name": "discount_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "value": {"name": "value", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_from": {"name": "valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_to": {"name": "valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9072862, "relation_name": "\"postgres\".\"silver\".\"discount_rules_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_discount_rules') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_discount_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_discount_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.returns_silver": {"database": "postgres", "schema": "silver", "name": "returns_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/returns_silver.sql", "original_file_path": "models/silver/returns_silver.sql", "unique_id": "model.retail_dbt.returns_silver", "fqn": ["retail_dbt", "silver", "returns_silver"], "alias": "returns_silver", "checksum": {"name": "sha256", "checksum": "0d199bb3a583ce194eec6bcf92d422e3866715c7ac0d8ba81395b2fda01e2b7c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for return data", "columns": {"return_id": {"name": "return_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "item_id": {"name": "item_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "reason": {"name": "reason", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "return_date": {"name": "return_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.917612, "relation_name": "\"postgres\".\"silver\".\"returns_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_returns') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_returns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stores_silver": {"database": "postgres", "schema": "silver", "name": "stores_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/stores_silver.sql", "original_file_path": "models/silver/stores_silver.sql", "unique_id": "model.retail_dbt.stores_silver", "fqn": ["retail_dbt", "silver", "stores_silver"], "alias": "stores_silver", "checksum": {"name": "sha256", "checksum": "3b90a5257bde91e24dc9d15888aa01cb291175284ca7caab1f74c53eb58adf4d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for store data", "columns": {"store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "location": {"name": "location", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "manager_id": {"name": "manager_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.925685, "relation_name": "\"postgres\".\"silver\".\"stores_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_stores') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_stores", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_stores"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.store_visits_silver": {"database": "postgres", "schema": "silver", "name": "store_visits_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/store_visits_silver.sql", "original_file_path": "models/silver/store_visits_silver.sql", "unique_id": "model.retail_dbt.store_visits_silver", "fqn": ["retail_dbt", "silver", "store_visits_silver"], "alias": "store_visits_silver", "checksum": {"name": "sha256", "checksum": "41e73d03d754e599b17810c2ae37bd0f61196bee93220c542466b5f17e88610d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for store visit data", "columns": {"visit_id": {"name": "visit_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "visit_date": {"name": "visit_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.924696, "relation_name": "\"postgres\".\"silver\".\"store_visits_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_store_visits') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_store_visits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_store_visits"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.categories_silver": {"database": "postgres", "schema": "silver", "name": "categories_silver", "resource_type": "model", "package_name": "retail_dbt", "path": "silver/categories_silver.sql", "original_file_path": "models/silver/categories_silver.sql", "unique_id": "model.retail_dbt.categories_silver", "fqn": ["retail_dbt", "silver", "categories_silver"], "alias": "categories_silver", "checksum": {"name": "sha256", "checksum": "33e50463614087479ef96b6ad2c36dee3d8c6e4ced5880cd312162822bfec822"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["silver"], "description": "Silver layer table for category data", "columns": {"category_id": {"name": "category_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "staged_at": {"name": "staged_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/silver/schema.yml", "build_path": null, "unrendered_config": {"tags": ["silver"], "materialized": "table"}, "created_at": 1756221680.9016824, "relation_name": "\"postgres\".\"silver\".\"categories_silver\"", "raw_code": "{{ config(materialized='table') }}\n\nselect\n  s.*\nfrom {{ ref('stg_categories') }} as s", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_categories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_categories"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_categories": {"database": "postgres", "schema": "silver_staging", "name": "stg_categories", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_categories.sql", "original_file_path": "models/staging/stg_categories.sql", "unique_id": "model.retail_dbt.stg_categories", "fqn": ["retail_dbt", "staging", "stg_categories"], "alias": "stg_categories", "checksum": {"name": "sha256", "checksum": "bd730773ffc156fde327d9f0842e125e59590b9f7eb1504b5dddb686a3735530"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_categories.sql", "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1756221680.3764253, "relation_name": "\"postgres\".\"silver_staging\".\"stg_categories\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging'\n) }}\n\nwith source as (\n    select * from {{ source('raw', 'categories') }}\n),\n\ncleaned as (\n    select\n        case \n            when trim(category_id) = '' then null\n            when lower(trim(category_id)) in ('null', 'na', 'n/a') then null\n            -- lo\u1ea1i b\u1ecf k\u00fd t\u1ef1 kh\u00f4ng ph\u1ea3i s\u1ed1 tr\u01b0\u1edbc khi cast\n            else cast(regexp_replace(trim(category_id), '[^0-9]', '', 'g') as int)\n        end as category_id,\n        \n        case \n            when trim(name) = '' then null\n            when lower(trim(name)) in ('null', 'na', 'n/a', 'none', 'unknown') then null\n            else trim(name)\n        end as name,\n        \n        current_timestamp as staged_at\n    from source\n)\n\nselect * from cleaned", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "categories"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.categories"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_categories.sql", "compiled": true, "compiled_code": "\n\nwith source as (\n    select * from \"postgres\".\"raw\".\"categories\"\n),\n\ncleaned as (\n    select\n        case \n            when trim(category_id) = '' then null\n            when lower(trim(category_id)) in ('null', 'na', 'n/a') then null\n            -- lo\u1ea1i b\u1ecf k\u00fd t\u1ef1 kh\u00f4ng ph\u1ea3i s\u1ed1 tr\u01b0\u1edbc khi cast\n            else cast(regexp_replace(trim(category_id), '[^0-9]', '', 'g') as int)\n        end as category_id,\n        \n        case \n            when trim(name) = '' then null\n            when lower(trim(name)) in ('null', 'na', 'n/a', 'none', 'unknown') then null\n            else trim(name)\n        end as name,\n        \n        current_timestamp as staged_at\n    from source\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_sales_items": {"database": "postgres", "schema": "silver_staging", "name": "stg_sales_items", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_sales_items.sql", "original_file_path": "models/staging/stg_sales_items.sql", "unique_id": "model.retail_dbt.stg_sales_items", "fqn": ["retail_dbt", "staging", "stg_sales_items"], "alias": "stg_sales_items", "checksum": {"name": "sha256", "checksum": "574fb429aa82486983ba63120f97ff7e9880526f3c2f9f7bf33de2a5b240f5b4"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_sales_items.sql", "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1756221680.3784626, "relation_name": "\"postgres\".\"silver_staging\".\"stg_sales_items\"", "raw_code": "{{ config(materialized='view',schema='staging') }}\n\nwith source_data as (\n    select * from {{ source('raw','sales_items') }}\n),\n\nfinal as (\n    select\n        \n        cast(item_id as int) as item_id,\n        cast(transaction_id as int) as transaction_id,\n        cast(product_id as int) as product_id,\n        \n\n        cast(quantity as int) as quantity,\n        \n        cast(unit_price as decimal(10,2)) as unit_price,\n        cast(discount as decimal(10,2)) as discount,\n        cast(tax as decimal(10,2)) as tax,\n        \n        cast(unit_price as decimal(10,2)) * cast(quantity as int) as gross_amount,\n        (cast(unit_price as decimal(10,2)) * cast(quantity as int)) - \n         cast(discount as decimal(10,2)) + \n         cast(tax as decimal(10,2)) as net_amount,\n        \n        case \n            when cast(quantity as int) > 0 and cast(unit_price as decimal(10,2)) < 0 then 'invalid_positive_qty_negative_price'\n            when cast(discount as decimal(10,2)) > cast(unit_price as decimal(10,2)) * cast(quantity as int) then 'discount_exceeds_gross'\n            when cast(discount as decimal(10,2)) < 0 then 'negative_discount'\n            when cast(tax as decimal(10,2)) < 0 then 'negative_tax'\n            when cast(quantity as int) < 0 then 'negative_quantity'\n            else 'valid'\n        end as business_validation_flag\n        \n    from source_data\n    \n    -- Basic validation + Business logic validation\n    where item_id is not null\n        and transaction_id is not null  \n        and product_id is not null\n        and quantity is not null\n        and unit_price is not null\n        and discount is not null\n        and tax is not null\n        -- Business rules\n        and cast(quantity as int) >= 0  -- No negative quantities\n        and cast(discount as decimal(10,2)) >= 0  -- No negative discounts\n        and cast(tax as decimal(10,2)) >= 0  -- No negative tax\n        and cast(discount as decimal(10,2)) <= cast(unit_price as decimal(10,2)) * cast(quantity as int)  -- Discount can't exceed gross amount\n        -- Allow unit_price = 0 for free items/samples\n        and not (cast(quantity as int) > 0 and cast(unit_price as decimal(10,2)) < 0)  -- If quantity > 0, price can't be negative\n)\n\nselect * from final", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "sales_items"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.sales_items"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_sales_items.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * from \"postgres\".\"raw\".\"sales_items\"\n),\n\nfinal as (\n    select\n        \n        cast(item_id as int) as item_id,\n        cast(transaction_id as int) as transaction_id,\n        cast(product_id as int) as product_id,\n        \n\n        cast(quantity as int) as quantity,\n        \n        cast(unit_price as decimal(10,2)) as unit_price,\n        cast(discount as decimal(10,2)) as discount,\n        cast(tax as decimal(10,2)) as tax,\n        \n        cast(unit_price as decimal(10,2)) * cast(quantity as int) as gross_amount,\n        (cast(unit_price as decimal(10,2)) * cast(quantity as int)) - \n         cast(discount as decimal(10,2)) + \n         cast(tax as decimal(10,2)) as net_amount,\n        \n        case \n            when cast(quantity as int) > 0 and cast(unit_price as decimal(10,2)) < 0 then 'invalid_positive_qty_negative_price'\n            when cast(discount as decimal(10,2)) > cast(unit_price as decimal(10,2)) * cast(quantity as int) then 'discount_exceeds_gross'\n            when cast(discount as decimal(10,2)) < 0 then 'negative_discount'\n            when cast(tax as decimal(10,2)) < 0 then 'negative_tax'\n            when cast(quantity as int) < 0 then 'negative_quantity'\n            else 'valid'\n        end as business_validation_flag\n        \n    from source_data\n    \n    -- Basic validation + Business logic validation\n    where item_id is not null\n        and transaction_id is not null  \n        and product_id is not null\n        and quantity is not null\n        and unit_price is not null\n        and discount is not null\n        and tax is not null\n        -- Business rules\n        and cast(quantity as int) >= 0  -- No negative quantities\n        and cast(discount as decimal(10,2)) >= 0  -- No negative discounts\n        and cast(tax as decimal(10,2)) >= 0  -- No negative tax\n        and cast(discount as decimal(10,2)) <= cast(unit_price as decimal(10,2)) * cast(quantity as int)  -- Discount can't exceed gross amount\n        -- Allow unit_price = 0 for free items/samples\n        and not (cast(quantity as int) > 0 and cast(unit_price as decimal(10,2)) < 0)  -- If quantity > 0, price can't be negative\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_shipments": {"database": "postgres", "schema": "silver_staging", "name": "stg_shipments", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_shipments.sql", "original_file_path": "models/staging/stg_shipments.sql", "unique_id": "model.retail_dbt.stg_shipments", "fqn": ["retail_dbt", "staging", "stg_shipments"], "alias": "stg_shipments", "checksum": {"name": "sha256", "checksum": "b6359cb6c645b450d256d80584d929c79f63b7e3280ee7f3e9ad66345fc38c12"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_shipments.sql", "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1756221680.3804448, "relation_name": "\"postgres\".\"silver_staging\".\"stg_shipments\"", "raw_code": "{{ config(materialized='view', schema='staging') }}\n\nwith source_data as (\n    select * from {{ source('raw', 'shipments') }}\n),\n\nfinal as (\n    select\n        cast(shipment_id as int) as shipment_id,\n        cast(order_id as int) as order_id,\n        cast(store_id as int) as store_id,\n        cast(shipped_date as timestamp) as shipped_date,\n        cast(received_date as timestamp) as received_date\n    from source_data\n    where shipment_id is not null\n        and order_id is not null\n        and store_id is not null\n        and shipped_date is not null\n        and received_date is not null\n        and shipped_date < received_date\n        and shipped_date <= '2025-08-22 00:00:00'\n        and received_date <= '2025-08-22 00:00:00'\n        and shipment_id != 'N/A'\n        and order_id != 'N/A'\n        and store_id != 'N/A'\n        and shipped_date != 'N/A'\n        and received_date != 'N/A'\n)\n\nselect * from final", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "shipments"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.shipments"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_shipments.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * from \"postgres\".\"raw\".\"shipments\"\n),\n\nfinal as (\n    select\n        cast(shipment_id as int) as shipment_id,\n        cast(order_id as int) as order_id,\n        cast(store_id as int) as store_id,\n        cast(shipped_date as timestamp) as shipped_date,\n        cast(received_date as timestamp) as received_date\n    from source_data\n    where shipment_id is not null\n        and order_id is not null\n        and store_id is not null\n        and shipped_date is not null\n        and received_date is not null\n        and shipped_date < received_date\n        and shipped_date <= '2025-08-22 00:00:00'\n        and received_date <= '2025-08-22 00:00:00'\n        and shipment_id != 'N/A'\n        and order_id != 'N/A'\n        and store_id != 'N/A'\n        and shipped_date != 'N/A'\n        and received_date != 'N/A'\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_stores": {"database": "postgres", "schema": "silver_staging", "name": "stg_stores", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_stores.sql", "original_file_path": "models/staging/stg_stores.sql", "unique_id": "model.retail_dbt.stg_stores", "fqn": ["retail_dbt", "staging", "stg_stores"], "alias": "stg_stores", "checksum": {"name": "sha256", "checksum": "fa3a8a51d973b580ea08259b3dc129d6de1d53e106e652b02ace879e16dccc03"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "stores"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "stores"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_stores.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "stores"]}, "created_at": 1756221680.3823938, "relation_name": "\"postgres\".\"silver_staging\".\"stg_stores\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging','stores']\n) }}\n\nWITH src AS (\n  SELECT\n    store_id::int      AS store_id,\n    NULLIF(TRIM(name), '')     AS name,\n    NULLIF(TRIM(location), '') AS location,\n    manager_id::int    AS manager_id\n  FROM raw.stores\n)\n\nSELECT\n  store_id,\n  name,\n  location,\n  manager_id\nFROM src", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_stores.sql", "compiled": true, "compiled_code": "\n\nWITH src AS (\n  SELECT\n    store_id::int      AS store_id,\n    NULLIF(TRIM(name), '')     AS name,\n    NULLIF(TRIM(location), '') AS location,\n    manager_id::int    AS manager_id\n  FROM raw.stores\n)\n\nSELECT\n  store_id,\n  name,\n  location,\n  manager_id\nFROM src", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_returns": {"database": "postgres", "schema": "silver_staging", "name": "stg_returns", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_returns.sql", "original_file_path": "models/staging/stg_returns.sql", "unique_id": "model.retail_dbt.stg_returns", "fqn": ["retail_dbt", "staging", "stg_returns"], "alias": "stg_returns", "checksum": {"name": "sha256", "checksum": "673d439b3ece13e1801dd782027340b95513af522d32511dbe1a19a8fa55e264"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "returns"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "returns"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_returns.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "returns"]}, "created_at": 1756221680.3839593, "relation_name": "\"postgres\".\"silver_staging\".\"stg_returns\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging','returns']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(return_id   AS text))                               AS return_id_txt,\n        TRIM(CAST(item_id     AS text))                               AS item_id_txt,\n    \n        TRIM(REGEXP_REPLACE(REPLACE(CAST(reason AS text), E'\\r',''), '\\s+', ' ', 'g')) AS reason_txt,\n        \n        TRIM(REPLACE(CAST(return_date AS text), E'\\r',''))            AS return_date_txt\n    FROM {{ source('raw','returns') }}\n),\n\ntyped AS (\n    SELECT\n        CASE WHEN return_id_txt ~ '^\\d+$' THEN return_id_txt::int END AS return_id,\n        CASE WHEN item_id_txt   ~ '^\\d+$' THEN item_id_txt::int   END AS item_id,\n\n        CASE\n          WHEN reason_txt IS NULL OR reason_txt = '' THEN NULL\n          WHEN lower(reason_txt) IN ('na','n/a') THEN NULL\n          ELSE reason_txt\n        END AS reason,\n\n        CASE\n          WHEN return_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(return_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS return_date\n    FROM src\n)\n\nSELECT\n    return_id,\n    item_id,\n    reason,\n    return_date\nFROM typed\nWHERE return_id   IS NOT NULL\n  AND item_id     IS NOT NULL\n  AND reason      IS NOT NULL\n  AND return_date IS NOT NULL\n  AND return_date <= DATE '2025-08-22'", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.returns"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_returns.sql", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(return_id   AS text))                               AS return_id_txt,\n        TRIM(CAST(item_id     AS text))                               AS item_id_txt,\n    \n        TRIM(REGEXP_REPLACE(REPLACE(CAST(reason AS text), E'\\r',''), '\\s+', ' ', 'g')) AS reason_txt,\n        \n        TRIM(REPLACE(CAST(return_date AS text), E'\\r',''))            AS return_date_txt\n    FROM \"postgres\".\"raw\".\"returns\"\n),\n\ntyped AS (\n    SELECT\n        CASE WHEN return_id_txt ~ '^\\d+$' THEN return_id_txt::int END AS return_id,\n        CASE WHEN item_id_txt   ~ '^\\d+$' THEN item_id_txt::int   END AS item_id,\n\n        CASE\n          WHEN reason_txt IS NULL OR reason_txt = '' THEN NULL\n          WHEN lower(reason_txt) IN ('na','n/a') THEN NULL\n          ELSE reason_txt\n        END AS reason,\n\n        CASE\n          WHEN return_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(return_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS return_date\n    FROM src\n)\n\nSELECT\n    return_id,\n    item_id,\n    reason,\n    return_date\nFROM typed\nWHERE return_id   IS NOT NULL\n  AND item_id     IS NOT NULL\n  AND reason      IS NOT NULL\n  AND return_date IS NOT NULL\n  AND return_date <= DATE '2025-08-22'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_discount_rules": {"database": "postgres", "schema": "silver_staging", "name": "stg_discount_rules", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_discount_rules.sql", "original_file_path": "models/staging/stg_discount_rules.sql", "unique_id": "model.retail_dbt.stg_discount_rules", "fqn": ["retail_dbt", "staging", "stg_discount_rules"], "alias": "stg_discount_rules", "checksum": {"name": "sha256", "checksum": "7ce7c41675b600d86bbf342f76c5c0673c45df6f0399c8ef1f51c4d35a4cf3b9"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "discount_rules"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "discount_rules"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_discount_rules.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "discount_rules"]}, "created_at": 1756221680.3858926, "relation_name": "\"postgres\".\"silver_staging\".\"stg_discount_rules\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging','discount_rules']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(rule_id AS text))          AS rule_id_txt,\n        TRIM(CAST(product_id AS text))       AS product_id_txt,\n        TRIM(CAST(discount_type AS text))    AS discount_type_txt,\n        TRIM(CAST(value AS text))            AS value_txt,\n        TRIM(REPLACE(CAST(valid_from AS text), E'\\r','')) AS valid_from_txt,\n        TRIM(REPLACE(CAST(valid_to   AS text), E'\\r','')) AS valid_to_txt\n    FROM {{ source('raw','discount_rules') }}\n),\nnorm AS (\n    SELECT\n        NULLIF(rule_id_txt, '')          AS rule_id_clean,\n        NULLIF(product_id_txt, '')       AS product_id_clean,\n        NULLIF(discount_type_txt, '')    AS discount_type_clean,\n        NULLIF(value_txt, '')            AS value_clean,\n        NULLIF(valid_from_txt, '')       AS valid_from_clean,\n        NULLIF(valid_to_txt, '')         AS valid_to_clean\n    FROM src\n),\ntyped AS (\n    SELECT\n        CASE WHEN rule_id_clean    ~ '^[0-9]+$'               THEN rule_id_clean::integer END          AS rule_id,\n        CASE WHEN product_id_clean ~ '^[0-9]+$'               THEN product_id_clean::integer END       AS product_id,\n\n        -- b\u1ecf (?i) -> d\u00f9ng ~* \u0111\u1ec3 so kh\u1edbp kh\u00f4ng ph\u00e2n bi\u1ec7t hoa th\u01b0\u1eddng\n        CASE WHEN discount_type_clean ~* '^(na|n/a)$' THEN NULL\n             ELSE lower(discount_type_clean) END                                                            AS discount_type,\n\n        CASE WHEN value_clean ~* '^(na|n/a)$' THEN NULL\n             WHEN value_clean ~ '^[0-9]+(\\.[0-9]+)?$' THEN value_clean::numeric\n             ELSE NULL END                                                                                  AS value,\n\n        CASE WHEN valid_from_clean ~* '^(na|n/a)$' THEN NULL\n             WHEN valid_from_clean ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n                  THEN to_timestamp(replace(valid_from_clean,'-','/'),'YYYY/FMMM/FMDD')\n             ELSE NULL END                                                                                  AS valid_from,\n\n        CASE WHEN valid_to_clean ~* '^(na|n/a)$' THEN NULL\n             WHEN valid_to_clean ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n                  THEN to_timestamp(replace(valid_to_clean,'-','/'),'YYYY/FMMM/FMDD')\n             ELSE NULL END                                                                                  AS valid_to\n    FROM norm\n),\nstaging_data AS (\n    SELECT rule_id, product_id, discount_type, value, valid_from, valid_to\n    FROM typed\n    WHERE rule_id IS NOT NULL\n      AND product_id IS NOT NULL\n      AND discount_type IS NOT NULL\n      AND value IS NOT NULL\n      AND valid_from IS NOT NULL\n      AND valid_to   IS NOT NULL\n      AND valid_from < valid_to\n)\nSELECT * FROM staging_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "discount_rules"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.discount_rules"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_discount_rules.sql", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(rule_id AS text))          AS rule_id_txt,\n        TRIM(CAST(product_id AS text))       AS product_id_txt,\n        TRIM(CAST(discount_type AS text))    AS discount_type_txt,\n        TRIM(CAST(value AS text))            AS value_txt,\n        TRIM(REPLACE(CAST(valid_from AS text), E'\\r','')) AS valid_from_txt,\n        TRIM(REPLACE(CAST(valid_to   AS text), E'\\r','')) AS valid_to_txt\n    FROM \"postgres\".\"raw\".\"discount_rules\"\n),\nnorm AS (\n    SELECT\n        NULLIF(rule_id_txt, '')          AS rule_id_clean,\n        NULLIF(product_id_txt, '')       AS product_id_clean,\n        NULLIF(discount_type_txt, '')    AS discount_type_clean,\n        NULLIF(value_txt, '')            AS value_clean,\n        NULLIF(valid_from_txt, '')       AS valid_from_clean,\n        NULLIF(valid_to_txt, '')         AS valid_to_clean\n    FROM src\n),\ntyped AS (\n    SELECT\n        CASE WHEN rule_id_clean    ~ '^[0-9]+$'               THEN rule_id_clean::integer END          AS rule_id,\n        CASE WHEN product_id_clean ~ '^[0-9]+$'               THEN product_id_clean::integer END       AS product_id,\n\n        -- b\u1ecf (?i) -> d\u00f9ng ~* \u0111\u1ec3 so kh\u1edbp kh\u00f4ng ph\u00e2n bi\u1ec7t hoa th\u01b0\u1eddng\n        CASE WHEN discount_type_clean ~* '^(na|n/a)$' THEN NULL\n             ELSE lower(discount_type_clean) END                                                            AS discount_type,\n\n        CASE WHEN value_clean ~* '^(na|n/a)$' THEN NULL\n             WHEN value_clean ~ '^[0-9]+(\\.[0-9]+)?$' THEN value_clean::numeric\n             ELSE NULL END                                                                                  AS value,\n\n        CASE WHEN valid_from_clean ~* '^(na|n/a)$' THEN NULL\n             WHEN valid_from_clean ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n                  THEN to_timestamp(replace(valid_from_clean,'-','/'),'YYYY/FMMM/FMDD')\n             ELSE NULL END                                                                                  AS valid_from,\n\n        CASE WHEN valid_to_clean ~* '^(na|n/a)$' THEN NULL\n             WHEN valid_to_clean ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n                  THEN to_timestamp(replace(valid_to_clean,'-','/'),'YYYY/FMMM/FMDD')\n             ELSE NULL END                                                                                  AS valid_to\n    FROM norm\n),\nstaging_data AS (\n    SELECT rule_id, product_id, discount_type, value, valid_from, valid_to\n    FROM typed\n    WHERE rule_id IS NOT NULL\n      AND product_id IS NOT NULL\n      AND discount_type IS NOT NULL\n      AND value IS NOT NULL\n      AND valid_from IS NOT NULL\n      AND valid_to   IS NOT NULL\n      AND valid_from < valid_to\n)\nSELECT * FROM staging_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_promotions": {"database": "postgres", "schema": "silver_staging", "name": "stg_promotions", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_promotions.sql", "original_file_path": "models/staging/stg_promotions.sql", "unique_id": "model.retail_dbt.stg_promotions", "fqn": ["retail_dbt", "staging", "stg_promotions"], "alias": "stg_promotions", "checksum": {"name": "sha256", "checksum": "c1623ff784d94b4f5e3e0ab07d316c487887ccdfae60d4098a50a186f4110eb8"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "promotions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "promotions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_promotions.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "promotions"]}, "created_at": 1756221680.3883414, "relation_name": "\"postgres\".\"silver_staging\".\"stg_promotions\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging','promotions']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(promotion_id AS text))                       AS promotion_id_txt,\n        TRIM(CAST(name AS text))                               AS name_txt,\n        TRIM(REPLACE(CAST(start_date AS text), E'\\r',''))      AS start_date_txt,\n        TRIM(REPLACE(CAST(end_date   AS text), E'\\r',''))      AS end_date_txt\n    FROM {{ source('raw','promotions') }}\n),\n\ntyped AS (\n    SELECT\n        \n        CASE WHEN promotion_id_txt ~ '^\\d+$' THEN promotion_id_txt::int END AS promotion_id,\n\n        \n        NULLIF(NULLIF(lower(name_txt),'na'),'') AS name_clean,\n\n        \n        CASE\n          WHEN start_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(start_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS start_date,\n\n        CASE\n          WHEN end_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(end_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS end_date\n    FROM src\n)\n\nSELECT\n    promotion_id,\n    initcap(name_clean) AS name,\n    start_date,\n    end_date\nFROM typed\nWHERE promotion_id IS NOT NULL\n  AND name_clean  IS NOT NULL\n  AND start_date  IS NOT NULL\n  AND end_date    IS NOT NULL\n  AND start_date  < end_date", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "promotions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.promotions"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_promotions.sql", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(promotion_id AS text))                       AS promotion_id_txt,\n        TRIM(CAST(name AS text))                               AS name_txt,\n        TRIM(REPLACE(CAST(start_date AS text), E'\\r',''))      AS start_date_txt,\n        TRIM(REPLACE(CAST(end_date   AS text), E'\\r',''))      AS end_date_txt\n    FROM \"postgres\".\"raw\".\"promotions\"\n),\n\ntyped AS (\n    SELECT\n        \n        CASE WHEN promotion_id_txt ~ '^\\d+$' THEN promotion_id_txt::int END AS promotion_id,\n\n        \n        NULLIF(NULLIF(lower(name_txt),'na'),'') AS name_clean,\n\n        \n        CASE\n          WHEN start_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(start_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS start_date,\n\n        CASE\n          WHEN end_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(end_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS end_date\n    FROM src\n)\n\nSELECT\n    promotion_id,\n    initcap(name_clean) AS name,\n    start_date,\n    end_date\nFROM typed\nWHERE promotion_id IS NOT NULL\n  AND name_clean  IS NOT NULL\n  AND start_date  IS NOT NULL\n  AND end_date    IS NOT NULL\n  AND start_date  < end_date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_inventory": {"database": "postgres", "schema": "silver_staging", "name": "stg_inventory", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_inventory.sql", "original_file_path": "models/staging/stg_inventory.sql", "unique_id": "model.retail_dbt.stg_inventory", "fqn": ["retail_dbt", "staging", "stg_inventory"], "alias": "stg_inventory", "checksum": {"name": "sha256", "checksum": "58a2f23b4a6652b157f1399f852ffa1b7cd3af11641e5a9b68c341799fe2bc6d"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_inventory.sql", "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1756221680.390576, "relation_name": "\"postgres\".\"silver_staging\".\"stg_inventory\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging'\n) }}\n\nwith source as (\n    select * \n    from {{ source('raw', 'inventory') }}\n),\n\ncleaned as (\n    select\n        case \n            when inventory_id is null or trim(lower(inventory_id)) in ('', 'null', 'na', 'n/a', 'none') \n            then null else cast(inventory_id as integer) \n        end as inventory_id,\n\n        case \n            when store_id is null or trim(lower(store_id)) in ('', 'null', 'na', 'n/a', 'none') \n            then null else cast(store_id as integer) \n        end as store_id,\n\n        case \n            when product_id is null or trim(lower(product_id)) in ('', 'null', 'na', 'n/a', 'none') \n            then null else cast(product_id as integer) \n        end as product_id,\n\n        case \n            when quantity is null or trim(lower(quantity)) in ('', 'null', 'na', 'n/a', 'none') \n            then null else cast(quantity as integer) \n        end as quantity,\n\n        case \n            when last_updated is null or trim(lower(last_updated)) in ('', 'null', 'na', 'n/a', 'none') \n            then null else cast(last_updated as timestamp) \n        end as last_updated\n    from source\n),\n\nfiltered as (\n    select *\n    from cleaned\n    where \n        inventory_id is not null\n        and store_id is not null\n        and product_id is not null\n        and quantity is not null\n        and last_updated is not null\n        and quantity <> 0\n        and cast(last_updated as date) <= date('2025-08-22')\n)\n\nselect * from filtered", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "inventory"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.inventory"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_inventory.sql", "compiled": true, "compiled_code": "\n\nwith source as (\n    select * \n    from \"postgres\".\"raw\".\"inventory\"\n),\n\ncleaned as (\n    select\n        case \n            when inventory_id is null or trim(lower(inventory_id)) in ('', 'null', 'na', 'n/a', 'none') \n            then null else cast(inventory_id as integer) \n        end as inventory_id,\n\n        case \n            when store_id is null or trim(lower(store_id)) in ('', 'null', 'na', 'n/a', 'none') \n            then null else cast(store_id as integer) \n        end as store_id,\n\n        case \n            when product_id is null or trim(lower(product_id)) in ('', 'null', 'na', 'n/a', 'none') \n            then null else cast(product_id as integer) \n        end as product_id,\n\n        case \n            when quantity is null or trim(lower(quantity)) in ('', 'null', 'na', 'n/a', 'none') \n            then null else cast(quantity as integer) \n        end as quantity,\n\n        case \n            when last_updated is null or trim(lower(last_updated)) in ('', 'null', 'na', 'n/a', 'none') \n            then null else cast(last_updated as timestamp) \n        end as last_updated\n    from source\n),\n\nfiltered as (\n    select *\n    from cleaned\n    where \n        inventory_id is not null\n        and store_id is not null\n        and product_id is not null\n        and quantity is not null\n        and last_updated is not null\n        and quantity <> 0\n        and cast(last_updated as date) <= date('2025-08-22')\n)\n\nselect * from filtered", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_campaigns": {"database": "postgres", "schema": "silver_staging", "name": "stg_campaigns", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_campaigns.sql", "original_file_path": "models/staging/stg_campaigns.sql", "unique_id": "model.retail_dbt.stg_campaigns", "fqn": ["retail_dbt", "staging", "stg_campaigns"], "alias": "stg_campaigns", "checksum": {"name": "sha256", "checksum": "77b2dea1613a18ed7f900e68535d7d1eb9920e695b725cf30fd074c8bfa8afe4"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_campaigns.sql", "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1756221680.3929014, "relation_name": "\"postgres\".\"silver_staging\".\"stg_campaigns\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging'   \n) }}\n\n{%- set cutoff_date = '2025-08-22' -%}\n\nwith source as (\n    select * from {{ source('raw', 'campaigns') }}\n),\n\ncleaned as (\n    select\n        case \n            when campaign_id is null then null\n            when trim(campaign_id) = '' then null\n            when lower(trim(campaign_id)) in ('null','na','n/a','none') then null\n            -- lo\u1ea1i b\u1ecf k\u00fd t\u1ef1 kh\u00f4ng ph\u1ea3i s\u1ed1 r\u1ed3i cast sang int\n            else cast(regexp_replace(trim(campaign_id), '[^0-9]', '', 'g') as int)\n        end as campaign_id,\n\n        case \n            when name is null then null\n            when trim(name) = '' then null\n            when lower(trim(name)) in ('null','na','n/a','none') then null\n            else trim(name)\n        end as name,\n\n        case\n            when budget is null then null\n            when trim(budget::text) = '' then null\n            when lower(trim(budget::text)) in ('null','na','n/a','none') then null\n            else nullif(regexp_replace(trim(budget::text), '[^0-9.\\-]', '', 'g'), '')\n        end as budget_str,\n\n        nullif(trim(start_date::text), '') as start_date_raw,\n        nullif(trim(end_date::text), '') as end_date_raw,\n\n        current_timestamp as staged_at\n    from source\n),\n\ntyped as (\n    select\n        campaign_id,\n        name,\n        case\n            when budget_str ~ '^-?\\d+(\\.\\d+)?$' then budget_str::numeric\n            else null\n        end as budget,\n\n        /* Chu\u1ea9n ho\u00e1 d\u1ea5u ph\u00e2n c\u00e1ch ng\u00e0y v\u1ec1 '-' \u0111\u1ec3 d\u1ec5 regex */\n        case when start_date_raw is null then null\n             else regexp_replace(lower(start_date_raw), '[./]', '-', 'g') end as start_norm,\n        case when end_date_raw   is null then null\n             else regexp_replace(lower(end_date_raw),   '[./]', '-', 'g') end as end_norm,\n\n        staged_at\n    from cleaned\n),\n\nparsed as (\n    select\n        campaign_id,\n        name,\n        budget,\n\n        /* START_DATE */\n        case\n            /* YYYY-MM-DD [optional time] */\n            when start_norm ~ '^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])(\\s.*)?$'\n                then to_date(split_part(start_norm, ' ', 1), 'YYYY-MM-DD')\n            /* DD-MM-YYYY [optional time] */\n            when start_norm ~ '^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(start_norm, ' ', 1), 'DD-MM-YYYY')\n            /* MM-DD-YYYY [optional time] */\n            when start_norm ~ '^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(start_norm, ' ', 1), 'MM-DD-YYYY')\n            else null\n        end as start_date,\n\n        /* END_DATE */\n        case\n            when end_norm ~ '^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])(\\s.*)?$'\n                then to_date(split_part(end_norm, ' ', 1), 'YYYY-MM-DD')\n            when end_norm ~ '^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(end_norm, ' ', 1), 'DD-MM-YYYY')\n            when end_norm ~ '^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(end_norm, ' ', 1), 'MM-DD-YYYY')\n            else null\n        end as end_date,\n\n        staged_at\n    from typed\n),\n\nfiltered as (\n    select *\n    from parsed\n    where start_date is not null\n      and end_date is not null\n      and start_date < end_date\n      and start_date < date '{{ cutoff_date }}'\n      and end_date < date '{{ cutoff_date }}'\n      -- Th\u00eam \u0111i\u1ec1u ki\u1ec7n lo\u1ea1i b\u1ecf t\u1ea5t c\u1ea3 c\u00e1c h\u00e0ng c\u00f3 gi\u00e1 tr\u1ecb null \u1edf b\u1ea5t k\u1ef3 c\u1ed9t n\u00e0o\n      and campaign_id is not null\n      and name is not null\n      and budget is not null\n      and staged_at is not null\n)\n\nselect\n    campaign_id,\n    name,\n    budget,\n    start_date,\n    end_date,\n    staged_at\nfrom filtered", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "campaigns"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.campaigns"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_campaigns.sql", "compiled": true, "compiled_code": "with source as (\n    select * from \"postgres\".\"raw\".\"campaigns\"\n),\n\ncleaned as (\n    select\n        case \n            when campaign_id is null then null\n            when trim(campaign_id) = '' then null\n            when lower(trim(campaign_id)) in ('null','na','n/a','none') then null\n            -- lo\u1ea1i b\u1ecf k\u00fd t\u1ef1 kh\u00f4ng ph\u1ea3i s\u1ed1 r\u1ed3i cast sang int\n            else cast(regexp_replace(trim(campaign_id), '[^0-9]', '', 'g') as int)\n        end as campaign_id,\n\n        case \n            when name is null then null\n            when trim(name) = '' then null\n            when lower(trim(name)) in ('null','na','n/a','none') then null\n            else trim(name)\n        end as name,\n\n        case\n            when budget is null then null\n            when trim(budget::text) = '' then null\n            when lower(trim(budget::text)) in ('null','na','n/a','none') then null\n            else nullif(regexp_replace(trim(budget::text), '[^0-9.\\-]', '', 'g'), '')\n        end as budget_str,\n\n        nullif(trim(start_date::text), '') as start_date_raw,\n        nullif(trim(end_date::text), '') as end_date_raw,\n\n        current_timestamp as staged_at\n    from source\n),\n\ntyped as (\n    select\n        campaign_id,\n        name,\n        case\n            when budget_str ~ '^-?\\d+(\\.\\d+)?$' then budget_str::numeric\n            else null\n        end as budget,\n\n        /* Chu\u1ea9n ho\u00e1 d\u1ea5u ph\u00e2n c\u00e1ch ng\u00e0y v\u1ec1 '-' \u0111\u1ec3 d\u1ec5 regex */\n        case when start_date_raw is null then null\n             else regexp_replace(lower(start_date_raw), '[./]', '-', 'g') end as start_norm,\n        case when end_date_raw   is null then null\n             else regexp_replace(lower(end_date_raw),   '[./]', '-', 'g') end as end_norm,\n\n        staged_at\n    from cleaned\n),\n\nparsed as (\n    select\n        campaign_id,\n        name,\n        budget,\n\n        /* START_DATE */\n        case\n            /* YYYY-MM-DD [optional time] */\n            when start_norm ~ '^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])(\\s.*)?$'\n                then to_date(split_part(start_norm, ' ', 1), 'YYYY-MM-DD')\n            /* DD-MM-YYYY [optional time] */\n            when start_norm ~ '^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(start_norm, ' ', 1), 'DD-MM-YYYY')\n            /* MM-DD-YYYY [optional time] */\n            when start_norm ~ '^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(start_norm, ' ', 1), 'MM-DD-YYYY')\n            else null\n        end as start_date,\n\n        /* END_DATE */\n        case\n            when end_norm ~ '^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])(\\s.*)?$'\n                then to_date(split_part(end_norm, ' ', 1), 'YYYY-MM-DD')\n            when end_norm ~ '^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(end_norm, ' ', 1), 'DD-MM-YYYY')\n            when end_norm ~ '^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(end_norm, ' ', 1), 'MM-DD-YYYY')\n            else null\n        end as end_date,\n\n        staged_at\n    from typed\n),\n\nfiltered as (\n    select *\n    from parsed\n    where start_date is not null\n      and end_date is not null\n      and start_date < end_date\n      and start_date < date '2025-08-22'\n      and end_date < date '2025-08-22'\n      -- Th\u00eam \u0111i\u1ec1u ki\u1ec7n lo\u1ea1i b\u1ecf t\u1ea5t c\u1ea3 c\u00e1c h\u00e0ng c\u00f3 gi\u00e1 tr\u1ecb null \u1edf b\u1ea5t k\u1ef3 c\u1ed9t n\u00e0o\n      and campaign_id is not null\n      and name is not null\n      and budget is not null\n      and staged_at is not null\n)\n\nselect\n    campaign_id,\n    name,\n    budget,\n    start_date,\n    end_date,\n    staged_at\nfrom filtered", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_sales_transactions": {"database": "postgres", "schema": "silver_staging", "name": "stg_sales_transactions", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_sales_transactions.sql", "original_file_path": "models/staging/stg_sales_transactions.sql", "unique_id": "model.retail_dbt.stg_sales_transactions", "fqn": ["retail_dbt", "staging", "stg_sales_transactions"], "alias": "stg_sales_transactions", "checksum": {"name": "sha256", "checksum": "3a376293a78932ce6c89ba5d0f6891ac051c66dc63e633f77a5e28ce0f22e1b6"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_sales_transactions.sql", "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1756221680.4048421, "relation_name": "\"postgres\".\"silver_staging\".\"stg_sales_transactions\"", "raw_code": "{{ config(materialized='view', schema='staging') }}\n\nwith source_data as (\n    select * from {{ source('raw', 'sales_transactions') }}\n),\n\nfinal as (\n    select\n        cast(transaction_id as int) as transaction_id,\n        cast(customer_id as int) as customer_id,\n        cast(store_id as int) as store_id,\n        cast(employee_id as int) as employee_id,\n        cast(transaction_date as timestamp) as transaction_date,\n        case\n            when trim(upper(total_amount)) = 'N/A' then null\n            else cast(total_amount as decimal(15,2))\n        end as total_amount,\n        cast(payment_id as int) as payment_id\n    from source_data\n    where transaction_id is not null\n        and customer_id is not null\n        and store_id is not null\n        and employee_id is not null\n        and transaction_date is not null\n        and case\n            when trim(upper(total_amount)) = 'N/A' then null\n            else cast(total_amount as decimal(15,2))\n        end is not null\n        and payment_id is not null\n        and case\n            when trim(upper(total_amount)) = 'N/A' then null\n            else cast(total_amount as decimal(15,2))\n        end != 0\n        and transaction_id != 'N/A'\n        and customer_id != 'N/A'\n        and store_id != 'N/A'\n        and employee_id != 'N/A'\n        and payment_id != 'N/A'\n)\n\nselect * from final", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "sales_transactions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.sales_transactions"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_sales_transactions.sql", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * from \"postgres\".\"raw\".\"sales_transactions\"\n),\n\nfinal as (\n    select\n        cast(transaction_id as int) as transaction_id,\n        cast(customer_id as int) as customer_id,\n        cast(store_id as int) as store_id,\n        cast(employee_id as int) as employee_id,\n        cast(transaction_date as timestamp) as transaction_date,\n        case\n            when trim(upper(total_amount)) = 'N/A' then null\n            else cast(total_amount as decimal(15,2))\n        end as total_amount,\n        cast(payment_id as int) as payment_id\n    from source_data\n    where transaction_id is not null\n        and customer_id is not null\n        and store_id is not null\n        and employee_id is not null\n        and transaction_date is not null\n        and case\n            when trim(upper(total_amount)) = 'N/A' then null\n            else cast(total_amount as decimal(15,2))\n        end is not null\n        and payment_id is not null\n        and case\n            when trim(upper(total_amount)) = 'N/A' then null\n            else cast(total_amount as decimal(15,2))\n        end != 0\n        and transaction_id != 'N/A'\n        and customer_id != 'N/A'\n        and store_id != 'N/A'\n        and employee_id != 'N/A'\n        and payment_id != 'N/A'\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_brands": {"database": "postgres", "schema": "silver_staging", "name": "stg_brands", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_brands.sql", "original_file_path": "models/staging/stg_brands.sql", "unique_id": "model.retail_dbt.stg_brands", "fqn": ["retail_dbt", "staging", "stg_brands"], "alias": "stg_brands", "checksum": {"name": "sha256", "checksum": "ece3a5c8d6455a91b643a163f2ba43fd073e76b05fc9833445aec1841ff47d52"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_brands.sql", "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1756221680.4067466, "relation_name": "\"postgres\".\"silver_staging\".\"stg_brands\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging'\n) }}\n\nwith source as (\n    select * from {{ source('raw', 'brands') }}\n),\n\ncleaned as (\n    select\n        case \n            when trim(brand_id) = '' then null\n            when lower(trim(brand_id)) in ('null', 'na', 'n/a') then null\n            -- lo\u1ea1i b\u1ecf k\u00fd t\u1ef1 kh\u00f4ng ph\u1ea3i s\u1ed1 tr\u01b0\u1edbc khi cast\n            else cast(regexp_replace(trim(brand_id), '[^0-9]', '', 'g') as int)\n        end as brand_id,\n        \n        case \n            when trim(name) = '' then null\n            when lower(trim(name)) in ('null', 'na', 'n/a', 'none', 'unknown') then null\n            else trim(name)\n        end as name,\n        \n        current_timestamp as staged_at\n    from source\n)\n\nselect * from cleaned", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "brands"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.brands"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_brands.sql", "compiled": true, "compiled_code": "\n\nwith source as (\n    select * from \"postgres\".\"raw\".\"brands\"\n),\n\ncleaned as (\n    select\n        case \n            when trim(brand_id) = '' then null\n            when lower(trim(brand_id)) in ('null', 'na', 'n/a') then null\n            -- lo\u1ea1i b\u1ecf k\u00fd t\u1ef1 kh\u00f4ng ph\u1ea3i s\u1ed1 tr\u01b0\u1edbc khi cast\n            else cast(regexp_replace(trim(brand_id), '[^0-9]', '', 'g') as int)\n        end as brand_id,\n        \n        case \n            when trim(name) = '' then null\n            when lower(trim(name)) in ('null', 'na', 'n/a', 'none', 'unknown') then null\n            else trim(name)\n        end as name,\n        \n        current_timestamp as staged_at\n    from source\n)\n\nselect * from cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_customer_feedback": {"database": "postgres", "schema": "silver_staging", "name": "stg_customer_feedback", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_customer_feedback.sql", "original_file_path": "models/staging/stg_customer_feedback.sql", "unique_id": "model.retail_dbt.stg_customer_feedback", "fqn": ["retail_dbt", "staging", "stg_customer_feedback"], "alias": "stg_customer_feedback", "checksum": {"name": "sha256", "checksum": "1f4b3e193fc87f7b0b218e3473f84cb48402d8d918f5232ce1067ec37b43080c"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "customer_feedback"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "customer_feedback"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_customer_feedback.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "customer_feedback"]}, "created_at": 1756221680.408604, "relation_name": "\"postgres\".\"silver_staging\".\"stg_customer_feedback\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging', 'customer_feedback']\n) }}\n\nWITH source_data AS (\n    SELECT\n        -- cast c\u00e1c ID v\u1ec1 int\n        CASE\n            WHEN feedback_id IS NULL OR TRIM(feedback_id::text) = '' \n                 OR LOWER(TRIM(feedback_id::text)) IN ('na','null','n/a') \n            THEN NULL\n            ELSE CAST(regexp_replace(TRIM(feedback_id::text), '[^0-9]', '', 'g') AS int)\n        END AS feedback_id,\n\n        CASE\n            WHEN customer_id IS NULL OR TRIM(customer_id::text) = '' \n                 OR LOWER(TRIM(customer_id::text)) IN ('na','null','n/a') \n            THEN NULL\n            ELSE CAST(regexp_replace(TRIM(customer_id::text), '[^0-9]', '', 'g') AS int)\n        END AS customer_id,\n\n        CASE\n            WHEN store_id IS NULL OR TRIM(store_id::text) = '' \n                 OR LOWER(TRIM(store_id::text)) IN ('na','null','n/a') \n            THEN NULL\n            ELSE CAST(regexp_replace(TRIM(store_id::text), '[^0-9]', '', 'g') AS int)\n        END AS store_id,\n\n        CASE\n            WHEN product_id IS NULL OR TRIM(product_id::text) = '' \n                 OR LOWER(TRIM(product_id::text)) IN ('na','null','n/a') \n            THEN NULL\n            ELSE CAST(regexp_replace(TRIM(product_id::text), '[^0-9]', '', 'g') AS int)\n        END AS product_id,\n\n        CASE\n            WHEN rating IS NULL THEN NULL\n            WHEN TRIM(LOWER(CAST(rating AS text))) IN ('na', '') THEN NULL\n            WHEN TRIM(CAST(rating AS text)) ~ '^[0-9]+$' \n            THEN CAST(TRIM(CAST(rating AS text)) AS integer)\n            ELSE NULL\n        END AS rating,\n\n        TRIM(CAST(comments AS text)) AS comments,\n\n        CASE\n            WHEN feedback_date IS NULL THEN NULL\n            WHEN TRIM(LOWER(CAST(feedback_date AS text))) IN ('na', '') THEN NULL\n            ELSE TRIM(REPLACE(CAST(feedback_date AS text), E'\\r', ''))\n        END AS feedback_date_text\n    FROM {{ source('raw', 'customer_feedback') }}\n),\n\ndated AS (\n    SELECT\n        feedback_id,\n        customer_id,\n        store_id,\n        product_id,\n        rating,\n        comments,\n        feedback_date_text,\n\n        (\n            feedback_date_text ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n        ) AS is_valid_date_text,\n\n        CASE\n            WHEN feedback_date_text IS NOT NULL\n             AND feedback_date_text ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n            THEN to_timestamp(replace(feedback_date_text, '-', '/'), 'YYYY/FMMM/FMDD')\n            ELSE NULL\n        END AS feedback_date_ts\n    FROM source_data\n),\n\nstaging_data AS (\n    SELECT\n        feedback_id::int      AS feedback_id,\n        customer_id::int      AS customer_id,\n        store_id::int         AS store_id,\n        product_id::int       AS product_id,\n        rating::integer       AS rating,\n        comments::text        AS comments,\n        feedback_date_ts      AS feedback_date\n    FROM dated\n    WHERE\n        feedback_id IS NOT NULL\n        AND customer_id IS NOT NULL\n        AND store_id   IS NOT NULL\n        AND product_id IS NOT NULL\n        AND rating BETWEEN 1 AND 5\n        AND is_valid_date_text\n        AND feedback_date_ts IS NOT NULL\n        AND feedback_date_ts <= to_timestamp('2025/08/22', 'YYYY/MM/DD')\n)\n\nSELECT\n    feedback_id,\n    customer_id,\n    store_id,\n    product_id,\n    rating,\n    comments,\n    feedback_date\nFROM staging_data", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "customer_feedback"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.customer_feedback"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_customer_feedback.sql", "compiled": true, "compiled_code": "\n\nWITH source_data AS (\n    SELECT\n        -- cast c\u00e1c ID v\u1ec1 int\n        CASE\n            WHEN feedback_id IS NULL OR TRIM(feedback_id::text) = '' \n                 OR LOWER(TRIM(feedback_id::text)) IN ('na','null','n/a') \n            THEN NULL\n            ELSE CAST(regexp_replace(TRIM(feedback_id::text), '[^0-9]', '', 'g') AS int)\n        END AS feedback_id,\n\n        CASE\n            WHEN customer_id IS NULL OR TRIM(customer_id::text) = '' \n                 OR LOWER(TRIM(customer_id::text)) IN ('na','null','n/a') \n            THEN NULL\n            ELSE CAST(regexp_replace(TRIM(customer_id::text), '[^0-9]', '', 'g') AS int)\n        END AS customer_id,\n\n        CASE\n            WHEN store_id IS NULL OR TRIM(store_id::text) = '' \n                 OR LOWER(TRIM(store_id::text)) IN ('na','null','n/a') \n            THEN NULL\n            ELSE CAST(regexp_replace(TRIM(store_id::text), '[^0-9]', '', 'g') AS int)\n        END AS store_id,\n\n        CASE\n            WHEN product_id IS NULL OR TRIM(product_id::text) = '' \n                 OR LOWER(TRIM(product_id::text)) IN ('na','null','n/a') \n            THEN NULL\n            ELSE CAST(regexp_replace(TRIM(product_id::text), '[^0-9]', '', 'g') AS int)\n        END AS product_id,\n\n        CASE\n            WHEN rating IS NULL THEN NULL\n            WHEN TRIM(LOWER(CAST(rating AS text))) IN ('na', '') THEN NULL\n            WHEN TRIM(CAST(rating AS text)) ~ '^[0-9]+$' \n            THEN CAST(TRIM(CAST(rating AS text)) AS integer)\n            ELSE NULL\n        END AS rating,\n\n        TRIM(CAST(comments AS text)) AS comments,\n\n        CASE\n            WHEN feedback_date IS NULL THEN NULL\n            WHEN TRIM(LOWER(CAST(feedback_date AS text))) IN ('na', '') THEN NULL\n            ELSE TRIM(REPLACE(CAST(feedback_date AS text), E'\\r', ''))\n        END AS feedback_date_text\n    FROM \"postgres\".\"raw\".\"customer_feedback\"\n),\n\ndated AS (\n    SELECT\n        feedback_id,\n        customer_id,\n        store_id,\n        product_id,\n        rating,\n        comments,\n        feedback_date_text,\n\n        (\n            feedback_date_text ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n        ) AS is_valid_date_text,\n\n        CASE\n            WHEN feedback_date_text IS NOT NULL\n             AND feedback_date_text ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n            THEN to_timestamp(replace(feedback_date_text, '-', '/'), 'YYYY/FMMM/FMDD')\n            ELSE NULL\n        END AS feedback_date_ts\n    FROM source_data\n),\n\nstaging_data AS (\n    SELECT\n        feedback_id::int      AS feedback_id,\n        customer_id::int      AS customer_id,\n        store_id::int         AS store_id,\n        product_id::int       AS product_id,\n        rating::integer       AS rating,\n        comments::text        AS comments,\n        feedback_date_ts      AS feedback_date\n    FROM dated\n    WHERE\n        feedback_id IS NOT NULL\n        AND customer_id IS NOT NULL\n        AND store_id   IS NOT NULL\n        AND product_id IS NOT NULL\n        AND rating BETWEEN 1 AND 5\n        AND is_valid_date_text\n        AND feedback_date_ts IS NOT NULL\n        AND feedback_date_ts <= to_timestamp('2025/08/22', 'YYYY/MM/DD')\n)\n\nSELECT\n    feedback_id,\n    customer_id,\n    store_id,\n    product_id,\n    rating,\n    comments,\n    feedback_date\nFROM staging_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_customers": {"database": "postgres", "schema": "silver_staging", "name": "stg_customers", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_customers.sql", "original_file_path": "models/staging/stg_customers.sql", "unique_id": "model.retail_dbt.stg_customers", "fqn": ["retail_dbt", "staging", "stg_customers"], "alias": "stg_customers", "checksum": {"name": "sha256", "checksum": "139a9294752c367ac8c37832f6163b3c536c8b76f1313884f44acdbde41c0fc3"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "customers"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "customers"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_customers.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "customers"]}, "created_at": 1756221680.4106324, "relation_name": "\"postgres\".\"silver_staging\".\"stg_customers\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging','customers']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(customer_id AS text))                        AS customer_id_text,\n        TRIM(CAST(name        AS text))                        AS name,\n        LOWER(TRIM(CAST(email AS text)))                       AS email,\n        TRIM(CAST(phone       AS text))                        AS phone_text,\n        TRIM(CAST(loyalty_program_id AS text))                 AS loyalty_program_id_text,\n        TRIM(REPLACE(CAST(created_at AS text), E'\\r',''))      AS created_at_text\n    FROM {{ source('raw','customers') }}\n),\ntyped AS (\n    SELECT\n        CASE WHEN customer_id_text ~ '^[0-9]+$'\n             THEN customer_id_text::integer END                AS customer_id,\n        name,\n        email,\n        phone_text                                             AS phone,\n        CASE WHEN loyalty_program_id_text ~ '^[0-9]+$'\n             THEN loyalty_program_id_text::integer END         AS loyalty_program_id,\n\n        CASE\n            WHEN created_at_text ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n            THEN to_timestamp(replace(created_at_text,'-','/'),'YYYY/FMMM/FMDD')\n            ELSE NULL\n        END                                                    AS created_at\n    FROM src\n)\nSELECT\n    customer_id, name, email, phone, loyalty_program_id, created_at\nFROM typed\nWHERE created_at IS NOT NULL\n  AND created_at <= to_timestamp('2025/08/22','YYYY/MM/DD')", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "customers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.customers"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_customers.sql", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(customer_id AS text))                        AS customer_id_text,\n        TRIM(CAST(name        AS text))                        AS name,\n        LOWER(TRIM(CAST(email AS text)))                       AS email,\n        TRIM(CAST(phone       AS text))                        AS phone_text,\n        TRIM(CAST(loyalty_program_id AS text))                 AS loyalty_program_id_text,\n        TRIM(REPLACE(CAST(created_at AS text), E'\\r',''))      AS created_at_text\n    FROM \"postgres\".\"raw\".\"customers\"\n),\ntyped AS (\n    SELECT\n        CASE WHEN customer_id_text ~ '^[0-9]+$'\n             THEN customer_id_text::integer END                AS customer_id,\n        name,\n        email,\n        phone_text                                             AS phone,\n        CASE WHEN loyalty_program_id_text ~ '^[0-9]+$'\n             THEN loyalty_program_id_text::integer END         AS loyalty_program_id,\n\n        CASE\n            WHEN created_at_text ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n            THEN to_timestamp(replace(created_at_text,'-','/'),'YYYY/FMMM/FMDD')\n            ELSE NULL\n        END                                                    AS created_at\n    FROM src\n)\nSELECT\n    customer_id, name, email, phone, loyalty_program_id, created_at\nFROM typed\nWHERE created_at IS NOT NULL\n  AND created_at <= to_timestamp('2025/08/22','YYYY/MM/DD')", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_store_visits": {"database": "postgres", "schema": "silver_staging", "name": "stg_store_visits", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_store_visits.sql", "original_file_path": "models/staging/stg_store_visits.sql", "unique_id": "model.retail_dbt.stg_store_visits", "fqn": ["retail_dbt", "staging", "stg_store_visits"], "alias": "stg_store_visits", "checksum": {"name": "sha256", "checksum": "2349e656a0e18f405deacc7a4e1b6e0abb9c422c7fe24d99053e9ef5d92400e9"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "store_visits"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "store_visits"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_store_visits.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "store_visits"]}, "created_at": 1756221680.412797, "relation_name": "\"postgres\".\"silver_staging\".\"stg_store_visits\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging','store_visits']\n) }}\n\nWITH src AS (\n  SELECT\n    TRIM(CAST(visit_id    AS text)) AS visit_id_txt,\n    TRIM(CAST(customer_id AS text)) AS customer_id_txt,\n    TRIM(CAST(store_id    AS text)) AS store_id_txt,\n    TRIM(REPLACE(CAST(visit_date AS text), E'\\r','')) AS visit_date_txt\n  FROM {{ source('raw','store_visits') }}\n),\n\ntyped AS (\n  SELECT\n    \n    CASE WHEN visit_id_txt    ~ '^\\d+$' THEN visit_id_txt::int    END AS visit_id,\n    CASE WHEN customer_id_txt ~ '^\\d+$' THEN customer_id_txt::int END AS customer_id,\n    CASE WHEN store_id_txt    ~ '^\\d+$' THEN store_id_txt::int    END AS store_id,\n\n    \n    CASE\n      WHEN visit_date_txt ~ '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'\n      THEN to_date(visit_date_txt,'YYYY-MM-DD')\n    END AS visit_date_raw,\n\n    visit_date_txt\n  FROM src\n),\n\n\nvalidated AS (\n  SELECT\n    visit_id, customer_id, store_id,\n    CASE\n      WHEN visit_date_raw IS NOT NULL\n       AND to_char(visit_date_raw,'YYYY-MM-DD') = visit_date_txt\n      THEN visit_date_raw\n    END AS visit_date\n  FROM typed\n)\n\nSELECT\n  visit_id,\n  customer_id,\n  store_id,\n  visit_date\nFROM validated\nWHERE visit_id    IS NOT NULL\n  AND customer_id IS NOT NULL\n  AND store_id    IS NOT NULL\n  AND visit_date  IS NOT NULL\n  AND visit_date <= DATE '2025-08-22'", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "store_visits"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.store_visits"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_store_visits.sql", "compiled": true, "compiled_code": "\n\nWITH src AS (\n  SELECT\n    TRIM(CAST(visit_id    AS text)) AS visit_id_txt,\n    TRIM(CAST(customer_id AS text)) AS customer_id_txt,\n    TRIM(CAST(store_id    AS text)) AS store_id_txt,\n    TRIM(REPLACE(CAST(visit_date AS text), E'\\r','')) AS visit_date_txt\n  FROM \"postgres\".\"raw\".\"store_visits\"\n),\n\ntyped AS (\n  SELECT\n    \n    CASE WHEN visit_id_txt    ~ '^\\d+$' THEN visit_id_txt::int    END AS visit_id,\n    CASE WHEN customer_id_txt ~ '^\\d+$' THEN customer_id_txt::int END AS customer_id,\n    CASE WHEN store_id_txt    ~ '^\\d+$' THEN store_id_txt::int    END AS store_id,\n\n    \n    CASE\n      WHEN visit_date_txt ~ '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'\n      THEN to_date(visit_date_txt,'YYYY-MM-DD')\n    END AS visit_date_raw,\n\n    visit_date_txt\n  FROM src\n),\n\n\nvalidated AS (\n  SELECT\n    visit_id, customer_id, store_id,\n    CASE\n      WHEN visit_date_raw IS NOT NULL\n       AND to_char(visit_date_raw,'YYYY-MM-DD') = visit_date_txt\n      THEN visit_date_raw\n    END AS visit_date\n  FROM typed\n)\n\nSELECT\n  visit_id,\n  customer_id,\n  store_id,\n  visit_date\nFROM validated\nWHERE visit_id    IS NOT NULL\n  AND customer_id IS NOT NULL\n  AND store_id    IS NOT NULL\n  AND visit_date  IS NOT NULL\n  AND visit_date <= DATE '2025-08-22'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_loyalty_programs": {"database": "postgres", "schema": "silver_staging", "name": "stg_loyalty_programs", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_loyalty_programs.sql", "original_file_path": "models/staging/stg_loyalty_programs.sql", "unique_id": "model.retail_dbt.stg_loyalty_programs", "fqn": ["retail_dbt", "staging", "stg_loyalty_programs"], "alias": "stg_loyalty_programs", "checksum": {"name": "sha256", "checksum": "3009f42d0f6e14938bd79ec7cd31933b2b442d938f2fead1fdf7456c8422e198"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "loyalty_programs"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "loyalty_programs"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_loyalty_programs.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "loyalty_programs"]}, "created_at": 1756221680.4147024, "relation_name": "\"postgres\".\"silver_staging\".\"stg_loyalty_programs\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging','loyalty_programs']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(loyalty_program_id AS text)) AS loyalty_program_id_txt,\n        TRIM(CAST(name               AS text)) AS name_txt,\n        TRIM(CAST(points_per_dollar  AS text)) AS points_per_dollar_txt\n    FROM {{ source('raw','loyalty_programs') }}\n),\n\n\nfiltered AS (\n    SELECT *\n    FROM src\n    WHERE loyalty_program_id_txt IS NOT NULL AND loyalty_program_id_txt <> '' AND lower(loyalty_program_id_txt) NOT IN ('na','n/a')\n      AND name_txt               IS NOT NULL AND name_txt               <> '' AND lower(name_txt)               NOT IN ('na','n/a')\n      AND points_per_dollar_txt  IS NOT NULL AND points_per_dollar_txt  <> '' AND lower(points_per_dollar_txt)  NOT IN ('na','n/a')\n),\n\ntyped AS (\n    SELECT\n        \n        CASE\n          WHEN loyalty_program_id_txt ~ '^\\s*\\d+\\s*$' THEN loyalty_program_id_txt::integer\n        END AS loyalty_program_id,\n\n        name_txt AS name,\n\n        CASE\n          WHEN points_per_dollar_txt ~ '^\\s*\\d+\\s*$' THEN points_per_dollar_txt::integer\n        END AS points_per_dollar\n    FROM filtered\n)\n\nSELECT loyalty_program_id, name, points_per_dollar\nFROM typed\nWHERE loyalty_program_id IS NOT NULL\n  AND name IS NOT NULL\n  AND points_per_dollar IS NOT NULL", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "loyalty_programs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.loyalty_programs"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_loyalty_programs.sql", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(loyalty_program_id AS text)) AS loyalty_program_id_txt,\n        TRIM(CAST(name               AS text)) AS name_txt,\n        TRIM(CAST(points_per_dollar  AS text)) AS points_per_dollar_txt\n    FROM \"postgres\".\"raw\".\"loyalty_programs\"\n),\n\n\nfiltered AS (\n    SELECT *\n    FROM src\n    WHERE loyalty_program_id_txt IS NOT NULL AND loyalty_program_id_txt <> '' AND lower(loyalty_program_id_txt) NOT IN ('na','n/a')\n      AND name_txt               IS NOT NULL AND name_txt               <> '' AND lower(name_txt)               NOT IN ('na','n/a')\n      AND points_per_dollar_txt  IS NOT NULL AND points_per_dollar_txt  <> '' AND lower(points_per_dollar_txt)  NOT IN ('na','n/a')\n),\n\ntyped AS (\n    SELECT\n        \n        CASE\n          WHEN loyalty_program_id_txt ~ '^\\s*\\d+\\s*$' THEN loyalty_program_id_txt::integer\n        END AS loyalty_program_id,\n\n        name_txt AS name,\n\n        CASE\n          WHEN points_per_dollar_txt ~ '^\\s*\\d+\\s*$' THEN points_per_dollar_txt::integer\n        END AS points_per_dollar\n    FROM filtered\n)\n\nSELECT loyalty_program_id, name, points_per_dollar\nFROM typed\nWHERE loyalty_program_id IS NOT NULL\n  AND name IS NOT NULL\n  AND points_per_dollar IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_suppliers": {"database": "postgres", "schema": "silver_staging", "name": "stg_suppliers", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_suppliers.sql", "original_file_path": "models/staging/stg_suppliers.sql", "unique_id": "model.retail_dbt.stg_suppliers", "fqn": ["retail_dbt", "staging", "stg_suppliers"], "alias": "stg_suppliers", "checksum": {"name": "sha256", "checksum": "8b49debcaca43e93a73fc905afbdb0365960b0459924fca97368926be10a8e92"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "suppliers"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "suppliers"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_suppliers.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "suppliers"]}, "created_at": 1756221680.4167275, "relation_name": "\"postgres\".\"silver_staging\".\"stg_suppliers\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging','suppliers']\n) }}\n\nWITH src AS (\n    SELECT\n        supplier_id::int                               AS supplier_id,\n        NULLIF(TRIM(name), '')                         AS name,\n        NULLIF(TRIM(contact_info), '')                 AS contact_info\n    FROM raw.suppliers\n)\n\nSELECT\n    supplier_id,\n    name,\n    contact_info\nFROM src", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_suppliers.sql", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        supplier_id::int                               AS supplier_id,\n        NULLIF(TRIM(name), '')                         AS name,\n        NULLIF(TRIM(contact_info), '')                 AS contact_info\n    FROM raw.suppliers\n)\n\nSELECT\n    supplier_id,\n    name,\n    contact_info\nFROM src", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_stock_movements": {"database": "postgres", "schema": "silver_staging", "name": "stg_stock_movements", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_stock_movements.sql", "original_file_path": "models/staging/stg_stock_movements.sql", "unique_id": "model.retail_dbt.stg_stock_movements", "fqn": ["retail_dbt", "staging", "stg_stock_movements"], "alias": "stg_stock_movements", "checksum": {"name": "sha256", "checksum": "eb053b48b48b4b9bcb18035fa9a07cc93ea39ac19ccb0ddc8ee7288fb18dcee5"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "stock_movements"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "stock_movements"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_stock_movements.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "stock_movements"]}, "created_at": 1756221680.4184835, "relation_name": "\"postgres\".\"silver_staging\".\"stg_stock_movements\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging','stock_movements']\n) }}\n\n\nWITH src AS (\n  SELECT\n    TRIM(CAST(movement_id   AS text)) AS movement_id_txt,\n    TRIM(CAST(product_id    AS text)) AS product_id_txt,\n    TRIM(CAST(store_id      AS text)) AS store_id_txt,\n    TRIM(CAST(movement_type AS text)) AS movement_type_txt,\n    TRIM(CAST(quantity      AS text)) AS quantity_txt,\n    TRIM(REPLACE(CAST(movement_date AS text), E'\\r','')) AS movement_date_txt\n  FROM {{ source('raw','stock_movements') }}\n),\n\n\ntyped AS (\n  SELECT\n    CASE WHEN movement_id_txt  ~ '^\\d+$' THEN movement_id_txt::int  END AS movement_id,\n    CASE WHEN product_id_txt   ~ '^\\d+$' THEN product_id_txt::int   END AS product_id,\n    CASE WHEN store_id_txt     ~ '^\\d+$' THEN store_id_txt::int     END AS store_id,\n\n    CASE\n      WHEN upper(TRIM(movement_type_txt)) IN ('IN','OUT','TRANSFER')\n      THEN upper(TRIM(movement_type_txt))\n      ELSE NULL\n    END AS movement_type,\n\n    CASE\n      WHEN quantity_txt IS NULL OR quantity_txt = '' THEN NULL\n      WHEN lower(quantity_txt) IN ('unknown','na','n/a') THEN NULL\n      WHEN quantity_txt ~ '^-?\\d+$' THEN quantity_txt::int\n      ELSE NULL\n    END AS quantity,\n\n  \n    CASE\n      WHEN movement_date_txt ~ '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'\n      THEN to_date(movement_date_txt,'YYYY-MM-DD')\n    END AS movement_date_raw,\n\n    movement_date_txt\n  FROM src\n),\n\n\ndated AS (\n  SELECT\n    movement_id, product_id, store_id, movement_type, quantity,\n    CASE\n      WHEN movement_date_raw IS NOT NULL\n       AND to_char(movement_date_raw,'YYYY-MM-DD') = movement_date_txt\n      THEN movement_date_raw\n    END AS movement_date\n  FROM typed\n)\n\nSELECT\n  movement_id,\n  product_id,\n  store_id,\n  movement_type,\n  quantity,\n  movement_date\nFROM dated\nWHERE movement_id   IS NOT NULL AND movement_id   > 0\n  AND product_id    IS NOT NULL AND product_id    > 0\n  AND store_id      IS NOT NULL AND store_id      > 0\n  AND movement_type IS NOT NULL\n  AND quantity      IS NOT NULL AND quantity      > 0\n  AND movement_date IS NOT NULL\n  AND movement_date <= DATE '2025-08-22'", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "stock_movements"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.stock_movements"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_stock_movements.sql", "compiled": true, "compiled_code": "\n\n\nWITH src AS (\n  SELECT\n    TRIM(CAST(movement_id   AS text)) AS movement_id_txt,\n    TRIM(CAST(product_id    AS text)) AS product_id_txt,\n    TRIM(CAST(store_id      AS text)) AS store_id_txt,\n    TRIM(CAST(movement_type AS text)) AS movement_type_txt,\n    TRIM(CAST(quantity      AS text)) AS quantity_txt,\n    TRIM(REPLACE(CAST(movement_date AS text), E'\\r','')) AS movement_date_txt\n  FROM \"postgres\".\"raw\".\"stock_movements\"\n),\n\n\ntyped AS (\n  SELECT\n    CASE WHEN movement_id_txt  ~ '^\\d+$' THEN movement_id_txt::int  END AS movement_id,\n    CASE WHEN product_id_txt   ~ '^\\d+$' THEN product_id_txt::int   END AS product_id,\n    CASE WHEN store_id_txt     ~ '^\\d+$' THEN store_id_txt::int     END AS store_id,\n\n    CASE\n      WHEN upper(TRIM(movement_type_txt)) IN ('IN','OUT','TRANSFER')\n      THEN upper(TRIM(movement_type_txt))\n      ELSE NULL\n    END AS movement_type,\n\n    CASE\n      WHEN quantity_txt IS NULL OR quantity_txt = '' THEN NULL\n      WHEN lower(quantity_txt) IN ('unknown','na','n/a') THEN NULL\n      WHEN quantity_txt ~ '^-?\\d+$' THEN quantity_txt::int\n      ELSE NULL\n    END AS quantity,\n\n  \n    CASE\n      WHEN movement_date_txt ~ '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'\n      THEN to_date(movement_date_txt,'YYYY-MM-DD')\n    END AS movement_date_raw,\n\n    movement_date_txt\n  FROM src\n),\n\n\ndated AS (\n  SELECT\n    movement_id, product_id, store_id, movement_type, quantity,\n    CASE\n      WHEN movement_date_raw IS NOT NULL\n       AND to_char(movement_date_raw,'YYYY-MM-DD') = movement_date_txt\n      THEN movement_date_raw\n    END AS movement_date\n  FROM typed\n)\n\nSELECT\n  movement_id,\n  product_id,\n  store_id,\n  movement_type,\n  quantity,\n  movement_date\nFROM dated\nWHERE movement_id   IS NOT NULL AND movement_id   > 0\n  AND product_id    IS NOT NULL AND product_id    > 0\n  AND store_id      IS NOT NULL AND store_id      > 0\n  AND movement_type IS NOT NULL\n  AND quantity      IS NOT NULL AND quantity      > 0\n  AND movement_date IS NOT NULL\n  AND movement_date <= DATE '2025-08-22'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_pricing_history": {"database": "postgres", "schema": "silver_staging", "name": "stg_pricing_history", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_pricing_history.sql", "original_file_path": "models/staging/stg_pricing_history.sql", "unique_id": "model.retail_dbt.stg_pricing_history", "fqn": ["retail_dbt", "staging", "stg_pricing_history"], "alias": "stg_pricing_history", "checksum": {"name": "sha256", "checksum": "5d464737b889ecb607a00ffe10ccb871190c004779fe41f3b8fbe7214cf94cda"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "pricing_history"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "pricing_history"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_pricing_history.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "pricing_history"]}, "created_at": 1756221680.4206722, "relation_name": "\"postgres\".\"silver_staging\".\"stg_pricing_history\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging','pricing_history']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(history_id     AS text)) AS history_id_txt,\n        TRIM(CAST(product_id     AS text)) AS product_id_txt,\n        TRIM(CAST(price          AS text)) AS price_txt,\n        TRIM(REPLACE(CAST(effective_date AS text), E'\\r','')) AS effective_date_txt\n    FROM {{ source('raw','pricing_history') }}\n),\n\ntyped AS (\n    SELECT\n        \n        CASE WHEN history_id_txt ~ '^\\d+$'  THEN history_id_txt::integer  END AS history_id,\n        CASE WHEN product_id_txt ~ '^\\d+$'  THEN product_id_txt::integer  END AS product_id,\n\n        \n        CASE WHEN price_txt ~ '^-?\\d+(\\.\\d+)?$' THEN price_txt::numeric END AS price,\n\n        \n        CASE\n          WHEN effective_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(effective_date_txt, '-', '/'),'YYYY/FMMM/FMDD')::date\n          ELSE NULL\n        END AS effective_date\n    FROM src\n)\n\nSELECT\n    history_id,\n    product_id,\n    price,\n    effective_date\nFROM typed\nWHERE price IS NOT NULL\n  AND price > 0\n  AND effective_date IS NOT NULL\n  AND effective_date <= CURRENT_DATE", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "pricing_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.pricing_history"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_pricing_history.sql", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(history_id     AS text)) AS history_id_txt,\n        TRIM(CAST(product_id     AS text)) AS product_id_txt,\n        TRIM(CAST(price          AS text)) AS price_txt,\n        TRIM(REPLACE(CAST(effective_date AS text), E'\\r','')) AS effective_date_txt\n    FROM \"postgres\".\"raw\".\"pricing_history\"\n),\n\ntyped AS (\n    SELECT\n        \n        CASE WHEN history_id_txt ~ '^\\d+$'  THEN history_id_txt::integer  END AS history_id,\n        CASE WHEN product_id_txt ~ '^\\d+$'  THEN product_id_txt::integer  END AS product_id,\n\n        \n        CASE WHEN price_txt ~ '^-?\\d+(\\.\\d+)?$' THEN price_txt::numeric END AS price,\n\n        \n        CASE\n          WHEN effective_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(effective_date_txt, '-', '/'),'YYYY/FMMM/FMDD')::date\n          ELSE NULL\n        END AS effective_date\n    FROM src\n)\n\nSELECT\n    history_id,\n    product_id,\n    price,\n    effective_date\nFROM typed\nWHERE price IS NOT NULL\n  AND price > 0\n  AND effective_date IS NOT NULL\n  AND effective_date <= CURRENT_DATE", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_purchase_orders": {"database": "postgres", "schema": "silver_staging", "name": "stg_purchase_orders", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_purchase_orders.sql", "original_file_path": "models/staging/stg_purchase_orders.sql", "unique_id": "model.retail_dbt.stg_purchase_orders", "fqn": ["retail_dbt", "staging", "stg_purchase_orders"], "alias": "stg_purchase_orders", "checksum": {"name": "sha256", "checksum": "270dca8d73baf5f3c0aad8d6b7cfcf9518cd3d98dd15c43b2f148ec5a19cacf8"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "purchase_orders"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "purchase_orders"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_purchase_orders.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "purchase_orders"]}, "created_at": 1756221680.4228675, "relation_name": "\"postgres\".\"silver_staging\".\"stg_purchase_orders\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging','purchase_orders']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(order_id AS text))       AS order_id_txt,\n        TRIM(CAST(supplier_id AS text))    AS supplier_id_txt,\n        TRIM(CAST(order_date AS text))     AS order_date_txt,\n        TRIM(CAST(status AS text))         AS status_txt\n    FROM {{ source('raw','purchase_orders') }}\n),\n\ntyped AS (\n    SELECT\n        CASE WHEN order_id_txt ~ '^\\d+$' THEN order_id_txt::int END        AS order_id,\n        CASE WHEN supplier_id_txt ~ '^\\d+$' THEN supplier_id_txt::int END  AS supplier_id,\n\n        CASE\n          WHEN order_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(order_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS order_date,\n\n        NULLIF(NULLIF(lower(status_txt),'na'),'') AS status_clean\n    FROM src\n)\n\nSELECT\n    order_id,\n    supplier_id,\n    order_date,\n    initcap(status_clean) AS status\nFROM typed\nWHERE order_id IS NOT NULL\n  AND supplier_id IS NOT NULL\n  AND order_date IS NOT NULL\n  AND status_clean IS NOT NULL\n  AND order_date <= DATE '2025-08-22'", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "purchase_orders"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.purchase_orders"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_purchase_orders.sql", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(order_id AS text))       AS order_id_txt,\n        TRIM(CAST(supplier_id AS text))    AS supplier_id_txt,\n        TRIM(CAST(order_date AS text))     AS order_date_txt,\n        TRIM(CAST(status AS text))         AS status_txt\n    FROM \"postgres\".\"raw\".\"purchase_orders\"\n),\n\ntyped AS (\n    SELECT\n        CASE WHEN order_id_txt ~ '^\\d+$' THEN order_id_txt::int END        AS order_id,\n        CASE WHEN supplier_id_txt ~ '^\\d+$' THEN supplier_id_txt::int END  AS supplier_id,\n\n        CASE\n          WHEN order_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(order_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS order_date,\n\n        NULLIF(NULLIF(lower(status_txt),'na'),'') AS status_clean\n    FROM src\n)\n\nSELECT\n    order_id,\n    supplier_id,\n    order_date,\n    initcap(status_clean) AS status\nFROM typed\nWHERE order_id IS NOT NULL\n  AND supplier_id IS NOT NULL\n  AND order_date IS NOT NULL\n  AND status_clean IS NOT NULL\n  AND order_date <= DATE '2025-08-22'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_payments": {"database": "postgres", "schema": "silver_staging", "name": "stg_payments", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_payments.sql", "original_file_path": "models/staging/stg_payments.sql", "unique_id": "model.retail_dbt.stg_payments", "fqn": ["retail_dbt", "staging", "stg_payments"], "alias": "stg_payments", "checksum": {"name": "sha256", "checksum": "6d8612171eb42731e3c32a5e4905d1d3642e94aa9e63e7d85584dcbdc04333a3"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "payments"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "payments"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_payments.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "payments"]}, "created_at": 1756221680.4247947, "relation_name": "\"postgres\".\"silver_staging\".\"stg_payments\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging','payments']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(payment_id AS text))                 AS payment_id_txt,\n        TRIM(CAST(method     AS text))                 AS method,\n        TRIM(CAST(status     AS text))                 AS status,\n        TRIM(REPLACE(CAST(paid_at AS text), E'\\r','')) AS paid_at_txt\n    FROM {{ source('raw','payments') }}\n),\n\ntyped AS (\n    SELECT\n        \n        CASE WHEN payment_id_txt ~ '^\\s*\\d+\\s*$' THEN payment_id_txt::integer END AS payment_id,\n        method,\n        status,\n\n        \n        CASE\n          WHEN paid_at_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(paid_at_txt,'-','/'),'YYYY/FMMM/FMDD')\n          ELSE NULL\n        END AS paid_at\n    FROM src\n)\n\nSELECT\n    payment_id,\n    method,\n    status,\n    paid_at\nFROM typed\nWHERE paid_at IS NOT NULL\n  AND paid_at <= to_timestamp('2025/08/22','YYYY/MM/DD')", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.payments"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_payments.sql", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(payment_id AS text))                 AS payment_id_txt,\n        TRIM(CAST(method     AS text))                 AS method,\n        TRIM(CAST(status     AS text))                 AS status,\n        TRIM(REPLACE(CAST(paid_at AS text), E'\\r','')) AS paid_at_txt\n    FROM \"postgres\".\"raw\".\"payments\"\n),\n\ntyped AS (\n    SELECT\n        \n        CASE WHEN payment_id_txt ~ '^\\s*\\d+\\s*$' THEN payment_id_txt::integer END AS payment_id,\n        method,\n        status,\n\n        \n        CASE\n          WHEN paid_at_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(paid_at_txt,'-','/'),'YYYY/FMMM/FMDD')\n          ELSE NULL\n        END AS paid_at\n    FROM src\n)\n\nSELECT\n    payment_id,\n    method,\n    status,\n    paid_at\nFROM typed\nWHERE paid_at IS NOT NULL\n  AND paid_at <= to_timestamp('2025/08/22','YYYY/MM/DD')", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_products": {"database": "postgres", "schema": "silver_staging", "name": "stg_products", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_products.sql", "original_file_path": "models/staging/stg_products.sql", "unique_id": "model.retail_dbt.stg_products", "fqn": ["retail_dbt", "staging", "stg_products"], "alias": "stg_products", "checksum": {"name": "sha256", "checksum": "8984be0aff7cbad971e6b042f734064f224d3649a09ffce6dfcea67f371bf1e1"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "products"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "products"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_products.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "products"]}, "created_at": 1756221680.4267354, "relation_name": "\"postgres\".\"silver_staging\".\"stg_products\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging','products']\n) }}\n\nWITH src AS (\n  SELECT\n    TRIM(CAST(product_id  AS text)) AS product_id_txt,\n    TRIM(CAST(name        AS text)) AS name_txt,\n    TRIM(CAST(category_id AS text)) AS category_id_txt,\n    TRIM(CAST(brand_id    AS text)) AS brand_id_txt,\n    TRIM(CAST(supplier_id AS text)) AS supplier_id_txt,\n    TRIM(CAST(price       AS text)) AS price_txt,\n    TRIM(REPLACE(CAST(created_at AS text), E'\\r','')) AS created_at_txt,\n    -- \ud83d\udc47 lo\u1ea1i \\r,\\n,\\t v\u00e0 collapse space cho season\n    TRIM(REGEXP_REPLACE(REPLACE(CAST(season AS text), E'\\r',''), '\\s+', ' ', 'g')) AS season_txt\n  FROM {{ source('raw','products') }}\n),\n\ntyped AS (\n  SELECT\n    CASE WHEN product_id_txt  ~ '^\\d+$'          THEN product_id_txt::integer  END AS product_id,\n    NULLIF(name_txt,'')                                 AS name,\n    CASE WHEN category_id_txt ~ '^\\d+$'          THEN category_id_txt::integer END AS category_id,\n    CASE WHEN brand_id_txt    ~ '^\\d+$'          THEN brand_id_txt::integer    END AS brand_id,\n    CASE WHEN supplier_id_txt ~ '^\\d+$'          THEN supplier_id_txt::integer END AS supplier_id,\n    CASE WHEN price_txt       ~ '^\\d+(\\.\\d+)?$'  THEN price_txt::numeric       END AS price,\n    CASE\n      WHEN created_at_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n      THEN to_timestamp(replace(created_at_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n    END AS created_at,\n\n    \n    CASE\n      WHEN lower(season_txt) ~ '^spring$'                    THEN 'Spring'\n      WHEN lower(season_txt) ~ '^summer$'                    THEN 'Summer'\n      WHEN lower(season_txt) ~ '^(fall|autumn)$'             THEN 'Fall'\n      WHEN lower(season_txt) ~ '^winter$'                    THEN 'Winter'\n      WHEN lower(season_txt) ~ '^all[ _-]?year$'             THEN 'All Year'\n      ELSE NULL\n    END AS season\n  FROM src\n)\n\nSELECT product_id, name, category_id, brand_id, supplier_id, price, created_at, season\nFROM typed\nWHERE price IS NOT NULL\n  AND created_at IS NOT NULL\n  AND created_at < '2025-08-22'", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "products"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.products"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_products.sql", "compiled": true, "compiled_code": "\n\nWITH src AS (\n  SELECT\n    TRIM(CAST(product_id  AS text)) AS product_id_txt,\n    TRIM(CAST(name        AS text)) AS name_txt,\n    TRIM(CAST(category_id AS text)) AS category_id_txt,\n    TRIM(CAST(brand_id    AS text)) AS brand_id_txt,\n    TRIM(CAST(supplier_id AS text)) AS supplier_id_txt,\n    TRIM(CAST(price       AS text)) AS price_txt,\n    TRIM(REPLACE(CAST(created_at AS text), E'\\r','')) AS created_at_txt,\n    -- \ud83d\udc47 lo\u1ea1i \\r,\\n,\\t v\u00e0 collapse space cho season\n    TRIM(REGEXP_REPLACE(REPLACE(CAST(season AS text), E'\\r',''), '\\s+', ' ', 'g')) AS season_txt\n  FROM \"postgres\".\"raw\".\"products\"\n),\n\ntyped AS (\n  SELECT\n    CASE WHEN product_id_txt  ~ '^\\d+$'          THEN product_id_txt::integer  END AS product_id,\n    NULLIF(name_txt,'')                                 AS name,\n    CASE WHEN category_id_txt ~ '^\\d+$'          THEN category_id_txt::integer END AS category_id,\n    CASE WHEN brand_id_txt    ~ '^\\d+$'          THEN brand_id_txt::integer    END AS brand_id,\n    CASE WHEN supplier_id_txt ~ '^\\d+$'          THEN supplier_id_txt::integer END AS supplier_id,\n    CASE WHEN price_txt       ~ '^\\d+(\\.\\d+)?$'  THEN price_txt::numeric       END AS price,\n    CASE\n      WHEN created_at_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n      THEN to_timestamp(replace(created_at_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n    END AS created_at,\n\n    \n    CASE\n      WHEN lower(season_txt) ~ '^spring$'                    THEN 'Spring'\n      WHEN lower(season_txt) ~ '^summer$'                    THEN 'Summer'\n      WHEN lower(season_txt) ~ '^(fall|autumn)$'             THEN 'Fall'\n      WHEN lower(season_txt) ~ '^winter$'                    THEN 'Winter'\n      WHEN lower(season_txt) ~ '^all[ _-]?year$'             THEN 'All Year'\n      ELSE NULL\n    END AS season\n  FROM src\n)\n\nSELECT product_id, name, category_id, brand_id, supplier_id, price, created_at, season\nFROM typed\nWHERE price IS NOT NULL\n  AND created_at IS NOT NULL\n  AND created_at < '2025-08-22'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_employees": {"database": "postgres", "schema": "silver_staging", "name": "stg_employees", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_employees.sql", "original_file_path": "models/staging/stg_employees.sql", "unique_id": "model.retail_dbt.stg_employees", "fqn": ["retail_dbt", "staging", "stg_employees"], "alias": "stg_employees", "checksum": {"name": "sha256", "checksum": "966bb4b3a2b6b7082375cc178de4417439ce6710fab5cd9abe059d7e50a85962"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "employees"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "employees"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_employees.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "employees"]}, "created_at": 1756221680.428668, "relation_name": "\"postgres\".\"silver_staging\".\"stg_employees\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging','employees']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(employee_id AS text)) AS employee_id_txt,\n        TRIM(CAST(name        AS text)) AS name_txt,\n        TRIM(CAST(role        AS text)) AS role_txt,\n        TRIM(CAST(store_id    AS text)) AS store_id_txt\n    FROM {{ source('raw','employees') }}\n),\n\nfiltered AS (\n    SELECT *\n    FROM src\n    WHERE employee_id_txt IS NOT NULL AND employee_id_txt <> '' AND lower(employee_id_txt) NOT IN ('na','n/a')\n      AND name_txt        IS NOT NULL AND name_txt <> ''        AND lower(name_txt)        NOT IN ('na','n/a')\n      AND role_txt        IS NOT NULL AND role_txt <> ''        AND lower(role_txt)        NOT IN ('na','n/a')\n      AND store_id_txt    IS NOT NULL AND store_id_txt <> ''    AND lower(store_id_txt)    NOT IN ('na','n/a')\n),\n\ntyped AS (\n    SELECT\n        CAST(employee_id_txt AS integer) AS employee_id,\n        name_txt  AS name,\n        role_txt  AS role,\n        CAST(store_id_txt AS integer)    AS store_id\n    FROM filtered\n)\n\nSELECT *\nFROM typed", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "employees"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.employees"]}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_employees.sql", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(employee_id AS text)) AS employee_id_txt,\n        TRIM(CAST(name        AS text)) AS name_txt,\n        TRIM(CAST(role        AS text)) AS role_txt,\n        TRIM(CAST(store_id    AS text)) AS store_id_txt\n    FROM \"postgres\".\"raw\".\"employees\"\n),\n\nfiltered AS (\n    SELECT *\n    FROM src\n    WHERE employee_id_txt IS NOT NULL AND employee_id_txt <> '' AND lower(employee_id_txt) NOT IN ('na','n/a')\n      AND name_txt        IS NOT NULL AND name_txt <> ''        AND lower(name_txt)        NOT IN ('na','n/a')\n      AND role_txt        IS NOT NULL AND role_txt <> ''        AND lower(role_txt)        NOT IN ('na','n/a')\n      AND store_id_txt    IS NOT NULL AND store_id_txt <> ''    AND lower(store_id_txt)    NOT IN ('na','n/a')\n),\n\ntyped AS (\n    SELECT\n        CAST(employee_id_txt AS integer) AS employee_id,\n        name_txt  AS name,\n        role_txt  AS role,\n        CAST(store_id_txt AS integer)    AS store_id\n    FROM filtered\n)\n\nSELECT *\nFROM typed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stg_tax_rules": {"database": "postgres", "schema": "silver_staging", "name": "stg_tax_rules", "resource_type": "model", "package_name": "retail_dbt", "path": "staging/stg_tax_rules.sql", "original_file_path": "models/staging/stg_tax_rules.sql", "unique_id": "model.retail_dbt.stg_tax_rules", "fqn": ["retail_dbt", "staging", "stg_tax_rules"], "alias": "stg_tax_rules", "checksum": {"name": "sha256", "checksum": "cbf2969f8a29d2e36d60f87a39499fb938d689f3d5987e065f1aed0295997688"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["staging", "tax_rules"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["staging", "tax_rules"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/retail_dbt/models/staging/stg_tax_rules.sql", "unrendered_config": {"materialized": "view", "schema": "staging", "tags": ["staging", "tax_rules"]}, "created_at": 1756221680.431021, "relation_name": "\"postgres\".\"silver_staging\".\"stg_tax_rules\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='staging',\n    tags=['staging','tax_rules']\n) }}\n\nWITH src AS (\n    SELECT\n        tax_id::int                                    AS tax_id,\n        product_id::int                                AS product_id,\n        NULLIF(NULLIF(NULLIF(LOWER(TRIM(tax_rate)), 'none'), 'n/a'), '') AS tax_rate_clean,\n        TRIM(region)                                   AS region\n    FROM raw.tax_rules\n),\n\ntyped AS (\n    SELECT\n        tax_id,\n        product_id,\n        CASE\n            WHEN tax_rate_clean ~ '^[0-9]+(\\.[0-9]+)?$'\n                 AND tax_rate_clean::numeric > 0\n            THEN tax_rate_clean::numeric\n        END AS tax_rate,\n        region\n    FROM src\n)\n\nSELECT *\nFROM typed\nWHERE tax_rate IS NOT NULL", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/retail_dbt/models/staging/stg_tax_rules.sql", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        tax_id::int                                    AS tax_id,\n        product_id::int                                AS product_id,\n        NULLIF(NULLIF(NULLIF(LOWER(TRIM(tax_rate)), 'none'), 'n/a'), '') AS tax_rate_clean,\n        TRIM(region)                                   AS region\n    FROM raw.tax_rules\n),\n\ntyped AS (\n    SELECT\n        tax_id,\n        product_id,\n        CASE\n            WHEN tax_rate_clean ~ '^[0-9]+(\\.[0-9]+)?$'\n                 AND tax_rate_clean::numeric > 0\n            THEN tax_rate_clean::numeric\n        END AS tax_rate,\n        region\n    FROM src\n)\n\nSELECT *\nFROM typed\nWHERE tax_rate IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.dim_products_scd": {"database": "postgres", "schema": "silver_to_golden", "name": "dim_products_scd", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/dim_products_scd.sql", "original_file_path": "models/golden/dim_products_scd.sql", "unique_id": "model.retail_dbt.dim_products_scd", "fqn": ["retail_dbt", "golden", "dim_products_scd"], "alias": "dim_products_scd", "checksum": {"name": "sha256", "checksum": "3d0dbc2af9cfcc668b1757f00634a634a9dbf7f6e4821b774fbf90d16b03bc77"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Dimension table for products with SCD tracking", "columns": {"product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_id": {"name": "category_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "brand_id": {"name": "brand_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_id": {"name": "supplier_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price": {"name": "price", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "season": {"name": "season", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_scd_id": {"name": "dbt_scd_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_updated_at": {"name": "dbt_updated_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_sk": {"name": "product_sk", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_from": {"name": "valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_to": {"name": "valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_current": {"name": "is_current", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "to_golden"}, "created_at": 1756221681.129409, "relation_name": "\"postgres\".\"silver_to_golden\".\"dim_products_scd\"", "raw_code": "{{ config(materialized='table', schema='to_golden') }}\nselect\n  *,\n  dbt_scd_id  as product_sk,\n  dbt_valid_from as valid_from,\n  dbt_valid_to   as valid_to,\n  (dbt_valid_to is null) as is_current\nfrom {{ ref('dim_products_snapshot') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.retail_dbt.dim_products_snapshot"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["product_id"], "time_spine": null}, "model.retail_dbt.fct_inventory": {"database": "postgres", "schema": "silver_to_golden", "name": "fct_inventory", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/fct_inventory.sql", "original_file_path": "models/golden/fct_inventory.sql", "unique_id": "model.retail_dbt.fct_inventory", "fqn": ["retail_dbt", "golden", "fct_inventory"], "alias": "fct_inventory", "checksum": {"name": "sha256", "checksum": "956d988f2ba36d64d28199f57a863dd2ece1ebdbffc6efcef4724af9453381fe"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Fact table for inventory levels", "columns": {"inventory_id": {"name": "inventory_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_updated": {"name": "last_updated", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_name": {"name": "store_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_updated_year": {"name": "last_updated_year", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_updated_month": {"name": "last_updated_month", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "last_updated_day": {"name": "last_updated_day", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"schema": "to_golden", "materialized": "table"}, "created_at": 1756221681.1373107, "relation_name": "\"postgres\".\"silver_to_golden\".\"fct_inventory\"", "raw_code": "{{ config(\n    schema='to_golden',\n    materialized='table'\n) }}\n\nwith inventory_gold as (\n    select\n        i.inventory_id,\n        i.store_id,\n        i.product_id,\n        i.quantity,\n        i.last_updated,\n        p.name as product_name,\n        sto.name as store_name,\n        date_part('year', i.last_updated) as last_updated_year,\n        date_part('month', i.last_updated) as last_updated_month,\n        date_part('day', i.last_updated) as last_updated_day\n    from {{ ref('inventory_silver') }} i\n    left join {{ ref('products_silver') }} p on i.product_id = p.product_id\n    left join {{ ref('stores_silver') }} sto on i.store_id = sto.store_id\n    where i.inventory_id is not null\n        and i.store_id is not null\n        and i.product_id is not null\n        and i.quantity is not null\n        and i.last_updated is not null\n        and p.name is not null and p.name != 'N/A'\n        and sto.name is not null and sto.name != 'N/A'\n)\n\nselect * from inventory_gold", "doc_blocks": [], "language": "sql", "refs": [{"name": "inventory_silver", "package": null, "version": null}, {"name": "products_silver", "package": null, "version": null}, {"name": "stores_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.inventory_silver", "model.retail_dbt.products_silver", "model.retail_dbt.stores_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["inventory_id"], "time_spine": null}, "model.retail_dbt.dim_categories_scd": {"database": "postgres", "schema": "silver_to_golden", "name": "dim_categories_scd", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/dim_categories_scd.sql", "original_file_path": "models/golden/dim_categories_scd.sql", "unique_id": "model.retail_dbt.dim_categories_scd", "fqn": ["retail_dbt", "golden", "dim_categories_scd"], "alias": "dim_categories_scd", "checksum": {"name": "sha256", "checksum": "26aff687d896217be16c3a7f53e54e06261b76b17688e987ee750059b3f9bcca"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Dimension table for categories with SCD tracking", "columns": {"category_id": {"name": "category_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "staged_at": {"name": "staged_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_scd_id": {"name": "dbt_scd_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_updated_at": {"name": "dbt_updated_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_sk": {"name": "category_sk", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_from": {"name": "valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_to": {"name": "valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_current": {"name": "is_current", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "to_golden"}, "created_at": 1756221681.1237094, "relation_name": "\"postgres\".\"silver_to_golden\".\"dim_categories_scd\"", "raw_code": "{{ config(materialized='table', schema='to_golden') }}\nselect\n  *,\n  dbt_scd_id  as category_sk,\n  dbt_valid_from as valid_from,\n  dbt_valid_to   as valid_to,\n  (dbt_valid_to is null) as is_current\nfrom {{ ref('dim_categories_snapshot') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_categories_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.retail_dbt.dim_categories_snapshot"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["category_id"], "time_spine": null}, "model.retail_dbt.dim_discount_rules": {"database": "postgres", "schema": "silver_to_golden", "name": "dim_discount_rules", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/dim_discount_rules.sql", "original_file_path": "models/golden/dim_discount_rules.sql", "unique_id": "model.retail_dbt.dim_discount_rules", "fqn": ["retail_dbt", "golden", "dim_discount_rules"], "alias": "dim_discount_rules", "checksum": {"name": "sha256", "checksum": "f559d814f6bd22c1eee7558fe688702d45b8deb50ca7885f1fd84b56d43a1bd6"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Dimension table for discount rules", "columns": {"rule_id": {"name": "rule_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "discount_type": {"name": "discount_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "value": {"name": "value", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_from": {"name": "valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_to": {"name": "valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "to_golden"}, "created_at": 1756221681.1256058, "relation_name": "\"postgres\".\"silver_to_golden\".\"dim_discount_rules\"", "raw_code": "{{ config(materialized='table', schema='to_golden') }}\nselect * from {{ ref('discount_rules_silver') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "discount_rules_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.discount_rules_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["rule_id"], "time_spine": null}, "model.retail_dbt.dim_promotions_scd": {"database": "postgres", "schema": "silver_to_golden", "name": "dim_promotions_scd", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/dim_promotions_scd.sql", "original_file_path": "models/golden/dim_promotions_scd.sql", "unique_id": "model.retail_dbt.dim_promotions_scd", "fqn": ["retail_dbt", "golden", "dim_promotions_scd"], "alias": "dim_promotions_scd", "checksum": {"name": "sha256", "checksum": "6a29fed1bc34e68e3cb12d024ee97973c9bb8b802155a264c3ff0bf1a1084fe4"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Dimension table for promotions with SCD tracking", "columns": {"promotion_id": {"name": "promotion_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_date": {"name": "start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "end_date": {"name": "end_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_scd_id": {"name": "dbt_scd_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_updated_at": {"name": "dbt_updated_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "promotion_sk": {"name": "promotion_sk", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_from": {"name": "valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_to": {"name": "valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_current": {"name": "is_current", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "to_golden"}, "created_at": 1756221681.1306906, "relation_name": "\"postgres\".\"silver_to_golden\".\"dim_promotions_scd\"", "raw_code": "{{ config(materialized='table', schema='to_golden') }}\nselect\n  *,\n  dbt_scd_id  as promotion_sk,\n  dbt_valid_from as valid_from,\n  dbt_valid_to   as valid_to,\n  (dbt_valid_to is null) as is_current\nfrom {{ ref('dim_promotions_snapshot') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_promotions_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.retail_dbt.dim_promotions_snapshot"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["promotion_id"], "time_spine": null}, "model.retail_dbt.fct_store_visits": {"database": "postgres", "schema": "silver_to_golden", "name": "fct_store_visits", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/fct_store_visits.sql", "original_file_path": "models/golden/fct_store_visits.sql", "unique_id": "model.retail_dbt.fct_store_visits", "fqn": ["retail_dbt", "golden", "fct_store_visits"], "alias": "fct_store_visits", "checksum": {"name": "sha256", "checksum": "f13237836cba73001d5af720b101f7cbd41a8bc61b37840874d6943396bd29bd"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Fact table for store visits", "columns": {"visit_id": {"name": "visit_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "visit_date": {"name": "visit_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_name": {"name": "customer_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_name": {"name": "store_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "visit_year": {"name": "visit_year", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "visit_month": {"name": "visit_month", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "visit_day": {"name": "visit_day", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"schema": "to_golden", "materialized": "table"}, "created_at": 1756221681.1509826, "relation_name": "\"postgres\".\"silver_to_golden\".\"fct_store_visits\"", "raw_code": "{{ config(\n    schema='to_golden',\n    materialized='table'\n) }}\n\nwith store_visits_gold as (\n    select\n        sv.visit_id,\n        sv.customer_id,\n        sv.store_id,\n        sv.visit_date,\n        c.name as customer_name,\n        sto.name as store_name,\n        date_part('year', sv.visit_date) as visit_year,\n        date_part('month', sv.visit_date) as visit_month,\n        date_part('day', sv.visit_date) as visit_day\n    from {{ ref('store_visits_silver') }} sv\n    left join {{ ref('customers_silver') }} c on sv.customer_id = c.customer_id\n    left join {{ ref('stores_silver') }} sto on sv.store_id = sto.store_id\n)\n\nselect * from store_visits_gold", "doc_blocks": [], "language": "sql", "refs": [{"name": "store_visits_silver", "package": null, "version": null}, {"name": "customers_silver", "package": null, "version": null}, {"name": "stores_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.store_visits_silver", "model.retail_dbt.customers_silver", "model.retail_dbt.stores_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["visit_id"], "time_spine": null}, "model.retail_dbt.dim_customers_scd": {"database": "postgres", "schema": "silver_to_golden", "name": "dim_customers_scd", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/dim_customers_scd.sql", "original_file_path": "models/golden/dim_customers_scd.sql", "unique_id": "model.retail_dbt.dim_customers_scd", "fqn": ["retail_dbt", "golden", "dim_customers_scd"], "alias": "dim_customers_scd", "checksum": {"name": "sha256", "checksum": "46eb4907b23c67126c31750baf926467c7b96cbace9a26d6bfc0eb8aafb03d9b"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Dimension table for customers with SCD tracking", "columns": {"customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "email": {"name": "email", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "phone": {"name": "phone", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loyalty_program_id": {"name": "loyalty_program_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "created_at": {"name": "created_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_scd_id": {"name": "dbt_scd_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_updated_at": {"name": "dbt_updated_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_sk": {"name": "customer_sk", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_from": {"name": "valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_to": {"name": "valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_current": {"name": "is_current", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "to_golden"}, "created_at": 1756221681.1249487, "relation_name": "\"postgres\".\"silver_to_golden\".\"dim_customers_scd\"", "raw_code": "{{ config(materialized='table', schema='to_golden') }}\nselect\n  *,\n  dbt_scd_id  as customer_sk,\n  dbt_valid_from as valid_from,\n  dbt_valid_to   as valid_to,\n  (dbt_valid_to is null) as is_current\nfrom {{ ref('dim_customers_snapshot') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.retail_dbt.dim_customers_snapshot"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_id"], "time_spine": null}, "model.retail_dbt.dim_suppliers_scd": {"database": "postgres", "schema": "silver_to_golden", "name": "dim_suppliers_scd", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/dim_suppliers_scd.sql", "original_file_path": "models/golden/dim_suppliers_scd.sql", "unique_id": "model.retail_dbt.dim_suppliers_scd", "fqn": ["retail_dbt", "golden", "dim_suppliers_scd"], "alias": "dim_suppliers_scd", "checksum": {"name": "sha256", "checksum": "80e08195d746c68c4b24c56642d94d473813d59e1817b2c0eea5668d1b5a9cac"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Dimension table for suppliers with SCD tracking", "columns": {"supplier_id": {"name": "supplier_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "contact_info": {"name": "contact_info", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_scd_id": {"name": "dbt_scd_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_updated_at": {"name": "dbt_updated_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_sk": {"name": "supplier_sk", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_from": {"name": "valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_to": {"name": "valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_current": {"name": "is_current", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "to_golden"}, "created_at": 1756221681.132937, "relation_name": "\"postgres\".\"silver_to_golden\".\"dim_suppliers_scd\"", "raw_code": "{{ config(materialized='table', schema='to_golden') }}\nselect\n  *,\n  dbt_scd_id  as supplier_sk,\n  dbt_valid_from as valid_from,\n  dbt_valid_to   as valid_to,\n  (dbt_valid_to is null) as is_current\nfrom {{ ref('dim_suppliers_snapshot') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_suppliers_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.retail_dbt.dim_suppliers_snapshot"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["supplier_id"], "time_spine": null}, "model.retail_dbt.dim_campaigns": {"database": "postgres", "schema": "silver_to_golden", "name": "dim_campaigns", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/dim_campaigns.sql", "original_file_path": "models/golden/dim_campaigns.sql", "unique_id": "model.retail_dbt.dim_campaigns", "fqn": ["retail_dbt", "golden", "dim_campaigns"], "alias": "dim_campaigns", "checksum": {"name": "sha256", "checksum": "c8f0f39dbd09d8049cb84cd131300d67a6153ee1fed2cc311950019529e1cec3"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Dimension table for campaigns", "columns": {"campaign_id": {"name": "campaign_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "budget": {"name": "budget", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "start_date": {"name": "start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "end_date": {"name": "end_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "staged_at": {"name": "staged_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "to_golden"}, "created_at": 1756221681.1224189, "relation_name": "\"postgres\".\"silver_to_golden\".\"dim_campaigns\"", "raw_code": "{{ config(materialized='table', schema='to_golden') }}\nselect * from {{ ref('campaigns_silver') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "campaigns_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.campaigns_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["campaign_id"], "time_spine": null}, "model.retail_dbt.fct_purchase_orders": {"database": "postgres", "schema": "silver_to_golden", "name": "fct_purchase_orders", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/fct_purchase_orders.sql", "original_file_path": "models/golden/fct_purchase_orders.sql", "unique_id": "model.retail_dbt.fct_purchase_orders", "fqn": ["retail_dbt", "golden", "fct_purchase_orders"], "alias": "fct_purchase_orders", "checksum": {"name": "sha256", "checksum": "2608c8323ebab9e6b5a9f0cf9d14f7c69c1760f6fa9bacda48b5edaaeae5e69f"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Fact table for purchase orders", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_id": {"name": "supplier_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_date": {"name": "order_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_name": {"name": "supplier_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_year": {"name": "order_year", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_month": {"name": "order_month", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_day": {"name": "order_day", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"schema": "to_golden", "materialized": "table"}, "created_at": 1756221681.1401308, "relation_name": "\"postgres\".\"silver_to_golden\".\"fct_purchase_orders\"", "raw_code": "{{ config(\n    schema='to_golden',\n    materialized='table'\n) }}\n\nwith purchase_orders_gold as (\n    select\n        po.order_id,\n        po.supplier_id,\n        po.order_date,\n        po.status,\n        s.name as supplier_name,\n        date_part('year', po.order_date) as order_year,\n        date_part('month', po.order_date) as order_month,\n        date_part('day', po.order_date) as order_day\n    from {{ ref('purchase_orders_silver') }} po\n    left join {{ ref('suppliers_silver') }} s on po.supplier_id = s.supplier_id\n    where po.order_id is not null\n        and po.supplier_id is not null\n        and po.order_date is not null\n        and po.status is not null and po.status != 'N/A'\n        and s.name is not null and s.name != 'N/A'\n)\n\nselect * from purchase_orders_gold", "doc_blocks": [], "language": "sql", "refs": [{"name": "purchase_orders_silver", "package": null, "version": null}, {"name": "suppliers_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.purchase_orders_silver", "model.retail_dbt.suppliers_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["order_id"], "time_spine": null}, "model.retail_dbt.fct_payments": {"database": "postgres", "schema": "silver_to_golden", "name": "fct_payments", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/fct_payments.sql", "original_file_path": "models/golden/fct_payments.sql", "unique_id": "model.retail_dbt.fct_payments", "fqn": ["retail_dbt", "golden", "fct_payments"], "alias": "fct_payments", "checksum": {"name": "sha256", "checksum": "43f47be225f59c7faafd938abaed3247e7c4b65990132912a77a8000d7b6e692"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "to_golden", "materialized": "table"}, "created_at": 1756221680.454901, "relation_name": "\"postgres\".\"silver_to_golden\".\"fct_payments\"", "raw_code": "{{ config(\n    schema='to_golden',\n    materialized='table'\n) }}\n\nwith payments_gold as (\n    select\n        p.payment_id,\n        p.method,\n        p.status,\n        p.paid_at,\n        st.transaction_id,\n        st.customer_id,\n        st.store_id,\n        st.employee_id,\n        c.name as customer_name,\n        sto.name as store_name,\n        e.name as employee_name,\n        date_part('year', p.paid_at) as paid_year,\n        date_part('month', p.paid_at) as paid_month,\n        date_part('day', p.paid_at) as paid_day\n    from {{ ref('payments_silver') }} p\n    left join {{ ref('sales_transactions_silver') }} st on p.payment_id = st.payment_id\n    left join {{ ref('customers_silver') }} c on st.customer_id = c.customer_id\n    left join {{ ref('stores_silver') }} sto on st.store_id = sto.store_id\n    left join {{ ref('employees_silver') }} e on st.employee_id = e.employee_id\n    where p.payment_id is null\n        or p.method is null or p.method = 'N/A'\n        or p.status is null or p.status = 'N/A'\n        or p.paid_at is null\n        or st.transaction_id is null\n        or st.customer_id is null\n        or st.store_id is null\n        or st.employee_id is null\n        or c.name is null or c.name = 'N/A'\n        or sto.name is null or sto.name = 'N/A'\n        or e.name is null or e.name = 'N/A'\n)\n\nselect * from payments_gold", "doc_blocks": [], "language": "sql", "refs": [{"name": "payments_silver", "package": null, "version": null}, {"name": "sales_transactions_silver", "package": null, "version": null}, {"name": "customers_silver", "package": null, "version": null}, {"name": "stores_silver", "package": null, "version": null}, {"name": "employees_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.payments_silver", "model.retail_dbt.sales_transactions_silver", "model.retail_dbt.customers_silver", "model.retail_dbt.stores_silver", "model.retail_dbt.employees_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.dim_loyalty_programs_scd": {"database": "postgres", "schema": "silver_to_golden", "name": "dim_loyalty_programs_scd", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/dim_loyalty_programs_scd.sql", "original_file_path": "models/golden/dim_loyalty_programs_scd.sql", "unique_id": "model.retail_dbt.dim_loyalty_programs_scd", "fqn": ["retail_dbt", "golden", "dim_loyalty_programs_scd"], "alias": "dim_loyalty_programs_scd", "checksum": {"name": "sha256", "checksum": "c89a501936f20cca70835688a43b7714f80daecfa2f143157d94ead82c74b16f"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Dimension table for loyalty programs with SCD tracking", "columns": {"loyalty_program_id": {"name": "loyalty_program_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "points_per_dollar": {"name": "points_per_dollar", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_scd_id": {"name": "dbt_scd_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_updated_at": {"name": "dbt_updated_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "loyalty_program_sk": {"name": "loyalty_program_sk", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_from": {"name": "valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_to": {"name": "valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_current": {"name": "is_current", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "to_golden"}, "created_at": 1756221681.1280146, "relation_name": "\"postgres\".\"silver_to_golden\".\"dim_loyalty_programs_scd\"", "raw_code": "{{ config(materialized='table', schema='to_golden') }}\nselect\n  *,\n  dbt_scd_id  as loyalty_program_sk,\n  dbt_valid_from as valid_from,\n  dbt_valid_to   as valid_to,\n  (dbt_valid_to is null) as is_current\nfrom {{ ref('dim_loyalty_programs_snapshot') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_loyalty_programs_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.retail_dbt.dim_loyalty_programs_snapshot"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["loyalty_program_id"], "time_spine": null}, "model.retail_dbt.dim_tax_rules": {"database": "postgres", "schema": "silver_to_golden", "name": "dim_tax_rules", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/dim_tax_rules.sql", "original_file_path": "models/golden/dim_tax_rules.sql", "unique_id": "model.retail_dbt.dim_tax_rules", "fqn": ["retail_dbt", "golden", "dim_tax_rules"], "alias": "dim_tax_rules", "checksum": {"name": "sha256", "checksum": "aa90e2e64452253ce6d4d39e24f35b1dfb064e620053b0d28b5cac946bcdbf95"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Dimension table for tax rules", "columns": {"tax_id": {"name": "tax_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tax_rate": {"name": "tax_rate", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "region": {"name": "region", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "to_golden"}, "created_at": 1756221681.1334815, "relation_name": "\"postgres\".\"silver_to_golden\".\"dim_tax_rules\"", "raw_code": "{{ config(materialized='table', schema='to_golden') }}\nselect * from {{ ref('tax_rules_silver') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "tax_rules_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.tax_rules_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["tax_id"], "time_spine": null}, "model.retail_dbt.fct_pricing_history": {"database": "postgres", "schema": "silver_to_golden", "name": "fct_pricing_history", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/fct_pricing_history.sql", "original_file_path": "models/golden/fct_pricing_history.sql", "unique_id": "model.retail_dbt.fct_pricing_history", "fqn": ["retail_dbt", "golden", "fct_pricing_history"], "alias": "fct_pricing_history", "checksum": {"name": "sha256", "checksum": "71b4a94d11991f68ded05a08627d1bc5116f1064d691bdf122cecf8192688d63"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Fact table for pricing history", "columns": {"history_id": {"name": "history_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price": {"name": "price", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "effective_date": {"name": "effective_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "effective_year": {"name": "effective_year", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "effective_month": {"name": "effective_month", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"schema": "to_golden", "materialized": "table"}, "created_at": 1756221681.13849, "relation_name": "\"postgres\".\"silver_to_golden\".\"fct_pricing_history\"", "raw_code": "{{ config(\n    schema='to_golden',\n    materialized='table'\n) }}\n\nwith pricing_history_gold as (\n    select\n        ph.history_id,\n        ph.product_id,\n        ph.price,\n        ph.effective_date,\n        p.name as product_name,\n        c.name as category_name,\n        b.name as brand_name,\n        s.name as supplier_name,\n        date_part('year', ph.effective_date) as effective_year,\n        date_part('month', ph.effective_date) as effective_month\n    from {{ ref('pricing_history_silver') }} ph\n    left join {{ ref('products_silver') }} p on ph.product_id = p.product_id\n    left join {{ ref('categories_silver') }} c on p.category_id = c.category_id\n    left join {{ ref('brands_silver') }} b on p.brand_id = b.brand_id\n    left join {{ ref('suppliers_silver') }} s on p.supplier_id = s.supplier_id\n    where ph.history_id is not null\n        and ph.product_id is not null\n        and ph.price is not null\n        and ph.effective_date is not null\n        and p.name is not null and p.name != 'N/A'\n        and c.name is not null and c.name != 'N/A'\n        and b.name is not null and b.name != 'N/A'\n        and s.name is not null and s.name != 'N/A'\n)\n\nselect * from pricing_history_gold", "doc_blocks": [], "language": "sql", "refs": [{"name": "pricing_history_silver", "package": null, "version": null}, {"name": "products_silver", "package": null, "version": null}, {"name": "categories_silver", "package": null, "version": null}, {"name": "brands_silver", "package": null, "version": null}, {"name": "suppliers_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.pricing_history_silver", "model.retail_dbt.products_silver", "model.retail_dbt.categories_silver", "model.retail_dbt.brands_silver", "model.retail_dbt.suppliers_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["history_id"], "time_spine": null}, "model.retail_dbt.fct_sales_items": {"database": "postgres", "schema": "silver_to_golden", "name": "fct_sales_items", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/fct_sales_items.sql", "original_file_path": "models/golden/fct_sales_items.sql", "unique_id": "model.retail_dbt.fct_sales_items", "fqn": ["retail_dbt", "golden", "fct_sales_items"], "alias": "fct_sales_items", "checksum": {"name": "sha256", "checksum": "c65ead7fb55b4f2f99214f51177ac0887a0f5d015110daec882dd98b8946c0d3"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Fact table for sales items", "columns": {"item_id": {"name": "item_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_id": {"name": "transaction_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit_price": {"name": "unit_price", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "discount": {"name": "discount", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "tax": {"name": "tax", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "gross_amount": {"name": "gross_amount", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "net_amount": {"name": "net_amount", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "business_validation_flag": {"name": "business_validation_flag", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category_name": {"name": "category_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_name": {"name": "store_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_year": {"name": "transaction_year", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_month": {"name": "transaction_month", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"schema": "to_golden", "materialized": "table"}, "created_at": 1756221681.1438737, "relation_name": "\"postgres\".\"silver_to_golden\".\"fct_sales_items\"", "raw_code": "{{ config(\n    schema='to_golden',\n    materialized='table'\n) }}\n\nwith sales_items_gold as (\n    select\n        si.item_id,\n        si.transaction_id,\n        si.product_id,\n        si.quantity,\n        si.unit_price,\n        si.discount,\n        si.tax,\n        si.gross_amount,\n        si.net_amount,\n        si.business_validation_flag,\n        p.name as product_name,\n        c.name as category_name,\n        st.customer_id,\n        sto.name as store_name,\n        date_part('year', st.transaction_date) as transaction_year,\n        date_part('month', st.transaction_date) as transaction_month\n    from {{ ref('sales_items_silver') }} si\n    left join {{ ref('products_silver') }} p on si.product_id = p.product_id\n    left join {{ ref('categories_silver') }} c on p.category_id = c.category_id\n    left join {{ ref('sales_transactions_silver') }} st on si.transaction_id = st.transaction_id\n    left join {{ ref('stores_silver') }} sto on st.store_id = sto.store_id\n    where si.item_id is not null\n        and si.transaction_id is not null\n        and si.product_id is not null\n        and si.quantity is not null\n        and si.unit_price is not null\n        and si.discount is not null\n        and si.tax is not null\n        and si.gross_amount is not null\n        and si.net_amount is not null\n        and si.business_validation_flag is not null and si.business_validation_flag != 'N/A'\n        and p.name is not null and p.name != 'N/A'\n        and c.name is not null and c.name != 'N/A'\n        and st.customer_id is not null\n        and sto.name is not null and sto.name != 'N/A'\n)\n\nselect * from sales_items_gold", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_items_silver", "package": null, "version": null}, {"name": "products_silver", "package": null, "version": null}, {"name": "categories_silver", "package": null, "version": null}, {"name": "sales_transactions_silver", "package": null, "version": null}, {"name": "stores_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.sales_items_silver", "model.retail_dbt.products_silver", "model.retail_dbt.categories_silver", "model.retail_dbt.sales_transactions_silver", "model.retail_dbt.stores_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["item_id"], "time_spine": null}, "model.retail_dbt.fct_stock_movements": {"database": "postgres", "schema": "silver_to_golden", "name": "fct_stock_movements", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/fct_stock_movements.sql", "original_file_path": "models/golden/fct_stock_movements.sql", "unique_id": "model.retail_dbt.fct_stock_movements", "fqn": ["retail_dbt", "golden", "fct_stock_movements"], "alias": "fct_stock_movements", "checksum": {"name": "sha256", "checksum": "601ac618c452175963135cabbe4fbf01c9b493e4ecaf587b6160172651f79ba8"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Fact table for stock movements", "columns": {"movement_id": {"name": "movement_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "movement_type": {"name": "movement_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "quantity": {"name": "quantity", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "movement_date": {"name": "movement_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_name": {"name": "store_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "movement_year": {"name": "movement_year", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "movement_month": {"name": "movement_month", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"schema": "to_golden", "materialized": "table"}, "created_at": 1756221681.1493967, "relation_name": "\"postgres\".\"silver_to_golden\".\"fct_stock_movements\"", "raw_code": "{{ config(\n    schema='to_golden',\n    materialized='table'\n) }}\n\nwith stock_movements_gold as (\n    select\n        sm.movement_id,\n        sm.product_id,\n        sm.store_id,\n        sm.movement_type,\n        sm.quantity,\n        sm.movement_date,\n        p.name as product_name,\n        sto.name as store_name,\n        date_part('year', sm.movement_date) as movement_year,\n        date_part('month', sm.movement_date) as movement_month\n    from {{ ref('stock_movements_silver') }} sm\n    left join {{ ref('products_silver') }} p on sm.product_id = p.product_id\n    left join {{ ref('stores_silver') }} sto on sm.store_id = sto.store_id\n    where sm.movement_id is not null\n        and sm.product_id is not null\n        and sm.store_id is not null\n        and sm.movement_type is not null and sm.movement_type != 'N/A'\n        and sm.quantity is not null\n        and sm.movement_date is not null\n        and p.name is not null and p.name != 'N/A'\n        and sto.name is not null and sto.name != 'N/A'\n)\n\nselect * from stock_movements_gold", "doc_blocks": [], "language": "sql", "refs": [{"name": "stock_movements_silver", "package": null, "version": null}, {"name": "products_silver", "package": null, "version": null}, {"name": "stores_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stock_movements_silver", "model.retail_dbt.products_silver", "model.retail_dbt.stores_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["movement_id"], "time_spine": null}, "model.retail_dbt.dim_brands_scd": {"database": "postgres", "schema": "silver_to_golden", "name": "dim_brands_scd", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/dim_brands_scd.sql", "original_file_path": "models/golden/dim_brands_scd.sql", "unique_id": "model.retail_dbt.dim_brands_scd", "fqn": ["retail_dbt", "golden", "dim_brands_scd"], "alias": "dim_brands_scd", "checksum": {"name": "sha256", "checksum": "dbddc32251b79a05db77eddb70be116200f0fe1fbe98f671497b8da41c94b523"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Dimension table for brands with SCD tracking", "columns": {"brand_id": {"name": "brand_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "staged_at": {"name": "staged_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_scd_id": {"name": "dbt_scd_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_updated_at": {"name": "dbt_updated_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "brand_sk": {"name": "brand_sk", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_from": {"name": "valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_to": {"name": "valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_current": {"name": "is_current", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "to_golden"}, "created_at": 1756221681.1217053, "relation_name": "\"postgres\".\"silver_to_golden\".\"dim_brands_scd\"", "raw_code": "{{ config(materialized='table', schema='to_golden') }}\nselect\n  *,\n  dbt_scd_id  as brand_sk,\n  dbt_valid_from as valid_from,\n  dbt_valid_to   as valid_to,\n  (dbt_valid_to is null) as is_current\nfrom {{ ref('dim_brands_snapshot') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_brands_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.retail_dbt.dim_brands_snapshot"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["brand_id"], "time_spine": null}, "model.retail_dbt.fct_shipments": {"database": "postgres", "schema": "silver_to_golden", "name": "fct_shipments", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/fct_shipments.sql", "original_file_path": "models/golden/fct_shipments.sql", "unique_id": "model.retail_dbt.fct_shipments", "fqn": ["retail_dbt", "golden", "fct_shipments"], "alias": "fct_shipments", "checksum": {"name": "sha256", "checksum": "e765f9e610279e15b5e27105d9daf59628721b57d2778d8be3f3b40142cac84e"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Fact table for shipments", "columns": {"shipment_id": {"name": "shipment_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipped_date": {"name": "shipped_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "received_date": {"name": "received_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_id": {"name": "supplier_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "supplier_name": {"name": "supplier_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_name": {"name": "store_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipped_year": {"name": "shipped_year", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipped_month": {"name": "shipped_month", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipped_day": {"name": "shipped_day", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "received_year": {"name": "received_year", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "received_month": {"name": "received_month", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "received_day": {"name": "received_day", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "shipment_duration_days": {"name": "shipment_duration_days", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"schema": "to_golden", "materialized": "table"}, "created_at": 1756221681.1481154, "relation_name": "\"postgres\".\"silver_to_golden\".\"fct_shipments\"", "raw_code": "{{ config(\n    schema='to_golden',\n    materialized='table'\n) }}\n\nwith shipments_gold as (\n    select\n        sh.shipment_id,\n        sh.order_id,\n        sh.store_id,\n        sh.shipped_date,\n        sh.received_date,\n        po.supplier_id,\n        s.name as supplier_name,\n        sto.name as store_name,\n        date_part('year', sh.shipped_date) as shipped_year,\n        date_part('month', sh.shipped_date) as shipped_month,\n        date_part('day', sh.shipped_date) as shipped_day,\n        date_part('year', sh.received_date) as received_year,\n        date_part('month', sh.received_date) as received_month,\n        date_part('day', sh.received_date) as received_day,\n        EXTRACT(EPOCH FROM (sh.received_date - sh.shipped_date)) / 86400 as shipment_duration_days\n    from {{ ref('shipments_silver') }} sh\n    left join {{ ref('purchase_orders_silver') }} po on sh.order_id = po.order_id\n    left join {{ ref('suppliers_silver') }} s on po.supplier_id = s.supplier_id\n    left join {{ ref('stores_silver') }} sto on sh.store_id = sto.store_id\n    where sh.shipment_id is not null\n        and sh.order_id is not null\n        and sh.store_id is not null\n        and sh.shipped_date is not null\n        and sh.received_date is not null\n        and po.supplier_id is not null\n        and s.name is not null and s.name != 'N/A'\n        and sto.name is not null and sto.name != 'N/A'\n)\n\nselect * from shipments_gold", "doc_blocks": [], "language": "sql", "refs": [{"name": "shipments_silver", "package": null, "version": null}, {"name": "purchase_orders_silver", "package": null, "version": null}, {"name": "suppliers_silver", "package": null, "version": null}, {"name": "stores_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.shipments_silver", "model.retail_dbt.purchase_orders_silver", "model.retail_dbt.suppliers_silver", "model.retail_dbt.stores_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["shipment_id"], "time_spine": null}, "model.retail_dbt.fct_returns": {"database": "postgres", "schema": "silver_to_golden", "name": "fct_returns", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/fct_returns.sql", "original_file_path": "models/golden/fct_returns.sql", "unique_id": "model.retail_dbt.fct_returns", "fqn": ["retail_dbt", "golden", "fct_returns"], "alias": "fct_returns", "checksum": {"name": "sha256", "checksum": "648da5f3ba2a32e9cf435fd7d7a66bf4894002e16142bde9a40e71c7d749e4c9"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Fact table for returns", "columns": {"return_id": {"name": "return_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "item_id": {"name": "item_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "reason": {"name": "reason", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "return_date": {"name": "return_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "returned_quantity": {"name": "returned_quantity", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_name": {"name": "store_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "return_year": {"name": "return_year", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "return_month": {"name": "return_month", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "return_day": {"name": "return_day", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"schema": "to_golden", "materialized": "table"}, "created_at": 1756221681.1420288, "relation_name": "\"postgres\".\"silver_to_golden\".\"fct_returns\"", "raw_code": "{{ config(\n    schema='to_golden',\n    materialized='table'\n) }}\n\nwith returns_gold as (\n    select\n        r.return_id,\n        r.item_id,\n        r.reason,\n        r.return_date,\n        si.product_id,\n        si.quantity as returned_quantity,\n        p.name as product_name,\n        st.customer_id,\n        sto.name as store_name,\n        date_part('year', r.return_date) as return_year,\n        date_part('month', r.return_date) as return_month,\n        date_part('day', r.return_date) as return_day\n    from {{ ref('returns_silver') }} r\n    left join {{ ref('sales_items_silver') }} si on r.item_id = si.item_id\n    left join {{ ref('sales_transactions_silver') }} st on si.transaction_id = st.transaction_id\n    left join {{ ref('products_silver') }} p on si.product_id = p.product_id\n    left join {{ ref('stores_silver') }} sto on st.store_id = sto.store_id\n    where r.return_id is not null\n        and r.item_id is not null\n        and r.reason is not null and r.reason != 'N/A'\n        and r.return_date is not null\n        and si.product_id is not null\n        and si.quantity is not null\n        and p.name is not null and p.name != 'N/A'\n        and st.customer_id is not null\n        and sto.name is not null and sto.name != 'N/A'\n)\n\nselect * from returns_gold", "doc_blocks": [], "language": "sql", "refs": [{"name": "returns_silver", "package": null, "version": null}, {"name": "sales_items_silver", "package": null, "version": null}, {"name": "sales_transactions_silver", "package": null, "version": null}, {"name": "products_silver", "package": null, "version": null}, {"name": "stores_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.returns_silver", "model.retail_dbt.sales_items_silver", "model.retail_dbt.sales_transactions_silver", "model.retail_dbt.products_silver", "model.retail_dbt.stores_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["return_id"], "time_spine": null}, "model.retail_dbt.dim_stores_scd": {"database": "postgres", "schema": "silver_to_golden", "name": "dim_stores_scd", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/dim_stores_scd.sql", "original_file_path": "models/golden/dim_stores_scd.sql", "unique_id": "model.retail_dbt.dim_stores_scd", "fqn": ["retail_dbt", "golden", "dim_stores_scd"], "alias": "dim_stores_scd", "checksum": {"name": "sha256", "checksum": "ecde4b6353a1fcce5393a4c3417ea8ae5ceb031273a153a229778f5079730602"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Dimension table for stores with SCD tracking", "columns": {"store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "location": {"name": "location", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "manager_id": {"name": "manager_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_scd_id": {"name": "dbt_scd_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_updated_at": {"name": "dbt_updated_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_sk": {"name": "store_sk", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_from": {"name": "valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_to": {"name": "valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_current": {"name": "is_current", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "to_golden"}, "created_at": 1756221681.1318297, "relation_name": "\"postgres\".\"silver_to_golden\".\"dim_stores_scd\"", "raw_code": "{{ config(materialized='table', schema='to_golden') }}\nselect\n  *,\n  dbt_scd_id  as store_sk,\n  dbt_valid_from as valid_from,\n  dbt_valid_to   as valid_to,\n  (dbt_valid_to is null) as is_current\nfrom {{ ref('dim_stores_snapshot') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_stores_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.retail_dbt.dim_stores_snapshot"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["store_id"], "time_spine": null}, "model.retail_dbt.dim_employees_scd": {"database": "postgres", "schema": "silver_to_golden", "name": "dim_employees_scd", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/dim_employees_scd.sql", "original_file_path": "models/golden/dim_employees_scd.sql", "unique_id": "model.retail_dbt.dim_employees_scd", "fqn": ["retail_dbt", "golden", "dim_employees_scd"], "alias": "dim_employees_scd", "checksum": {"name": "sha256", "checksum": "3dabc3b7e92cd0abc83bcf98dec08f5a62bc789f7d21365912accab8d5dcd8b8"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Dimension table for employees with SCD tracking", "columns": {"employee_id": {"name": "employee_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "role": {"name": "role", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_scd_id": {"name": "dbt_scd_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_updated_at": {"name": "dbt_updated_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_sk": {"name": "employee_sk", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_from": {"name": "valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "valid_to": {"name": "valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "is_current": {"name": "is_current", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "schema": "to_golden"}, "created_at": 1756221681.1267498, "relation_name": "\"postgres\".\"silver_to_golden\".\"dim_employees_scd\"", "raw_code": "{{ config(materialized='table', schema='to_golden') }}\nselect\n  *,\n  dbt_scd_id  as employee_sk,\n  dbt_valid_from as valid_from,\n  dbt_valid_to   as valid_to,\n  (dbt_valid_to is null) as is_current\nfrom {{ ref('dim_employees_snapshot') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_employees_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.retail_dbt.dim_employees_snapshot"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["employee_id"], "time_spine": null}, "model.retail_dbt.fct_sales_transactions": {"database": "postgres", "schema": "silver_to_golden", "name": "fct_sales_transactions", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/fct_sales_transactions.sql", "original_file_path": "models/golden/fct_sales_transactions.sql", "unique_id": "model.retail_dbt.fct_sales_transactions", "fqn": ["retail_dbt", "golden", "fct_sales_transactions"], "alias": "fct_sales_transactions", "checksum": {"name": "sha256", "checksum": "25a4c471fc32153066b582c4a75af2a7b35a2af49366a2cb77ae0f49120d4a16"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Fact table for sales transactions", "columns": {"transaction_id": {"name": "transaction_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_id": {"name": "employee_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_date": {"name": "transaction_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "total_amount": {"name": "total_amount", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "payment_id": {"name": "payment_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_name": {"name": "customer_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_name": {"name": "store_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "employee_name": {"name": "employee_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "payment_method": {"name": "payment_method", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_year": {"name": "transaction_year", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_month": {"name": "transaction_month", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "transaction_day": {"name": "transaction_day", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"schema": "to_golden", "materialized": "table"}, "created_at": 1756221681.1454632, "relation_name": "\"postgres\".\"silver_to_golden\".\"fct_sales_transactions\"", "raw_code": "{{ config(\n    schema='to_golden',\n    materialized='table'\n) }}\n\nwith sales_transactions_gold as (\n    select\n        st.transaction_id,\n        st.customer_id,\n        st.store_id,\n        st.employee_id,\n        st.transaction_date,\n        st.total_amount,\n        st.payment_id,\n        c.name as customer_name,\n        sto.name as store_name,\n        e.name as employee_name,\n        pay.method as payment_method,\n        date_part('year', st.transaction_date) as transaction_year,\n        date_part('month', st.transaction_date) as transaction_month,\n        date_part('day', st.transaction_date) as transaction_day\n    from {{ ref('sales_transactions_silver') }} st\n    left join {{ ref('customers_silver') }} c on st.customer_id = c.customer_id\n    left join {{ ref('stores_silver') }} sto on st.store_id = sto.store_id\n    left join {{ ref('employees_silver') }} e on st.employee_id = e.employee_id\n    left join {{ ref('payments_silver') }} pay on st.payment_id = pay.payment_id\n    where st.transaction_id is not null\n        and st.customer_id is not null\n        and st.store_id is not null\n        and st.employee_id is not null\n        and st.transaction_date is not null\n        and st.total_amount is not null\n        and st.payment_id is not null\n        and c.name is not null and c.name != 'N/A'\n        and sto.name is not null and sto.name != 'N/A'\n        and e.name is not null and e.name != 'N/A'\n        and pay.method is not null and pay.method != 'N/A'\n)\n\nselect * from sales_transactions_gold", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_transactions_silver", "package": null, "version": null}, {"name": "customers_silver", "package": null, "version": null}, {"name": "stores_silver", "package": null, "version": null}, {"name": "employees_silver", "package": null, "version": null}, {"name": "payments_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.sales_transactions_silver", "model.retail_dbt.customers_silver", "model.retail_dbt.stores_silver", "model.retail_dbt.employees_silver", "model.retail_dbt.payments_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["transaction_id"], "time_spine": null}, "model.retail_dbt.fct_customer_feedback": {"database": "postgres", "schema": "silver_to_golden", "name": "fct_customer_feedback", "resource_type": "model", "package_name": "retail_dbt", "path": "golden/fct_customer_feedback.sql", "original_file_path": "models/golden/fct_customer_feedback.sql", "unique_id": "model.retail_dbt.fct_customer_feedback", "fqn": ["retail_dbt", "golden", "fct_customer_feedback"], "alias": "fct_customer_feedback", "checksum": {"name": "sha256", "checksum": "fc0d5e008d96016e3b1338d2f9a3a4da4e25bf90b3f3d5441c251792e02a81f3"}, "config": {"enabled": true, "alias": null, "schema": "to_golden", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Fact table for customer feedback", "columns": {"feedback_id": {"name": "feedback_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_id": {"name": "store_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "rating": {"name": "rating", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "comments": {"name": "comments", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "feedback_date": {"name": "feedback_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_name": {"name": "customer_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "store_name": {"name": "store_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "feedback_year": {"name": "feedback_year", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "feedback_month": {"name": "feedback_month", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "feedback_day": {"name": "feedback_day", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "retail_dbt://models/golden/schema.yml", "build_path": null, "unrendered_config": {"schema": "to_golden", "materialized": "table"}, "created_at": 1756221681.1358263, "relation_name": "\"postgres\".\"silver_to_golden\".\"fct_customer_feedback\"", "raw_code": "{{ config(\n    schema='to_golden',\n    materialized='table'\n) }}\n\nwith customer_feedback_gold as (\n    select\n        cf.feedback_id,\n        cf.customer_id,\n        cf.store_id,\n        cf.product_id,\n        cf.rating,\n        cf.comments,\n        cf.feedback_date,\n        c.name as customer_name,\n        sto.name as store_name,\n        p.name as product_name,\n        date_part('year', cf.feedback_date) as feedback_year,\n        date_part('month', cf.feedback_date) as feedback_month,\n        date_part('day', cf.feedback_date) as feedback_day\n    from {{ ref('customer_feedback_silver') }} cf\n    left join {{ ref('customers_silver') }} c on cf.customer_id = c.customer_id\n    left join {{ ref('stores_silver') }} sto on cf.store_id = sto.store_id\n    left join {{ ref('products_silver') }} p on cf.product_id = p.product_id\n    where cf.feedback_id is not null\n        and cf.customer_id is not null\n        and cf.store_id is not null\n        and cf.product_id is not null\n        and cf.rating is not null\n        and cf.comments is not null and cf.comments != 'N/A'\n        and cf.feedback_date is not null\n        and c.name is not null and c.name != 'N/A'\n        and sto.name is not null and sto.name != 'N/A'\n        and p.name is not null and p.name != 'N/A'\n)\n\nselect * from customer_feedback_gold", "doc_blocks": [], "language": "sql", "refs": [{"name": "customer_feedback_silver", "package": null, "version": null}, {"name": "customers_silver", "package": null, "version": null}, {"name": "stores_silver", "package": null, "version": null}, {"name": "products_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.customer_feedback_silver", "model.retail_dbt.customers_silver", "model.retail_dbt.stores_silver", "model.retail_dbt.products_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["feedback_id"], "time_spine": null}, "model.retail_dbt.products_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "products_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/products_invalid.sql", "original_file_path": "models/invalid/products_invalid.sql", "unique_id": "model.retail_dbt.products_invalid", "fqn": ["retail_dbt", "invalid", "products_invalid"], "alias": "products_invalid", "checksum": {"name": "sha256", "checksum": "ad98a76a6bbac23a3c7d8b41df8effc76f463c114b51dc5fc46aa7e1070034d7"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": ["invalid", "products"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["invalid", "products"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid", "tags": ["invalid", "products"]}, "created_at": 1756221680.4898353, "relation_name": "\"postgres\".\"silver_invalid\".\"products_invalid\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='invalid',\n    tags=['invalid','products']\n) }}\n\n-- 1) Raw -> text s\u1ea1ch\nWITH src AS (\n    SELECT\n        TRIM(CAST(product_id  AS text)) AS product_id_txt,\n        TRIM(CAST(name        AS text)) AS name_txt,\n        TRIM(CAST(category_id AS text)) AS category_id_txt,\n        TRIM(CAST(brand_id    AS text)) AS brand_id_txt,\n        TRIM(CAST(supplier_id AS text)) AS supplier_id_txt,\n        TRIM(CAST(price       AS text)) AS price_txt,\n        TRIM(REPLACE(CAST(created_at AS text), E'\\r','')) AS created_at_txt,\n        -- l\u00e0m s\u1ea1ch season: b\u1ecf \\r, gom space\n        TRIM(REGEXP_REPLACE(REPLACE(CAST(season AS text), E'\\r',''), '\\s+', ' ', 'g')) AS season_txt\n    FROM {{ source('raw','products') }}\n),\n\n-- 2) Parse/cast \u0111\u1ec3 ki\u1ec3m tra\ntyped AS (\n    SELECT\n        src.*,\n        CASE WHEN product_id_txt  ~ '^\\d+$'         THEN product_id_txt::integer  END AS product_id_val,\n        CASE WHEN category_id_txt ~ '^\\d+$'         THEN category_id_txt::integer END AS category_id_val,\n        CASE WHEN brand_id_txt    ~ '^\\d+$'         THEN brand_id_txt::integer    END AS brand_id_val,\n        CASE WHEN supplier_id_txt ~ '^\\d+$'         THEN supplier_id_txt::integer END AS supplier_id_val,\n        CASE WHEN price_txt       ~ '^\\d+(\\.\\d+)?$' THEN price_txt::numeric       END AS price_val,\n        CASE\n          WHEN created_at_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(created_at_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS created_at_val,\n\n        -- chu\u1ea9n ho\u00e1 & map season linh ho\u1ea1t\n        lower(season_txt) AS season_low,\n        CASE\n          WHEN lower(season_txt) ~ '^spring$'                    THEN 'Spring'\n          WHEN lower(season_txt) ~ '^summer$'                    THEN 'Summer'\n          WHEN lower(season_txt) ~ '^(fall|autumn)$'             THEN 'Fall'\n          WHEN lower(season_txt) ~ '^winter$'                    THEN 'Winter'\n          WHEN lower(season_txt) ~ '^all[ _-]?year$'             THEN 'All Year'\n          ELSE NULL\n        END AS season_norm\n    FROM src\n),\n\n-- 3) C\u1edd NA/r\u1ed7ng\nna_flags AS (\n    SELECT\n        *,\n        (product_id_txt  IS NULL OR product_id_txt  = '' OR lower(product_id_txt)  IN ('na','n/a')) AS na_product_id,\n        (name_txt        IS NULL OR name_txt        = '' OR lower(name_txt)        IN ('na','n/a')) AS na_name,\n        (category_id_txt IS NULL OR category_id_txt = '' OR lower(category_id_txt) IN ('na','n/a')) AS na_category_id,\n        (brand_id_txt    IS NULL OR brand_id_txt    = '' OR lower(brand_id_txt)    IN ('na','n/a')) AS na_brand_id,\n        (supplier_id_txt IS NULL OR supplier_id_txt = '' OR lower(supplier_id_txt) IN ('na','n/a')) AS na_supplier_id,\n        (price_txt       IS NULL OR price_txt       = '' OR lower(price_txt)       IN ('na','n/a')) AS na_price,\n        (created_at_txt  IS NULL OR created_at_txt  = '' OR lower(created_at_txt)  IN ('na','n/a')) AS na_created_at,\n        (season_txt      IS NULL OR season_txt      = '' OR lower(season_txt)      IN ('na','n/a')) AS na_season\n    FROM typed\n),\n\n-- 4) C\u1edd invalid theo rule staging (price NOT NULL; created_at < 2025-08-22; season h\u1ee3p l\u1ec7)\nflags AS (\n    SELECT\n        *,\n        (product_id_val  IS NULL OR product_id_val  <= 0) AS f_product_id_bad,\n        (name_txt IS NULL OR name_txt='')                 AS f_name_bad,\n        (category_id_val IS NULL OR category_id_val <= 0) AS f_category_id_bad,\n        (brand_id_val    IS NULL OR brand_id_val    <= 0) AS f_brand_id_bad,\n        (supplier_id_val IS NULL OR supplier_id_val <= 0) AS f_supplier_id_bad,\n\n        (price_val IS NULL)                                AS f_price_null,\n        (price_val IS NOT NULL AND price_val <= 0)         AS f_price_nonpositive,\n\n        (created_at_val IS NULL)                           AS f_created_at_null_or_badfmt,\n        (created_at_val IS NOT NULL AND created_at_val >= DATE '2025-08-22') AS f_created_at_on_or_after_cutoff,\n\n        -- season: d\u00f9ng season_norm \u0111\u00e3 chu\u1ea9n ho\u00e1; ch\u1ec9 bad khi c\u00f3 gi\u00e1 tr\u1ecb nh\u01b0ng kh\u00f4ng map \u0111\u01b0\u1ee3c\n        (season_norm IS NULL AND NOT na_season)            AS f_season_bad\n    FROM na_flags\n),\n\n-- 5) G\u1ed9p l\u00fd do\nreasons AS (\n    SELECT\n        *,\n        array_remove(ARRAY[\n            CASE WHEN na_product_id  THEN 'product_id missing/NA' END,\n            CASE WHEN na_name        THEN 'name missing/NA' END,\n            CASE WHEN na_category_id THEN 'category_id missing/NA' END,\n            CASE WHEN na_brand_id    THEN 'brand_id missing/NA' END,\n            CASE WHEN na_supplier_id THEN 'supplier_id missing/NA' END,\n            CASE WHEN na_price       THEN 'price missing/NA' END,\n            CASE WHEN na_created_at  THEN 'created_at missing/NA' END,\n            CASE WHEN na_season      THEN 'season missing/NA' END,\n\n            CASE WHEN NOT na_product_id  AND f_product_id_bad        THEN 'product_id not positive integer' END,\n            CASE WHEN NOT na_name        AND f_name_bad              THEN 'name empty' END,\n            CASE WHEN NOT na_category_id AND f_category_id_bad       THEN 'category_id not positive integer' END,\n            CASE WHEN NOT na_brand_id    AND f_brand_id_bad          THEN 'brand_id not positive integer' END,\n            CASE WHEN NOT na_supplier_id AND f_supplier_id_bad       THEN 'supplier_id not positive integer' END,\n            CASE WHEN NOT na_price       AND f_price_null            THEN 'price is NULL' END,\n            CASE WHEN NOT na_price       AND f_price_nonpositive     THEN 'price <= 0' END,\n            CASE WHEN NOT na_created_at  AND f_created_at_null_or_badfmt THEN 'created_at invalid format' END,\n            CASE WHEN f_created_at_on_or_after_cutoff               THEN 'created_at >= 2025-08-22' END,\n            CASE WHEN f_season_bad                                   THEN 'season not in {Spring,Summer,Fall,Winter,All Year}' END\n        ], NULL) AS reason_arr\n    FROM flags\n)\n\n-- 6) K\u1ebft qu\u1ea3 invalid\nSELECT\n    product_id_txt  AS product_id,\n    name_txt        AS name,\n    category_id_txt AS category_id,\n    brand_id_txt    AS brand_id,\n    supplier_id_txt AS supplier_id,\n    price_txt       AS price,\n    created_at_txt  AS created_at,\n    season_txt      AS season,\n    array_to_string(reason_arr, '; ') AS invalid_reason\nFROM reasons\nWHERE cardinality(reason_arr) > 0", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "products"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.products"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.loyalty_programs_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "loyalty_programs_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/loyalty_programs_invalid.sql", "original_file_path": "models/invalid/loyalty_programs_invalid.sql", "unique_id": "model.retail_dbt.loyalty_programs_invalid", "fqn": ["retail_dbt", "invalid", "loyalty_programs_invalid"], "alias": "loyalty_programs_invalid", "checksum": {"name": "sha256", "checksum": "4c3ef5138711c3fe1375bbcd73a590eb14c32c828e3d42f1f336806f0a1f4487"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "schema": "invalid"}, "created_at": 1756221680.4916732, "relation_name": "\"postgres\".\"silver_invalid\".\"loyalty_programs_invalid\"", "raw_code": "{{ config(\n    materialized='table',\n    schema='invalid'\n) }}\n\nwith source as (\n    select * from {{ ref('stg_loyalty_programs') }}\n),\ninvalid as (\n    select\n        loyalty_program_id,\n        name,\n        points_per_dollar,\n        case \n            when loyalty_program_id is null then 'loyalty_program_id_null'\n            when points_per_dollar is null then 'points_per_dollar_null'\n            when points_per_dollar::text !~ '^[0-9]+$' then 'points_per_dollar_not_numeric'\n        end as invalid_reason\n    from source\n    where \n        loyalty_program_id is null\n        or points_per_dollar is null\n        or points_per_dollar::text !~ '^[0-9]+$'\n)\n\nselect * from invalid", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_loyalty_programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stg_loyalty_programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.inventory_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "inventory_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/inventory_invalid.sql", "original_file_path": "models/invalid/inventory_invalid.sql", "unique_id": "model.retail_dbt.inventory_invalid", "fqn": ["retail_dbt", "invalid", "inventory_invalid"], "alias": "inventory_invalid", "checksum": {"name": "sha256", "checksum": "cef9a7b34ca8a65c072525f721e3be786cfa8bb1872ff0c72b631b8cd1e044b6"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid"}, "created_at": 1756221680.4939294, "relation_name": "\"postgres\".\"silver_invalid\".\"inventory_invalid\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='invalid'\n) }}\n\nwith source as (\n    select * \n    from {{ source('raw', 'inventory') }}\n),\n\nevaluated as (\n    select\n        inventory_id,\n        store_id,\n        product_id,\n        quantity,\n        last_updated,\n\n        -- rule checks\n        case \n            when inventory_id is null or trim(lower(inventory_id)) in ('', 'null', 'na', 'n/a', 'none') \n            then 'invalid_inventory_id'\n        end as invalid_inventory_id,\n\n        case \n            when store_id is null or trim(lower(store_id)) in ('', 'null', 'na', 'n/a', 'none') \n            then 'invalid_store_id'\n        end as invalid_store_id,\n\n        case \n            when product_id is null or trim(lower(product_id)) in ('', 'null', 'na', 'n/a', 'none') \n            then 'invalid_product_id'\n        end as invalid_product_id,\n\n        case \n            when quantity is null or trim(lower(quantity)) in ('', 'null', 'na', 'n/a', 'none') \n                 or cast(quantity as integer) = 0\n            then 'invalid_quantity'\n        end as invalid_quantity,\n\n        case \n            when last_updated is null or trim(lower(last_updated)) in ('', 'null', 'na', 'n/a', 'none') \n            then 'invalid_last_updated_null'\n            when cast(last_updated as date) > date('2025-08-22') \n            then 'invalid_last_updated_future'\n        end as invalid_last_updated\n    from source\n),\n\ninvalids as (\n    select *\n    from evaluated\n    where invalid_inventory_id is not null\n       or invalid_store_id is not null\n       or invalid_product_id is not null\n       or invalid_quantity is not null\n       or invalid_last_updated is not null\n)\n\nselect * from invalids", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "inventory"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.inventory"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.shipments_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "shipments_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/shipments_invalid.sql", "original_file_path": "models/invalid/shipments_invalid.sql", "unique_id": "model.retail_dbt.shipments_invalid", "fqn": ["retail_dbt", "invalid", "shipments_invalid"], "alias": "shipments_invalid", "checksum": {"name": "sha256", "checksum": "3cc40ed5e1a40af532a3c03a93ede4a8bd9d9cd84c49b2b2355703a90e765bf7"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid"}, "created_at": 1756221680.4959645, "relation_name": "\"postgres\".\"silver_invalid\".\"shipments_invalid\"", "raw_code": "{{ config(materialized='view', schema='invalid') }}\n\nwith source_data as (\n    select * from {{ source('raw', 'shipments') }}\n),\n\nfinal as (\n    select\n        cast(shipment_id as int) as shipment_id,\n        cast(order_id as int) as order_id,\n        cast(store_id as int) as store_id,\n        case\n            when shipped_date is null or shipped_date = 'N/A' or shipped_date > '2025-08-22 00:00:00' then null\n            else cast(shipped_date as timestamp)\n        end as shipped_date,\n        case\n            when received_date is null or received_date = 'N/A' or received_date > '2025-08-22 00:00:00' then null\n            else cast(received_date as timestamp)\n        end as received_date,\n        case\n            when shipment_id is null or shipment_id = 'N/A' then 'invalid_shipment_id'\n            when order_id is null or order_id = 'N/A' then 'invalid_order_id'\n            when store_id is null or store_id = 'N/A' then 'invalid_store_id'\n            when case\n                when shipped_date is null or shipped_date = 'N/A' or shipped_date > '2025-08-22 00:00:00' then null\n                else cast(shipped_date as timestamp)\n            end is null then 'invalid_shipped_date'\n            when case\n                when received_date is null or received_date = 'N/A' or received_date > '2025-08-22 00:00:00' then null\n                else cast(received_date as timestamp)\n            end is null then 'invalid_received_date'\n            when shipped_date >= received_date then 'shipped_date_not_before_received_date'\n            else 'valid'\n        end as invalid_reason\n    from source_data\n    where not (\n        shipment_id is not null\n        and order_id is not null\n        and store_id is not null\n        and case\n            when shipped_date is null or shipped_date = 'N/A' or shipped_date > '2025-08-22 00:00:00' then null\n            else cast(shipped_date as timestamp)\n        end is not null\n        and case\n            when received_date is null or received_date = 'N/A' or received_date > '2025-08-22 00:00:00' then null\n            else cast(received_date as timestamp)\n        end is not null\n        and case\n            when shipped_date is null or shipped_date = 'N/A' or shipped_date > '2025-08-22 00:00:00' then null\n            else cast(shipped_date as timestamp)\n        end < case\n            when received_date is null or received_date = 'N/A' or received_date > '2025-08-22 00:00:00' then null\n            else cast(received_date as timestamp)\n        end\n        and shipment_id != 'N/A'\n        and order_id != 'N/A'\n        and store_id != 'N/A'\n        and shipped_date != 'N/A'\n        and received_date != 'N/A'\n    )\n)\n\nselect * from final", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "shipments"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.sales_items_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "sales_items_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/sales_items_invalid.sql", "original_file_path": "models/invalid/sales_items_invalid.sql", "unique_id": "model.retail_dbt.sales_items_invalid", "fqn": ["retail_dbt", "invalid", "sales_items_invalid"], "alias": "sales_items_invalid", "checksum": {"name": "sha256", "checksum": "ece3450ff14ea658b2de47aeb84ad4d53f63cd364cc30024c4d5f5fcdef45ebc"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid"}, "created_at": 1756221680.497894, "relation_name": "\"postgres\".\"silver_invalid\".\"sales_items_invalid\"", "raw_code": "{{ config(materialized='view', schema='invalid') }}\n\nwith source_data as (\n    select * from {{ source('raw','sales_items') }}\n),\n\nfinal as (\n    select\n        -- Primary key casting\n        cast(item_id as int) as item_id,\n        cast(transaction_id as int) as transaction_id,\n        cast(product_id as int) as product_id,\n        \n        -- Quantity casting\n        cast(quantity as int) as quantity,\n        \n        -- Price and monetary fields casting\n        cast(unit_price as decimal(10,2)) as unit_price,\n        cast(discount as decimal(10,2)) as discount,\n        cast(tax as decimal(10,2)) as tax,\n        \n        -- Calculated fields\n        cast(unit_price as decimal(10,2)) * cast(quantity as int) as gross_amount,\n        (cast(unit_price as decimal(10,2)) * cast(quantity as int)) - \n         cast(discount as decimal(10,2)) + \n         cast(tax as decimal(10,2)) as net_amount,\n        \n        -- Business logic validation flags\n        case \n            when cast(quantity as int) > 0 and cast(unit_price as decimal(10,2)) < 0 then 'invalid_positive_qty_negative_price'\n            when cast(discount as decimal(10,2)) > cast(unit_price as decimal(10,2)) * cast(quantity as int) then 'discount_exceeds_gross'\n            when cast(discount as decimal(10,2)) < 0 then 'negative_discount'\n            when cast(tax as decimal(10,2)) < 0 then 'negative_tax'\n            when cast(quantity as int) < 0 then 'negative_quantity'\n            else 'valid'\n        end as business_validation_flag\n        \n    from source_data\n    \n    -- Keep only invalid records\n    where not (\n        item_id is not null\n        and transaction_id is not null  \n        and product_id is not null\n        and quantity is not null\n        and unit_price is not null\n        and discount is not null\n        and tax is not null\n        -- Business rules\n        and cast(quantity as int) >= 0\n        and cast(discount as decimal(10,2)) >= 0\n        and cast(tax as decimal(10,2)) >= 0\n        and cast(discount as decimal(10,2)) <= cast(unit_price as decimal(10,2)) * cast(quantity as int)\n        and not (cast(quantity as int) > 0 and cast(unit_price as decimal(10,2)) < 0)\n    )\n)\n\nselect * from final", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "sales_items"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.promotions_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "promotions_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/promotions_invalid.sql", "original_file_path": "models/invalid/promotions_invalid.sql", "unique_id": "model.retail_dbt.promotions_invalid", "fqn": ["retail_dbt", "invalid", "promotions_invalid"], "alias": "promotions_invalid", "checksum": {"name": "sha256", "checksum": "6f21a8ea592d1d8dc3b7326e807bfe9d4460004f65846abc75d4c2e03951e8f5"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": ["invalid", "promotions"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["invalid", "promotions"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid", "tags": ["invalid", "promotions"]}, "created_at": 1756221680.4999328, "relation_name": "\"postgres\".\"silver_invalid\".\"promotions_invalid\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='invalid',\n    tags=['invalid','promotions']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(promotion_id AS text))                       AS promotion_id_txt,\n        TRIM(CAST(name AS text))                               AS name_txt,\n        TRIM(REPLACE(CAST(start_date AS text), E'\\r',''))      AS start_date_txt,\n        TRIM(REPLACE(CAST(end_date   AS text), E'\\r',''))      AS end_date_txt\n    FROM {{ source('raw','promotions') }}\n),\n\ntyped AS (\n    SELECT\n        src.*,\n        CASE WHEN promotion_id_txt ~ '^\\d+$' THEN promotion_id_txt::int END AS promotion_id,\n        NULLIF(NULLIF(lower(name_txt),'na'),'') AS name_clean,\n        CASE\n          WHEN start_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(start_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS start_date,\n        CASE\n          WHEN end_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(end_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS end_date\n    FROM src\n),\n\nflags AS (\n    SELECT\n        *,\n        (promotion_id IS NULL) AS f_bad_id,\n        (name_clean IS NULL)   AS f_bad_name,\n        (start_date IS NULL)   AS f_bad_start,\n        (end_date   IS NULL)   AS f_bad_end,\n        (start_date IS NOT NULL AND end_date IS NOT NULL AND start_date >= end_date) AS f_bad_order\n    FROM typed\n),\n\nreasons AS (\n    SELECT\n        *,\n        array_remove(ARRAY[\n            CASE WHEN f_bad_id    THEN 'invalid promotion_id' END,\n            CASE WHEN f_bad_name  THEN 'name missing/NA' END,\n            CASE WHEN f_bad_start THEN 'invalid start_date' END,\n            CASE WHEN f_bad_end   THEN 'invalid end_date' END,\n            CASE WHEN f_bad_order THEN 'start_date >= end_date' END\n        ], NULL) AS reason_arr\n    FROM flags\n)\n\nSELECT\n    promotion_id_txt AS promotion_id,\n    name_txt         AS name,\n    start_date_txt   AS start_date,\n    end_date_txt     AS end_date,\n    array_to_string(reason_arr,'; ') AS invalid_reason\nFROM reasons\nWHERE cardinality(reason_arr) > 0", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "promotions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.promotions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.campaign_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "campaign_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/campaign_invalid.sql", "original_file_path": "models/invalid/campaign_invalid.sql", "unique_id": "model.retail_dbt.campaign_invalid", "fqn": ["retail_dbt", "invalid", "campaign_invalid"], "alias": "campaign_invalid", "checksum": {"name": "sha256", "checksum": "c3fa0762dd901c183519896d2581944d83f652cd47f61145c34abd5353b29c56"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid"}, "created_at": 1756221680.5022683, "relation_name": "\"postgres\".\"silver_invalid\".\"campaign_invalid\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='invalid'\n) }}\n\n{%- set cutoff_date = '2025-08-22' -%}\n\nwith source as (\n    select * from {{ source('raw', 'campaigns') }}\n),\n\ncleaned as (\n    select\n        campaign_id::text        as campaign_id_raw,\n        name::text               as name_raw,\n        budget::text             as budget_raw,\n        start_date::text         as start_date_raw,\n        end_date::text           as end_date_raw,\n\n        \n        case \n            when campaign_id is null or trim(campaign_id::text) = '' then null\n            when lower(trim(campaign_id::text)) in ('null','na','n/a','none') then null\n            else trim(campaign_id::text)\n        end as campaign_id,\n\n        case \n            when name is null or trim(name::text) = '' then null\n            when lower(trim(name::text)) in ('null','na','n/a','none') then null\n            else trim(name::text)\n        end as name,\n\n        case\n            when budget is null then null\n            when trim(budget::text) = '' then null\n            when lower(trim(budget::text)) in ('null','na','n/a','none') then null\n            else nullif(regexp_replace(trim(budget::text), '[^0-9.\\-]', '', 'g'), '')\n        end as budget_str,\n\n        case when start_date is null then null else regexp_replace(trim(start_date::text), '[./]', '-', 'g') end as start_norm,\n        case when end_date   is null then null else regexp_replace(trim(end_date::text),   '[./]', '-', 'g') end   as end_norm\n    from source\n),\n\n\nparsed as (\n    select\n        *,\n        case\n            when start_norm ~ '^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])(\\s.*)?$'\n                then to_date(split_part(start_norm, ' ', 1), 'YYYY-MM-DD')\n            when start_norm ~ '^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(start_norm, ' ', 1), 'DD-MM-YYYY')\n            when start_norm ~ '^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(start_norm, ' ', 1), 'MM-DD-YYYY')\n            else null\n        end as start_date_parsed,\n\n        case\n            when end_norm ~ '^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])(\\s.*)?$'\n                then to_date(split_part(end_norm, ' ', 1), 'YYYY-MM-DD')\n            when end_norm ~ '^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(end_norm, ' ', 1), 'DD-MM-YYYY')\n            when end_norm ~ '^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(end_norm, ' ', 1), 'MM-DD-YYYY')\n            else null\n        end as end_date_parsed,\n\n        case when budget_str ~ '^-?\\d+(\\.\\d+)?$' then budget_str::numeric else null end as budget_num\n    from cleaned\n),\n\n\nflagged as (\n    select\n        *,\n        \n        (budget_str is null or not (budget_str ~ '^-?\\d+(\\.\\d+)?$'))                as f_budget_invalid,\n\n        \n        (start_norm is not null and start_date_parsed is null)                      as f_start_bad_format,\n        (end_norm   is not null and end_date_parsed   is null)                      as f_end_bad_format,\n        (start_norm is null)                                                        as f_start_missing,\n        (end_norm   is null)                                                        as f_end_missing,\n\n        \n        (start_date_parsed is not null and end_date_parsed is not null \n            and start_date_parsed >= end_date_parsed)                               as f_order_invalid,\n\n        (start_date_parsed is not null and start_date_parsed >= date '{{ cutoff_date }}') as f_start_ge_cutoff,\n        (end_date_parsed   is not null and end_date_parsed   >= date '{{ cutoff_date }}') as f_end_ge_cutoff\n    from parsed\n),\n\n\nreasons as (\n    select\n        *,\n        array_remove(\n            array[\n                case when f_budget_invalid  then 'budget_invalid_or_not_numeric' end,\n                case when f_start_missing   then 'start_date_missing' end,\n                case when f_end_missing     then 'end_date_missing' end,\n                case when f_start_bad_format then 'start_date_unparseable' end,\n                case when f_end_bad_format   then 'end_date_unparseable' end,\n                case when f_order_invalid    then 'start_date_not_less_than_end_date' end,\n                case when f_start_ge_cutoff  then 'start_date_on_or_after_2025-08-22' end,\n                case when f_end_ge_cutoff    then 'end_date_on_or_after_2025-08-22' end\n            ],\n            null\n        ) as invalid_reasons_array\n    from flagged\n),\n\n\ninvalid_rows as (\n    select *\n    from reasons\n    where cardinality(invalid_reasons_array) > 0\n)\n\nselect\n    \n    campaign_id_raw,\n    name_raw,\n    budget_raw,\n    start_date_raw,\n    end_date_raw,\n    campaign_id,\n    name,\n    budget_str,\n    budget_num,\n    start_norm,\n    end_norm,\n    start_date_parsed as start_date,\n    end_date_parsed   as end_date, \n    invalid_reasons_array                                  as invalid_reasons,\n    array_to_string(invalid_reasons_array, '; ')           as invalid_reason_text\nfrom invalid_rows", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "campaigns"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.campaigns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.tax_rules_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "tax_rules_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/tax_rules_invalid.sql", "original_file_path": "models/invalid/tax_rules_invalid.sql", "unique_id": "model.retail_dbt.tax_rules_invalid", "fqn": ["retail_dbt", "invalid", "tax_rules_invalid"], "alias": "tax_rules_invalid", "checksum": {"name": "sha256", "checksum": "7216a7b5a9c0bd4d91aa14fa97a62e0bd6783eea8c85411a05bfb4757b84307e"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": ["invalid", "tax_rules"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["invalid", "tax_rules"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid", "tags": ["invalid", "tax_rules"]}, "created_at": 1756221680.507021, "relation_name": "\"postgres\".\"silver_invalid\".\"tax_rules_invalid\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='invalid',\n    tags=['invalid','tax_rules']\n) }}\n\nWITH src AS (\n    SELECT\n        tax_id::int                                    AS tax_id,\n        product_id::int                                AS product_id,\n        TRIM(LOWER(tax_rate))                          AS tax_rate_raw,\n        TRIM(region)                                   AS region\n    FROM raw.tax_rules\n),\n\ninvalid AS (\n    SELECT\n        tax_id,\n        product_id,\n        tax_rate_raw,\n        region,\n        CASE\n            WHEN tax_rate_raw IS NULL OR tax_rate_raw = '' THEN 'tax_rate_null_or_blank'\n            WHEN tax_rate_raw IN ('none','n/a') THEN 'tax_rate_invalid_string'\n            WHEN tax_rate_raw ~ '^[0-9]+(\\.[0-9]+)?$' AND tax_rate_raw::numeric = 0 THEN 'tax_rate_zero'\n            ELSE 'tax_rate_unknown_format'\n        END AS invalid_reason\n    FROM src\n    WHERE \n        tax_rate_raw IS NULL\n        OR tax_rate_raw = ''\n        OR tax_rate_raw IN ('none','n/a')\n        OR (tax_rate_raw ~ '^[0-9]+(\\.[0-9]+)?$' AND tax_rate_raw::numeric = 0)\n        OR tax_rate_raw !~ '^[0-9]+(\\.[0-9]+)?$'\n)\n\nSELECT *\nFROM invalid", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.employees_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "employees_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/employees_invalid.sql", "original_file_path": "models/invalid/employees_invalid.sql", "unique_id": "model.retail_dbt.employees_invalid", "fqn": ["retail_dbt", "invalid", "employees_invalid"], "alias": "employees_invalid", "checksum": {"name": "sha256", "checksum": "8f57568959057bd63563d48931962527196c4641442d272185d8b82fdc5d73e0"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": ["invalid", "employees"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["invalid", "employees"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid", "tags": ["invalid", "employees"]}, "created_at": 1756221680.5085936, "relation_name": "\"postgres\".\"silver_invalid\".\"employees_invalid\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='invalid',\n    tags=['invalid','employees']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(employee_id AS text)) AS employee_id_txt,\n        TRIM(CAST(name        AS text)) AS name_txt,\n        TRIM(CAST(role        AS text)) AS role_txt,\n        TRIM(CAST(store_id    AS text)) AS store_id_txt\n    FROM {{ source('raw','employees') }}\n),\n\nflags AS (\n    SELECT\n        *,\n        (employee_id_txt IS NULL OR employee_id_txt = '' OR lower(employee_id_txt) IN ('na','n/a')) AS f_bad_employee_id,\n        (name_txt        IS NULL OR name_txt        = '' OR lower(name_txt)        IN ('na','n/a')) AS f_bad_name,\n        (role_txt        IS NULL OR role_txt        = '' OR lower(role_txt)        IN ('na','n/a')) AS f_bad_role,\n        (store_id_txt    IS NULL OR store_id_txt    = '' OR lower(store_id_txt)    IN ('na','n/a')) AS f_bad_store_id\n    FROM src\n),\n\nreasons AS (\n    SELECT\n        *,\n        array_remove(ARRAY[\n            CASE WHEN f_bad_employee_id THEN 'NULL/empty/NA in employee_id' END,\n            CASE WHEN f_bad_name        THEN 'NULL/empty/NA in name' END,\n            CASE WHEN f_bad_role        THEN 'NULL/empty/NA in role' END,\n            CASE WHEN f_bad_store_id    THEN 'NULL/empty/NA in store_id' END\n        ], NULL) AS reason_arr\n    FROM flags\n)\n\nSELECT\n    employee_id_txt AS employee_id,\n    name_txt        AS name,\n    role_txt        AS role,\n    store_id_txt    AS store_id,\n    array_to_string(reason_arr, '; ') AS invalid_reason\nFROM reasons\nWHERE cardinality(reason_arr) > 0", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "employees"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.employees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.stock_movements_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "stock_movements_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/stock_movements_invalid.sql", "original_file_path": "models/invalid/stock_movements_invalid.sql", "unique_id": "model.retail_dbt.stock_movements_invalid", "fqn": ["retail_dbt", "invalid", "stock_movements_invalid"], "alias": "stock_movements_invalid", "checksum": {"name": "sha256", "checksum": "21c21e8f2d7b7f5f40b8953fcfb68e069133cde84bbb815f271ce3ad9aff92ec"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": ["invalid", "stock_movements"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["invalid", "stock_movements"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid", "tags": ["invalid", "stock_movements"]}, "created_at": 1756221680.5105467, "relation_name": "\"postgres\".\"silver_invalid\".\"stock_movements_invalid\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='invalid',\n    tags=['invalid','stock_movements']\n) }}\n\nWITH src AS (\n  SELECT\n    TRIM(CAST(movement_id   AS text)) AS movement_id_txt,\n    TRIM(CAST(product_id    AS text)) AS product_id_txt,\n    TRIM(CAST(store_id      AS text)) AS store_id_txt,\n    TRIM(CAST(movement_type AS text)) AS movement_type_txt,\n    TRIM(CAST(quantity      AS text)) AS quantity_txt,\n    TRIM(REPLACE(CAST(movement_date AS text), E'\\r','')) AS movement_date_txt\n  FROM {{ source('raw','stock_movements') }}\n),\n\nchecked AS (\n  SELECT\n    *,\n    -- validate t\u1eebng c\u1ed9t\n    CASE \n      WHEN movement_id_txt !~ '^\\d+$' OR movement_id_txt::int <= 0\n        THEN 'invalid_movement_id'\n    END AS r_id,\n\n    CASE \n      WHEN product_id_txt !~ '^\\d+$' OR product_id_txt::int <= 0\n        THEN 'invalid_product_id'\n    END AS r_product,\n\n    CASE \n      WHEN store_id_txt !~ '^\\d+$' OR store_id_txt::int <= 0\n        THEN 'invalid_store_id'\n    END AS r_store,\n\n    CASE \n      WHEN upper(TRIM(movement_type_txt)) NOT IN ('IN','OUT','TRANSFER')\n        THEN 'invalid_movement_type'\n    END AS r_type,\n\n    CASE \n      WHEN quantity_txt IS NULL OR quantity_txt = '' \n        OR lower(quantity_txt) IN ('unknown','na','n/a')\n        OR quantity_txt !~ '^-?\\d+$'\n        OR quantity_txt::int <= 0\n        THEN 'invalid_quantity'\n    END AS r_qty,\n\n    CASE \n      WHEN movement_date_txt IS NULL OR movement_date_txt = '' THEN 'date_null'\n      WHEN movement_date_txt !~ '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'\n        THEN 'invalid_format_date'\n      WHEN to_char(to_date(movement_date_txt,'YYYY-MM-DD'),'YYYY-MM-DD') <> movement_date_txt\n        THEN 'nonexistent_date'\n      WHEN to_date(movement_date_txt,'YYYY-MM-DD') > DATE '2025-08-22'\n        THEN 'future_date'\n    END AS r_date\n  FROM src\n)\n\nSELECT\n  movement_id_txt,\n  product_id_txt,\n  store_id_txt,\n  movement_type_txt,\n  quantity_txt,\n  movement_date_txt,\n\n  array_to_string(\n    array_remove(ARRAY[r_id, r_product, r_store, r_type, r_qty, r_date], NULL),\n    '; '\n  ) AS invalid_reason\nFROM checked\nWHERE r_id IS NOT NULL\n   OR r_product IS NOT NULL\n   OR r_store IS NOT NULL\n   OR r_type IS NOT NULL\n   OR r_qty IS NOT NULL\n   OR r_date IS NOT NULL", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "stock_movements"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.stock_movements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.sales_transactions_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "sales_transactions_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/sales_transactions_invalid.sql", "original_file_path": "models/invalid/sales_transactions_invalid.sql", "unique_id": "model.retail_dbt.sales_transactions_invalid", "fqn": ["retail_dbt", "invalid", "sales_transactions_invalid"], "alias": "sales_transactions_invalid", "checksum": {"name": "sha256", "checksum": "e92f943bf306d07881b9743d87fc4d08366ffcec81325507de224a61b26c4e0b"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid"}, "created_at": 1756221680.5126595, "relation_name": "\"postgres\".\"silver_invalid\".\"sales_transactions_invalid\"", "raw_code": "{{ config(materialized='view', schema='invalid') }}\n\nwith source_data as (\n    select * from {{ source('raw', 'sales_transactions') }}\n),\n\nfinal as (\n    select\n        cast(transaction_id as int) as transaction_id,\n        cast(customer_id as int) as customer_id,\n        cast(store_id as int) as store_id,\n        cast(employee_id as int) as employee_id,\n        cast(transaction_date as timestamp) as transaction_date,\n        case\n            when trim(upper(total_amount)) = 'N/A' then null\n            else cast(total_amount as decimal(15,2))\n        end as total_amount,\n        cast(payment_id as int) as payment_id,\n        case\n            when transaction_id is null or transaction_id = 'N/A' then 'invalid_transaction_id'\n            when customer_id is null or customer_id = 'N/A' then 'invalid_customer_id'\n            when store_id is null or store_id = 'N/A' then 'invalid_store_id'\n            when employee_id is null or employee_id = 'N/A' then 'invalid_employee_id'\n            when transaction_date is null then 'invalid_transaction_date'\n            when case\n                when trim(upper(total_amount)) = 'N/A' then null\n                else cast(total_amount as decimal(15,2))\n            end is null or case\n                when trim(upper(total_amount)) = 'N/A' then null\n                else cast(total_amount as decimal(15,2))\n            end = 0 then 'invalid_total_amount'\n            when payment_id is null or payment_id = 'N/A' then 'invalid_payment_id'\n            else 'valid'\n        end as invalid_reason\n    from source_data\n    where not (\n        transaction_id is not null\n        and customer_id is not null\n        and store_id is not null\n        and employee_id is not null\n        and transaction_date is not null\n        and case\n            when trim(upper(total_amount)) = 'N/A' then null\n            else cast(total_amount as decimal(15,2))\n        end is not null\n        and payment_id is not null\n        and case\n            when trim(upper(total_amount)) = 'N/A' then null\n            else cast(total_amount as decimal(15,2))\n        end != 0\n        and transaction_id != 'N/A'\n        and customer_id != 'N/A'\n        and store_id != 'N/A'\n        and employee_id != 'N/A'\n        and payment_id != 'N/A'\n    )\n)\n\nselect * from final", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "sales_transactions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.discount_rules_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "discount_rules_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/discount_rules_invalid.sql", "original_file_path": "models/invalid/discount_rules_invalid.sql", "unique_id": "model.retail_dbt.discount_rules_invalid", "fqn": ["retail_dbt", "invalid", "discount_rules_invalid"], "alias": "discount_rules_invalid", "checksum": {"name": "sha256", "checksum": "3c9d82acdc2119253a95db04d578a052801228e78a071a22857d63bf78cac8cc"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": ["invalid", "discount_rules"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["invalid", "discount_rules"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid", "tags": ["invalid", "discount_rules"]}, "created_at": 1756221680.515087, "relation_name": "\"postgres\".\"silver_invalid\".\"discount_rules_invalid\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='invalid',\n    tags=['invalid','discount_rules']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(rule_id AS text))          AS rule_id_txt,\n        TRIM(CAST(product_id AS text))       AS product_id_txt,\n        TRIM(CAST(discount_type AS text))    AS discount_type_txt,\n        TRIM(CAST(value AS text))            AS value_txt,\n        TRIM(REPLACE(CAST(valid_from AS text), E'\\r','')) AS valid_from_txt,\n        TRIM(REPLACE(CAST(valid_to   AS text), E'\\r','')) AS valid_to_txt\n    FROM {{ source('raw','discount_rules') }}\n),\nnorm AS (\n    SELECT\n        NULLIF(rule_id_txt, '')        AS rule_id_clean,\n        NULLIF(product_id_txt, '')     AS product_id_clean,\n        NULLIF(discount_type_txt, '')  AS discount_type_clean,\n        NULLIF(value_txt, '')          AS value_clean,\n        NULLIF(valid_from_txt, '')     AS valid_from_clean,\n        NULLIF(valid_to_txt, '')       AS valid_to_clean\n    FROM src\n),\ntyped AS (\n    SELECT\n        *,\n        CASE WHEN rule_id_clean    ~ '^[0-9]+$' THEN rule_id_clean::integer END        AS rule_id_val,\n        CASE WHEN product_id_clean ~ '^[0-9]+$' THEN product_id_clean::integer END     AS product_id_val,\n        CASE WHEN value_clean ~* '^(na|n/a)$' THEN NULL\n             WHEN value_clean ~ '^[0-9]+(\\.[0-9]+)?$' THEN value_clean::numeric END    AS value_val,\n        CASE WHEN valid_from_clean ~* '^(na|n/a)$' THEN NULL\n             WHEN valid_from_clean ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n                  THEN to_timestamp(replace(valid_from_clean,'-','/'),'YYYY/FMMM/FMDD') END AS valid_from_ts,\n        CASE WHEN valid_to_clean ~* '^(na|n/a)$' THEN NULL\n             WHEN valid_to_clean ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n                  THEN to_timestamp(replace(valid_to_clean,'-','/'),'YYYY/FMMM/FMDD') END   AS valid_to_ts\n    FROM norm\n),\nflags AS (\n    SELECT\n        *,\n        (rule_id_val IS NULL\n         OR product_id_val IS NULL\n         OR discount_type_clean IS NULL OR discount_type_clean ~* '^(na|n/a)$'\n         OR value_val IS NULL\n         OR valid_from_ts IS NULL\n         OR valid_to_ts IS NULL) AS f_missing_or_na,\n        (valid_from_ts IS NOT NULL AND valid_to_ts IS NOT NULL AND valid_from_ts >= valid_to_ts) AS f_bad_range\n    FROM typed\n)\nSELECT\n    rule_id_clean AS rule_id,\n    product_id_clean AS product_id,\n    discount_type_clean AS discount_type,\n    value_clean AS value,\n    valid_from_clean AS valid_from,\n    valid_to_clean AS valid_to,\n    CASE\n      WHEN f_missing_or_na AND f_bad_range THEN 'missing_or_NA; valid_from >= valid_to'\n      WHEN f_missing_or_na THEN 'missing_or_NA'\n      WHEN f_bad_range THEN 'valid_from >= valid_to'\n    END AS invalid_reason\nFROM flags\nWHERE f_missing_or_na OR f_bad_range", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "discount_rules"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.discount_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.returns_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "returns_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/returns_invalid.sql", "original_file_path": "models/invalid/returns_invalid.sql", "unique_id": "model.retail_dbt.returns_invalid", "fqn": ["retail_dbt", "invalid", "returns_invalid"], "alias": "returns_invalid", "checksum": {"name": "sha256", "checksum": "ea90eac7d0a1d2ba9f4d1aeaf08b3dc9b6c25925d8a012385dbd8b2368ff42d3"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": ["invalid", "returns"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["invalid", "returns"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "schema": "invalid", "tags": ["invalid", "returns"]}, "created_at": 1756221680.517007, "relation_name": "\"postgres\".\"silver_invalid\".\"returns_invalid\"", "raw_code": "{{ config(\n    materialized='table',\n    schema='invalid',\n    tags=['invalid','returns']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(return_id   AS text))                               AS return_id_txt,\n        TRIM(CAST(item_id     AS text))                               AS item_id_txt,\n        TRIM(REGEXP_REPLACE(REPLACE(CAST(reason AS text), E'\\r',''), '\\s+', ' ', 'g')) AS reason_txt,\n        TRIM(REPLACE(CAST(return_date AS text), E'\\r',''))            AS return_date_txt\n    FROM {{ source('raw','returns') }}\n),\n\ntyped AS (\n    SELECT\n        return_id_txt,\n        item_id_txt,\n        reason_txt,\n        return_date_txt,\n\n        CASE WHEN return_id_txt ~ '^\\d+$' THEN return_id_txt::int END AS return_id,\n        CASE WHEN item_id_txt   ~ '^\\d+$' THEN item_id_txt::int   END AS item_id,\n\n        CASE\n          WHEN reason_txt IS NULL OR reason_txt = '' THEN NULL\n          WHEN lower(reason_txt) IN ('na','n/a') THEN NULL\n          ELSE reason_txt\n        END AS reason_clean,\n\n        CASE\n          WHEN return_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(return_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS return_date_clean\n    FROM src\n)\n\nSELECT\n    return_id_txt        AS return_id_raw,\n    item_id_txt          AS item_id_raw,\n    reason_txt           AS reason_raw,\n    return_date_txt      AS return_date_raw,\n    return_id,\n    item_id,\n    reason_clean,\n    return_date_clean,\n\n    -- l\u00fd do b\u1ecb lo\u1ea1i\n    CASE\n        WHEN return_id IS NULL OR item_id IS NULL\n            THEN 'invalid_id'\n        WHEN reason_clean IS NULL\n            THEN 'invalid_reason'\n        WHEN return_date_clean IS NULL\n            THEN 'invalid_date_format'\n        WHEN return_date_clean > DATE '2025-08-22'\n            THEN 'future_date'\n    END AS invalid_reason\nFROM typed\nWHERE\n      return_id IS NULL\n   OR item_id IS NULL\n   OR reason_clean IS NULL\n   OR return_date_clean IS NULL\n   OR return_date_clean > DATE '2025-08-22'", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "returns"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.pricing_history_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "pricing_history_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/pricing_history_invalid.sql", "original_file_path": "models/invalid/pricing_history_invalid.sql", "unique_id": "model.retail_dbt.pricing_history_invalid", "fqn": ["retail_dbt", "invalid", "pricing_history_invalid"], "alias": "pricing_history_invalid", "checksum": {"name": "sha256", "checksum": "87158184eef8936920bf8587f594de64b1a62ab9f8a58b350d68997af5e636ba"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": ["invalid", "pricing_history"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["invalid", "pricing_history"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid", "tags": ["invalid", "pricing_history"]}, "created_at": 1756221680.5190258, "relation_name": "\"postgres\".\"silver_invalid\".\"pricing_history_invalid\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='invalid',\n    tags=['invalid','pricing_history']\n) }}\n\n-- 1) L\u1ea5y d\u1eef li\u1ec7u th\u00f4 v\u00e0 chu\u1ea9n ho\u00e1 text\nWITH src AS (\n    SELECT\n        TRIM(CAST(history_id     AS text))                         AS history_id_raw,\n        TRIM(CAST(product_id     AS text))                         AS product_id_raw,\n        TRIM(CAST(price          AS text))                         AS price_raw,\n        TRIM(REPLACE(CAST(effective_date AS text), E'\\r',''))      AS effective_date_raw\n    FROM {{ source('raw','pricing_history') }}\n),\n\n-- 2) Parse/cast v\u1ec1 ki\u1ec3u d\u00f9ng \u0111\u1ec3 ki\u1ec3m tra\ntyped AS (\n    SELECT\n        history_id_raw,\n        product_id_raw,\n        price_raw,\n        effective_date_raw,\n\n        CASE WHEN price_raw ~ '^-?\\d+(\\.\\d+)?$' THEN price_raw::numeric END AS price_num,\n        CASE\n          WHEN effective_date_raw ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(effective_date_raw, '-', '/'),'YYYY/FMMM/FMDD')::date\n        END AS effective_date_cast\n    FROM src\n),\n\n-- 3) C\u1edd thi\u1ebfu/NA\nna_flags AS (\n    SELECT\n        history_id_raw,\n        product_id_raw,\n        price_raw,\n        effective_date_raw,\n        price_num,\n        effective_date_cast,\n\n        (price_raw IS NULL OR price_raw = '' OR lower(price_raw) IN ('na','n/a')) AS f_price_missing,\n        (effective_date_raw IS NULL OR effective_date_raw = ''\n            OR lower(effective_date_raw) IN ('na','n/a'))                         AS f_date_missing\n    FROM typed\n),\n\n-- 4) C\u00e1c c\u1edd c\u00f2n l\u1ea1i\nflags AS (\n    SELECT\n        history_id_raw,\n        product_id_raw,\n        price_raw,\n        effective_date_raw,\n        price_num,\n        effective_date_cast,\n        f_price_missing,\n        f_date_missing,\n\n        (price_num IS NULL AND NOT f_price_missing)        AS f_price_not_numeric,\n        (price_num IS NOT NULL AND price_num <= 0)         AS f_price_nonpositive,\n        (effective_date_cast IS NULL AND NOT f_date_missing) AS f_date_bad_format,\n        (effective_date_cast IS NOT NULL\n         AND effective_date_cast > CURRENT_DATE)           AS f_date_future\n    FROM na_flags\n),\n\n-- 5) G\u1ed9p l\u00fd do\nreasons AS (\n    SELECT\n        history_id_raw,\n        product_id_raw,\n        price_raw,\n        effective_date_raw,\n        price_num,\n        effective_date_cast,\n        array_remove(ARRAY[\n            CASE WHEN f_price_missing      THEN 'price missing/NA' END,\n            CASE WHEN f_price_not_numeric  THEN 'price not numeric' END,\n            CASE WHEN f_price_nonpositive  THEN 'price <= 0' END,\n            CASE WHEN f_date_missing       THEN 'effective_date missing/NA' END,\n            CASE WHEN f_date_bad_format    THEN 'effective_date invalid format' END,\n            CASE WHEN f_date_future        THEN 'effective_date in the future' END\n        ], NULL) AS reason_arr\n    FROM flags\n)\n\n-- 6) K\u1ebft qu\u1ea3 invalid\nSELECT\n    history_id_raw      AS history_id,\n    product_id_raw      AS product_id,\n    price_raw           AS price_raw,\n    price_num           AS price_parsed,\n    effective_date_raw  AS effective_date_raw,\n    effective_date_cast AS effective_date_parsed,\n    array_to_string(reason_arr, '; ') AS invalid_reason\nFROM reasons\nWHERE cardinality(reason_arr) > 0", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "pricing_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.pricing_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.customer_feedback_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "customer_feedback_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/customer_feedback_invalid.sql", "original_file_path": "models/invalid/customer_feedback_invalid.sql", "unique_id": "model.retail_dbt.customer_feedback_invalid", "fqn": ["retail_dbt", "invalid", "customer_feedback_invalid"], "alias": "customer_feedback_invalid", "checksum": {"name": "sha256", "checksum": "df3147245b7dd532a14fdc7043e57bd7371dcd603c44d4b9c15f6ab9cc2fcd1f"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": ["customer_feedback", "invalid", "staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["customer_feedback", "invalid", "staging"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid", "tags": ["customer_feedback", "invalid", "staging"]}, "created_at": 1756221680.520996, "relation_name": "\"postgres\".\"silver_invalid\".\"customer_feedback_invalid\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='invalid',\n    tags=['customer_feedback','invalid','staging']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(feedback_id AS text))  AS feedback_id,\n        TRIM(CAST(customer_id AS text))  AS customer_id,\n        TRIM(CAST(store_id    AS text))  AS store_id,\n        TRIM(CAST(product_id  AS text))  AS product_id,\n        /* gi\u1eef nguy\u00ean rating d\u1ea1ng text \u0111\u1ec3 ki\u1ec3m tra 'bad' */\n        CASE\n            WHEN rating IS NULL THEN NULL\n            ELSE TRIM(CAST(rating AS text))\n        END AS rating_text,\n        TRIM(CAST(comments AS text)) AS comments,\n        /* chu\u1ea9n ho\u00e1 ng\u00e0y th\u00f4 */\n        CASE\n            WHEN feedback_date IS NULL THEN NULL\n            ELSE TRIM(REPLACE(CAST(feedback_date AS text), E'\\r',''))\n        END AS feedback_date_text\n    FROM {{ source('raw', 'customer_feedback') }}\n),\ndated AS (\n    SELECT\n        *,\n        /* nh\u1eadn YYYY[-/]M[M]?[-/]D[D]?; parse linh ho\u1ea1t */\n        CASE\n            WHEN feedback_date_text ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n            THEN to_timestamp(replace(feedback_date_text, '-', '/'), 'YYYY/FMMM/FMDD')\n            ELSE NULL\n        END AS feedback_date_ts\n    FROM src\n),\nflagged AS (\n    SELECT\n        *,\n        /* 2 \u0111i\u1ec1u ki\u1ec7n invalid duy nh\u1ea5t */\n        (rating_text IS NOT NULL AND lower(rating_text) = 'bad') AS f_rating_bad,\n        (feedback_date_ts IS NOT NULL\n          AND feedback_date_ts > to_timestamp('2025/08/22','YYYY/MM/DD')) AS f_date_after_cutoff\n    FROM dated\n)\nSELECT\n    feedback_id,\n    customer_id,\n    store_id,\n    product_id,\n    rating_text    AS rating,\n    comments,\n    feedback_date_text,\n    feedback_date_ts AS feedback_date_parsed,\n    CASE\n        WHEN f_rating_bad AND f_date_after_cutoff THEN 'rating=bad; date>2025/08/22'\n        WHEN f_rating_bad THEN 'rating=bad'\n        WHEN f_date_after_cutoff THEN 'date>2025/08/22'\n    END AS invalid_reason\nFROM flagged\nWHERE\n    /* ch\u1ec9 l\u1ea5y \u0111\u00fang 2 lo\u1ea1i l\u1ed7i n\u00e0y */\n    f_rating_bad OR f_date_after_cutoff", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "customer_feedback"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.purchase_orders_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "purchase_orders_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/purchase_orders_invalid.sql", "original_file_path": "models/invalid/purchase_orders_invalid.sql", "unique_id": "model.retail_dbt.purchase_orders_invalid", "fqn": ["retail_dbt", "invalid", "purchase_orders_invalid"], "alias": "purchase_orders_invalid", "checksum": {"name": "sha256", "checksum": "3bae45d9e02ba38f7d12cf3f86f36fe8bbbb1a2b410cbb34566a0716c735b6b0"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": ["invalid", "purchase_orders"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["invalid", "purchase_orders"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid", "tags": ["invalid", "purchase_orders"]}, "created_at": 1756221680.5230517, "relation_name": "\"postgres\".\"silver_invalid\".\"purchase_orders_invalid\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='invalid',\n    tags=['invalid','purchase_orders']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(order_id AS text))       AS order_id_txt,\n        TRIM(CAST(supplier_id AS text))    AS supplier_id_txt,\n        TRIM(CAST(order_date AS text))     AS order_date_txt,\n        TRIM(CAST(status AS text))         AS status_txt\n    FROM {{ source('raw','purchase_orders') }}\n),\n\ntyped AS (\n    SELECT\n        src.*,\n        CASE WHEN order_id_txt ~ '^\\d+$' THEN order_id_txt::int END        AS order_id,\n        CASE WHEN supplier_id_txt ~ '^\\d+$' THEN supplier_id_txt::int END  AS supplier_id,\n        CASE\n          WHEN order_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(order_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS order_date,\n        NULLIF(NULLIF(lower(status_txt),'na'),'') AS status_clean\n    FROM src\n),\n\nflags AS (\n    SELECT *,\n        (order_id IS NULL)                         AS f_bad_id,\n        (supplier_id IS NULL)                      AS f_bad_supplier,\n        (order_date IS NULL)                       AS f_bad_date,\n        (order_date IS NOT NULL AND order_date > DATE '2025-08-22') AS f_future_date,\n        (status_clean IS NULL)                     AS f_bad_status\n    FROM typed\n),\n\nreasons AS (\n    SELECT *,\n        array_remove(ARRAY[\n            CASE WHEN f_bad_id       THEN 'invalid order_id' END,\n            CASE WHEN f_bad_supplier THEN 'invalid supplier_id' END,\n            CASE WHEN f_bad_date     THEN 'invalid order_date' END,\n            CASE WHEN f_future_date  THEN 'order_date > 2025-08-22' END,\n            CASE WHEN f_bad_status   THEN 'status missing/NA' END\n        ], NULL) AS reason_arr\n    FROM flags\n)\n\nSELECT\n    order_id_txt   AS order_id,\n    supplier_id_txt AS supplier_id,\n    order_date_txt AS order_date,\n    status_txt     AS status,\n    array_to_string(reason_arr,'; ') AS invalid_reason\nFROM reasons\nWHERE cardinality(reason_arr) > 0", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "purchase_orders"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.purchase_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.store_visits_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "store_visits_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/store_visits_invalid.sql", "original_file_path": "models/invalid/store_visits_invalid.sql", "unique_id": "model.retail_dbt.store_visits_invalid", "fqn": ["retail_dbt", "invalid", "store_visits_invalid"], "alias": "store_visits_invalid", "checksum": {"name": "sha256", "checksum": "8a3060b50ec86a905257b9271d19a8ccd113557d70c2daefb3eccaa1947ddfe2"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": ["invalid", "store_visits"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["invalid", "store_visits"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid", "tags": ["invalid", "store_visits"]}, "created_at": 1756221680.5249798, "relation_name": "\"postgres\".\"silver_invalid\".\"store_visits_invalid\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='invalid',\n    tags=['invalid','store_visits']\n) }}\n\nWITH src AS (\n  SELECT\n    TRIM(CAST(visit_id    AS text)) AS visit_id_txt,\n    TRIM(CAST(customer_id AS text)) AS customer_id_txt,\n    TRIM(CAST(store_id    AS text)) AS store_id_txt,\n    TRIM(REPLACE(CAST(visit_date AS text), E'\\r','')) AS visit_date_txt\n  FROM {{ source('raw','store_visits') }}\n),\n\nchecked AS (\n  SELECT\n    *,\n    -- id checks\n    CASE WHEN visit_id_txt    !~ '^\\d+$'                  THEN 'invalid visit_id' END AS r_visit_id,\n    CASE WHEN customer_id_txt !~ '^\\d+$'                  THEN 'invalid customer_id' END AS r_customer_id,\n    CASE WHEN store_id_txt    !~ '^\\d+$'                  THEN 'invalid store_id' END AS r_store_id,\n\n    -- date checks\n    CASE \n      WHEN visit_date_txt IS NULL OR visit_date_txt = '' THEN 'visit_date is null/empty'\n      WHEN visit_date_txt !~ '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'\n           THEN 'invalid date format'\n      WHEN to_char(to_date(visit_date_txt,'YYYY-MM-DD'),'YYYY-MM-DD') <> visit_date_txt\n           THEN 'nonexistent calendar date'\n      WHEN to_date(visit_date_txt,'YYYY-MM-DD') > DATE '2025-08-22'\n           THEN 'visit_date > 2025-08-22'\n    END AS r_visit_date\n  FROM src\n)\n\nSELECT\n  visit_id_txt    AS visit_id,\n  customer_id_txt AS customer_id,\n  store_id_txt    AS store_id,\n  visit_date_txt  AS visit_date,\n  array_to_string(\n    array_remove(ARRAY[r_visit_id, r_customer_id, r_store_id, r_visit_date], NULL),\n    '; '\n  ) AS invalid_reason\nFROM checked\nWHERE r_visit_id    IS NOT NULL\n   OR r_customer_id IS NOT NULL\n   OR r_store_id    IS NOT NULL\n   OR r_visit_date  IS NOT NULL", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "store_visits"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.store_visits"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.customer_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "customer_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/customer_invalid.sql", "original_file_path": "models/invalid/customer_invalid.sql", "unique_id": "model.retail_dbt.customer_invalid", "fqn": ["retail_dbt", "invalid", "customer_invalid"], "alias": "customer_invalid", "checksum": {"name": "sha256", "checksum": "42ddb42421e9486c814941579ceb7e3eaa224268ecff2bf6f461bde601d6ea50"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": ["invalid", "customers"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["invalid", "customers"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid", "tags": ["invalid", "customers"]}, "created_at": 1756221680.5273576, "relation_name": "\"postgres\".\"silver_invalid\".\"customer_invalid\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='invalid',\n    tags=['invalid','customers']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(customer_id AS text))            AS customer_id_text,\n        TRIM(CAST(name AS text))                   AS name,\n        LOWER(TRIM(CAST(email AS text)))           AS email,\n        TRIM(CAST(phone AS text))                  AS phone,\n        TRIM(CAST(loyalty_program_id AS text))     AS loyalty_program_id_text,\n        TRIM(REPLACE(CAST(created_at AS text), E'\\r','')) AS created_at_text\n    FROM {{ source('raw','customers') }}\n),\ntyped AS (\n    SELECT\n        *,\n        CASE WHEN customer_id_text ~ '^[0-9]+$' THEN customer_id_text::integer END        AS customer_id_val,\n        CASE WHEN loyalty_program_id_text ~ '^[0-9]+$' THEN loyalty_program_id_text::int  END AS loyalty_program_id_val,\n        CASE\n            WHEN created_at_text ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n            THEN to_timestamp(replace(created_at_text,'-','/'),'YYYY/FMMM/FMDD')\n        END AS created_at_ts\n    FROM src\n),\nflag AS (\n    SELECT\n        *,\n        (customer_id_val IS NULL)                                              AS f_bad_customer_id,\n        (email IS NULL OR email !~ '^[^@]+@[^@]+\\.[^@]+$')                     AS f_bad_email,\n        (phone IS NULL OR phone !~ '^[0-9]{9,15}$')                            AS f_bad_phone,   -- b\u1ea1n ch\u1ec9nh d\u00e0i s\u1ed1 n\u1ebfu mu\u1ed1n\n        (loyalty_program_id_val IS NULL)                                       AS f_bad_loyalty,\n        (created_at_ts IS NULL)                                                AS f_bad_date,\n        (created_at_ts IS NOT NULL AND created_at_ts > to_timestamp('2025/08/22','YYYY/MM/DD')) AS f_date_after_cutoff\n    FROM typed\n),\nreasons AS (\n    SELECT\n        *,\n        array_remove(ARRAY[\n            CASE WHEN f_bad_customer_id   THEN 'Invalid customer_id' END,\n            CASE WHEN f_bad_email         THEN 'Invalid email' END,\n            CASE WHEN f_bad_phone         THEN 'Invalid phone' END,\n            CASE WHEN f_bad_loyalty       THEN 'Invalid loyalty_program_id' END,\n            CASE WHEN f_bad_date          THEN 'Invalid created_at format' END,\n            CASE WHEN f_date_after_cutoff THEN 'created_at > 2025-08-22' END\n        ], NULL) AS reason_arr\n    FROM flag\n)\nSELECT\n    customer_id_text   AS customer_id,\n    name,\n    email,\n    phone,\n    loyalty_program_id_text AS loyalty_program_id,\n    created_at_text    AS created_at_raw,\n    created_at_ts      AS created_at_parsed,\n    array_to_string(reason_arr,'; ') AS invalid_reason\nFROM reasons\nWHERE cardinality(reason_arr) > 0", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "customers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.customers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.retail_dbt.payments_invalid": {"database": "postgres", "schema": "silver_invalid", "name": "payments_invalid", "resource_type": "model", "package_name": "retail_dbt", "path": "invalid/payments_invalid.sql", "original_file_path": "models/invalid/payments_invalid.sql", "unique_id": "model.retail_dbt.payments_invalid", "fqn": ["retail_dbt", "invalid", "payments_invalid"], "alias": "payments_invalid", "checksum": {"name": "sha256", "checksum": "545f2821d28499aa62abf18031f51bf79cef8eca247d6971a95246c87a0b0064"}, "config": {"enabled": true, "alias": null, "schema": "invalid", "database": null, "tags": ["invalid", "payments"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["invalid", "payments"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "schema": "invalid", "tags": ["invalid", "payments"]}, "created_at": 1756221680.5296688, "relation_name": "\"postgres\".\"silver_invalid\".\"payments_invalid\"", "raw_code": "{{ config(\n    materialized='view',\n    schema='invalid',\n    tags=['invalid','payments']\n) }}\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(payment_id AS text))                 AS payment_id_txt,\n        TRIM(CAST(method     AS text))                 AS method,\n        TRIM(CAST(status     AS text))                 AS status,\n        TRIM(REPLACE(CAST(paid_at AS text), E'\\r','')) AS paid_at_txt\n    FROM {{ source('raw','payments') }}\n),\n\ntyped AS (\n    SELECT\n        *,\n        CASE WHEN paid_at_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n             THEN to_timestamp(replace(paid_at_txt,'-','/'),'YYYY/FMMM/FMDD')\n        END AS paid_at_ts\n    FROM src\n),\n\nflags AS (\n    SELECT\n        *,\n        /* thi\u1ebfu/NA */\n        (paid_at_txt IS NULL OR paid_at_txt = '' OR lower(paid_at_txt) IN ('na','n/a')) AS f_date_missing,\n        /* c\u00f3 gi\u00e1 tr\u1ecb nh\u01b0ng kh\u00f4ng kh\u1edbp pattern */\n        (paid_at_txt IS NOT NULL AND paid_at_txt <> '' AND lower(paid_at_txt) NOT IN ('na','n/a')\n         AND paid_at_ts IS NULL) AS f_bad_format,\n        /* qua cutoff */\n        (paid_at_ts IS NOT NULL AND paid_at_ts > to_timestamp('2025/08/22','YYYY/MM/DD')) AS f_after_cutoff\n    FROM typed\n)\n\nSELECT\n    payment_id_txt AS payment_id,\n    method,\n    status,\n    paid_at_txt    AS paid_at_raw,\n    paid_at_ts     AS paid_at_parsed,\n    CASE\n        WHEN f_date_missing THEN 'paid_at missing/NA'\n        WHEN f_bad_format   THEN 'paid_at invalid format'\n        WHEN f_after_cutoff THEN 'paid_at > 2025-08-22'\n    END AS invalid_reason\nFROM flags\nWHERE f_date_missing OR f_bad_format OR f_after_cutoff", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["raw", "payments"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.retail_dbt.raw.payments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "snapshot.retail_dbt.dim_suppliers_snapshot": {"database": "postgres", "schema": "silver", "name": "dim_suppliers_snapshot", "resource_type": "snapshot", "package_name": "retail_dbt", "path": "dim_suppliers_snapshot.sql", "original_file_path": "snapshots/dim_suppliers_snapshot.sql", "unique_id": "snapshot.retail_dbt.dim_suppliers_snapshot", "fqn": ["retail_dbt", "dim_suppliers_snapshot", "dim_suppliers_snapshot"], "alias": "dim_suppliers_snapshot", "checksum": {"name": "sha256", "checksum": "fca133049dba4098a76c358ffd3f754543ac731e55d06da3c5290f19f1823404"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "supplier_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "strategy": "check", "target_schema": null, "target_database": null, "updated_at": null, "check_cols": "all", "snapshot_meta_column_names": {"dbt_valid_to": null, "dbt_valid_from": null, "dbt_scd_id": null, "dbt_updated_at": null, "dbt_is_deleted": null}, "dbt_valid_to_current": null, "invalidate_hard_deletes": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"unique_key": "supplier_id", "strategy": "check", "check_cols": "all", "invalidate_hard_deletes": true}, "created_at": 1756221680.6642196, "relation_name": "\"postgres\".\"silver\".\"dim_suppliers_snapshot\"", "raw_code": "\n{{\n  config(\n    unique_key='supplier_id',\n    strategy='check',\n    check_cols='all',\n    invalidate_hard_deletes=True\n  )\n}}\nselect * from {{ ref('suppliers_silver') }}\n", "doc_blocks": [], "language": "sql", "refs": [{"name": "suppliers_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.suppliers_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.retail_dbt.dim_customers_snapshot": {"database": "postgres", "schema": "silver", "name": "dim_customers_snapshot", "resource_type": "snapshot", "package_name": "retail_dbt", "path": "dim_customers_snapshot.sql", "original_file_path": "snapshots/dim_customers_snapshot.sql", "unique_id": "snapshot.retail_dbt.dim_customers_snapshot", "fqn": ["retail_dbt", "dim_customers_snapshot", "dim_customers_snapshot"], "alias": "dim_customers_snapshot", "checksum": {"name": "sha256", "checksum": "7b51a214efb70ff40d660d3c15074041a47072061087fff1ec6dcabd3c0cbeb0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "customer_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "strategy": "check", "target_schema": null, "target_database": null, "updated_at": null, "check_cols": "all", "snapshot_meta_column_names": {"dbt_valid_to": null, "dbt_valid_from": null, "dbt_scd_id": null, "dbt_updated_at": null, "dbt_is_deleted": null}, "dbt_valid_to_current": null, "invalidate_hard_deletes": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"unique_key": "customer_id", "strategy": "check", "check_cols": "all", "invalidate_hard_deletes": true}, "created_at": 1756221680.672375, "relation_name": "\"postgres\".\"silver\".\"dim_customers_snapshot\"", "raw_code": "\n{{\n  config(\n    unique_key='customer_id',\n    strategy='check',\n    check_cols='all',\n    invalidate_hard_deletes=True\n  )\n}}\nselect * from {{ ref('customers_silver') }}\n", "doc_blocks": [], "language": "sql", "refs": [{"name": "customers_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.customers_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.retail_dbt.dim_stores_snapshot": {"database": "postgres", "schema": "silver", "name": "dim_stores_snapshot", "resource_type": "snapshot", "package_name": "retail_dbt", "path": "dim_stores_snapshot.sql", "original_file_path": "snapshots/dim_stores_snapshot.sql", "unique_id": "snapshot.retail_dbt.dim_stores_snapshot", "fqn": ["retail_dbt", "dim_stores_snapshot", "dim_stores_snapshot"], "alias": "dim_stores_snapshot", "checksum": {"name": "sha256", "checksum": "9f501d6c3ef497675438901266b010020e2792a41ff7f2f9509a1ece7e78ee61"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "store_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "strategy": "check", "target_schema": null, "target_database": null, "updated_at": null, "check_cols": "all", "snapshot_meta_column_names": {"dbt_valid_to": null, "dbt_valid_from": null, "dbt_scd_id": null, "dbt_updated_at": null, "dbt_is_deleted": null}, "dbt_valid_to_current": null, "invalidate_hard_deletes": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"unique_key": "store_id", "strategy": "check", "check_cols": "all", "invalidate_hard_deletes": true}, "created_at": 1756221680.6756496, "relation_name": "\"postgres\".\"silver\".\"dim_stores_snapshot\"", "raw_code": "\n{{\n  config(\n    unique_key='store_id',\n    strategy='check',\n    check_cols='all',\n    invalidate_hard_deletes=True\n  )\n}}\nselect * from {{ ref('stores_silver') }}\n", "doc_blocks": [], "language": "sql", "refs": [{"name": "stores_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.stores_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.retail_dbt.dim_brands_snapshot": {"database": "postgres", "schema": "silver", "name": "dim_brands_snapshot", "resource_type": "snapshot", "package_name": "retail_dbt", "path": "dim_brands_snapshot.sql", "original_file_path": "snapshots/dim_brands_snapshot.sql", "unique_id": "snapshot.retail_dbt.dim_brands_snapshot", "fqn": ["retail_dbt", "dim_brands_snapshot", "dim_brands_snapshot"], "alias": "dim_brands_snapshot", "checksum": {"name": "sha256", "checksum": "bb968ce6a6ba5467b0341dce0654067f2775bc730d8e516ae06ed91cf3bbc997"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "brand_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "strategy": "check", "target_schema": null, "target_database": null, "updated_at": null, "check_cols": "all", "snapshot_meta_column_names": {"dbt_valid_to": null, "dbt_valid_from": null, "dbt_scd_id": null, "dbt_updated_at": null, "dbt_is_deleted": null}, "dbt_valid_to_current": null, "invalidate_hard_deletes": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"unique_key": "brand_id", "strategy": "check", "check_cols": "all", "invalidate_hard_deletes": true}, "created_at": 1756221680.6789124, "relation_name": "\"postgres\".\"silver\".\"dim_brands_snapshot\"", "raw_code": "\n{{\n  config(\n    unique_key='brand_id',\n    strategy='check',\n    check_cols='all',\n    invalidate_hard_deletes=True\n  )\n}}\nselect * from {{ ref('brands_silver') }}\n", "doc_blocks": [], "language": "sql", "refs": [{"name": "brands_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.brands_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.retail_dbt.dim_categories_snapshot": {"database": "postgres", "schema": "silver", "name": "dim_categories_snapshot", "resource_type": "snapshot", "package_name": "retail_dbt", "path": "dim_categories_snapshot.sql", "original_file_path": "snapshots/dim_categories_snapshot.sql", "unique_id": "snapshot.retail_dbt.dim_categories_snapshot", "fqn": ["retail_dbt", "dim_categories_snapshot", "dim_categories_snapshot"], "alias": "dim_categories_snapshot", "checksum": {"name": "sha256", "checksum": "d2538fe4d3123e215617fcc7f48f5f0a632eb24f63b4ff05682069f822be06b9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "category_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "strategy": "check", "target_schema": null, "target_database": null, "updated_at": null, "check_cols": "all", "snapshot_meta_column_names": {"dbt_valid_to": null, "dbt_valid_from": null, "dbt_scd_id": null, "dbt_updated_at": null, "dbt_is_deleted": null}, "dbt_valid_to_current": null, "invalidate_hard_deletes": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"unique_key": "category_id", "strategy": "check", "check_cols": "all", "invalidate_hard_deletes": true}, "created_at": 1756221680.6827118, "relation_name": "\"postgres\".\"silver\".\"dim_categories_snapshot\"", "raw_code": "\n{{\n  config(\n    unique_key='category_id',\n    strategy='check',\n    check_cols='all',\n    invalidate_hard_deletes=True\n  )\n}}\nselect * from {{ ref('categories_silver') }}\n", "doc_blocks": [], "language": "sql", "refs": [{"name": "categories_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.categories_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.retail_dbt.dim_products_snapshot": {"database": "postgres", "schema": "silver", "name": "dim_products_snapshot", "resource_type": "snapshot", "package_name": "retail_dbt", "path": "dim_products_snapshot.sql", "original_file_path": "snapshots/dim_products_snapshot.sql", "unique_id": "snapshot.retail_dbt.dim_products_snapshot", "fqn": ["retail_dbt", "dim_products_snapshot", "dim_products_snapshot"], "alias": "dim_products_snapshot", "checksum": {"name": "sha256", "checksum": "4e75ec647dbfeb75185c7a5accbf044df96576588a2ee728dcba0b00d5d494f5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "product_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "strategy": "check", "target_schema": null, "target_database": null, "updated_at": null, "check_cols": "all", "snapshot_meta_column_names": {"dbt_valid_to": null, "dbt_valid_from": null, "dbt_scd_id": null, "dbt_updated_at": null, "dbt_is_deleted": null}, "dbt_valid_to_current": null, "invalidate_hard_deletes": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"unique_key": "product_id", "strategy": "check", "check_cols": "all", "invalidate_hard_deletes": true}, "created_at": 1756221680.68591, "relation_name": "\"postgres\".\"silver\".\"dim_products_snapshot\"", "raw_code": "\n{{\n  config(\n    unique_key='product_id',\n    strategy='check',\n    check_cols='all',\n    invalidate_hard_deletes=True\n  )\n}}\nselect * from {{ ref('products_silver') }}\n", "doc_blocks": [], "language": "sql", "refs": [{"name": "products_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.products_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.retail_dbt.dim_employees_snapshot": {"database": "postgres", "schema": "silver", "name": "dim_employees_snapshot", "resource_type": "snapshot", "package_name": "retail_dbt", "path": "dim_employees_snapshot.sql", "original_file_path": "snapshots/dim_employees_snapshot.sql", "unique_id": "snapshot.retail_dbt.dim_employees_snapshot", "fqn": ["retail_dbt", "dim_employees_snapshot", "dim_employees_snapshot"], "alias": "dim_employees_snapshot", "checksum": {"name": "sha256", "checksum": "25fd7f7077e525b07319675857ec2a729eea9954dd2c7e797c4e4cfa37d79608"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "employee_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "strategy": "check", "target_schema": null, "target_database": null, "updated_at": null, "check_cols": "all", "snapshot_meta_column_names": {"dbt_valid_to": null, "dbt_valid_from": null, "dbt_scd_id": null, "dbt_updated_at": null, "dbt_is_deleted": null}, "dbt_valid_to_current": null, "invalidate_hard_deletes": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"unique_key": "employee_id", "strategy": "check", "check_cols": "all", "invalidate_hard_deletes": true}, "created_at": 1756221680.689109, "relation_name": "\"postgres\".\"silver\".\"dim_employees_snapshot\"", "raw_code": "\n{{\n  config(\n    unique_key='employee_id',\n    strategy='check',\n    check_cols='all',\n    invalidate_hard_deletes=True\n  )\n}}\nselect * from {{ ref('employees_silver') }}\n", "doc_blocks": [], "language": "sql", "refs": [{"name": "employees_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.employees_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.retail_dbt.dim_loyalty_programs_snapshot": {"database": "postgres", "schema": "silver", "name": "dim_loyalty_programs_snapshot", "resource_type": "snapshot", "package_name": "retail_dbt", "path": "dim_loyalty_programs_snapshot.sql", "original_file_path": "snapshots/dim_loyalty_programs_snapshot.sql", "unique_id": "snapshot.retail_dbt.dim_loyalty_programs_snapshot", "fqn": ["retail_dbt", "dim_loyalty_programs_snapshot", "dim_loyalty_programs_snapshot"], "alias": "dim_loyalty_programs_snapshot", "checksum": {"name": "sha256", "checksum": "5d603442e2a4a65eaf0e04e8e5b67a4256a66116b0adeb4f30d460e9a15095e0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "loyalty_program_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "strategy": "check", "target_schema": null, "target_database": null, "updated_at": null, "check_cols": "all", "snapshot_meta_column_names": {"dbt_valid_to": null, "dbt_valid_from": null, "dbt_scd_id": null, "dbt_updated_at": null, "dbt_is_deleted": null}, "dbt_valid_to_current": null, "invalidate_hard_deletes": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"unique_key": "loyalty_program_id", "strategy": "check", "check_cols": "all", "invalidate_hard_deletes": true}, "created_at": 1756221680.6922162, "relation_name": "\"postgres\".\"silver\".\"dim_loyalty_programs_snapshot\"", "raw_code": "\n{{\n  config(\n    unique_key='loyalty_program_id',\n    strategy='check',\n    check_cols='all',\n    invalidate_hard_deletes=True\n  )\n}}\n-- B\u1ea3ng n\u00e0y trong danh s\u00e1ch c\u1ee7a b\u1ea1n l\u00e0 'loyalty_programs' (kh\u00f4ng c\u00f3 _silver)\nselect * from {{ ref('loyalty_programs_silver') }}\n", "doc_blocks": [], "language": "sql", "refs": [{"name": "loyalty_programs_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.loyalty_programs_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.retail_dbt.dim_promotions_snapshot": {"database": "postgres", "schema": "silver", "name": "dim_promotions_snapshot", "resource_type": "snapshot", "package_name": "retail_dbt", "path": "dim_promotions_snapshot.sql", "original_file_path": "snapshots/dim_promotions_snapshot.sql", "unique_id": "snapshot.retail_dbt.dim_promotions_snapshot", "fqn": ["retail_dbt", "dim_promotions_snapshot", "dim_promotions_snapshot"], "alias": "dim_promotions_snapshot", "checksum": {"name": "sha256", "checksum": "1a62e869fcf24463914c018c06649bfaaf350eca804e5efc79fd3edf54135d94"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "promotion_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "strategy": "check", "target_schema": null, "target_database": null, "updated_at": null, "check_cols": "all", "snapshot_meta_column_names": {"dbt_valid_to": null, "dbt_valid_from": null, "dbt_scd_id": null, "dbt_updated_at": null, "dbt_is_deleted": null}, "dbt_valid_to_current": null, "invalidate_hard_deletes": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"unique_key": "promotion_id", "strategy": "check", "check_cols": "all", "invalidate_hard_deletes": true}, "created_at": 1756221680.695351, "relation_name": "\"postgres\".\"silver\".\"dim_promotions_snapshot\"", "raw_code": "\n{{\n  config(\n    unique_key='promotion_id',\n    strategy='check',\n    check_cols='all',\n    invalidate_hard_deletes=True\n  )\n}}\nselect * from {{ ref('promotions_silver') }}\n", "doc_blocks": [], "language": "sql", "refs": [{"name": "promotions_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.retail_dbt.promotions_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.retail_dbt.not_null_brands_silver_brand_id.e37c5b2859": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_brands_silver_brand_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_brands_silver_brand_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_brands_silver_brand_id.e37c5b2859", "fqn": ["retail_dbt", "silver", "not_null_brands_silver_brand_id"], "alias": "not_null_brands_silver_brand_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221680.991886, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "brands_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.brands_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "brand_id", "file_key_name": "models.brands_silver", "attached_node": "model.retail_dbt.brands_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "brand_id", "model": "{{ get_where_subquery(ref('brands_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_brands_silver_name.cfe1fe35d4": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_brands_silver_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_brands_silver_name.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_brands_silver_name.cfe1fe35d4", "fqn": ["retail_dbt", "silver", "not_null_brands_silver_name"], "alias": "not_null_brands_silver_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221680.993221, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "brands_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.brands_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.brands_silver", "attached_node": "model.retail_dbt.brands_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('brands_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_brands_silver_staged_at.0c3bcd18b1": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_brands_silver_staged_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_brands_silver_staged_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_brands_silver_staged_at.0c3bcd18b1", "fqn": ["retail_dbt", "silver", "not_null_brands_silver_staged_at"], "alias": "not_null_brands_silver_staged_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221680.9945054, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "brands_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.brands_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "staged_at", "file_key_name": "models.brands_silver", "attached_node": "model.retail_dbt.brands_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "staged_at", "model": "{{ get_where_subquery(ref('brands_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_campaigns_silver_campaign_id.4bdea18142": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_campaigns_silver_campaign_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_campaigns_silver_campaign_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_campaigns_silver_campaign_id.4bdea18142", "fqn": ["retail_dbt", "silver", "not_null_campaigns_silver_campaign_id"], "alias": "not_null_campaigns_silver_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221680.9956133, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "campaigns_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.campaigns_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "campaign_id", "file_key_name": "models.campaigns_silver", "attached_node": "model.retail_dbt.campaigns_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('campaigns_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_campaigns_silver_name.599034b8a0": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_campaigns_silver_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_campaigns_silver_name.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_campaigns_silver_name.599034b8a0", "fqn": ["retail_dbt", "silver", "not_null_campaigns_silver_name"], "alias": "not_null_campaigns_silver_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221680.9967551, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "campaigns_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.campaigns_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.campaigns_silver", "attached_node": "model.retail_dbt.campaigns_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('campaigns_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_campaigns_silver_budget.69bfe9da3e": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_campaigns_silver_budget", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_campaigns_silver_budget.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_campaigns_silver_budget.69bfe9da3e", "fqn": ["retail_dbt", "silver", "not_null_campaigns_silver_budget"], "alias": "not_null_campaigns_silver_budget", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221680.997946, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "campaigns_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.campaigns_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "budget", "file_key_name": "models.campaigns_silver", "attached_node": "model.retail_dbt.campaigns_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget", "model": "{{ get_where_subquery(ref('campaigns_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_campaigns_silver_start_date.efe0421e5c": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_campaigns_silver_start_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_campaigns_silver_start_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_campaigns_silver_start_date.efe0421e5c", "fqn": ["retail_dbt", "silver", "not_null_campaigns_silver_start_date"], "alias": "not_null_campaigns_silver_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221680.9990396, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "campaigns_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.campaigns_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "start_date", "file_key_name": "models.campaigns_silver", "attached_node": "model.retail_dbt.campaigns_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_date", "model": "{{ get_where_subquery(ref('campaigns_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_campaigns_silver_end_date.36ec8a11c0": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_campaigns_silver_end_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_campaigns_silver_end_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_campaigns_silver_end_date.36ec8a11c0", "fqn": ["retail_dbt", "silver", "not_null_campaigns_silver_end_date"], "alias": "not_null_campaigns_silver_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0001042, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "campaigns_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.campaigns_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_date", "file_key_name": "models.campaigns_silver", "attached_node": "model.retail_dbt.campaigns_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_date", "model": "{{ get_where_subquery(ref('campaigns_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_campaigns_silver_staged_at.782d626fff": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_campaigns_silver_staged_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_campaigns_silver_staged_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_campaigns_silver_staged_at.782d626fff", "fqn": ["retail_dbt", "silver", "not_null_campaigns_silver_staged_at"], "alias": "not_null_campaigns_silver_staged_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.001199, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "campaigns_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.campaigns_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "staged_at", "file_key_name": "models.campaigns_silver", "attached_node": "model.retail_dbt.campaigns_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "staged_at", "model": "{{ get_where_subquery(ref('campaigns_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_categories_silver_category_id.28d2833aa5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_categories_silver_category_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_categories_silver_category_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_categories_silver_category_id.28d2833aa5", "fqn": ["retail_dbt", "silver", "not_null_categories_silver_category_id"], "alias": "not_null_categories_silver_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0023217, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "categories_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.categories_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_id", "file_key_name": "models.categories_silver", "attached_node": "model.retail_dbt.categories_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_id", "model": "{{ get_where_subquery(ref('categories_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_categories_silver_name.9b8db46a0d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_categories_silver_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_categories_silver_name.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_categories_silver_name.9b8db46a0d", "fqn": ["retail_dbt", "silver", "not_null_categories_silver_name"], "alias": "not_null_categories_silver_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0033765, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "categories_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.categories_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.categories_silver", "attached_node": "model.retail_dbt.categories_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('categories_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_categories_silver_staged_at.580eaf4605": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_categories_silver_staged_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_categories_silver_staged_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_categories_silver_staged_at.580eaf4605", "fqn": ["retail_dbt", "silver", "not_null_categories_silver_staged_at"], "alias": "not_null_categories_silver_staged_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0046299, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "categories_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.categories_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "staged_at", "file_key_name": "models.categories_silver", "attached_node": "model.retail_dbt.categories_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "staged_at", "model": "{{ get_where_subquery(ref('categories_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_customer_feedback_silver_feedback_id.3946bdc56e": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_customer_feedback_silver_feedback_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_customer_feedback_silver_feedback_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_customer_feedback_silver_feedback_id.3946bdc56e", "fqn": ["retail_dbt", "silver", "not_null_customer_feedback_silver_feedback_id"], "alias": "not_null_customer_feedback_silver_feedback_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.005703, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customer_feedback_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.customer_feedback_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "feedback_id", "file_key_name": "models.customer_feedback_silver", "attached_node": "model.retail_dbt.customer_feedback_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "feedback_id", "model": "{{ get_where_subquery(ref('customer_feedback_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_customer_feedback_silver_customer_id.bed22c5c35": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_customer_feedback_silver_customer_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_customer_feedback_silver_customer_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_customer_feedback_silver_customer_id.bed22c5c35", "fqn": ["retail_dbt", "silver", "not_null_customer_feedback_silver_customer_id"], "alias": "not_null_customer_feedback_silver_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0068135, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customer_feedback_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.customer_feedback_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.customer_feedback_silver", "attached_node": "model.retail_dbt.customer_feedback_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customer_feedback_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_customer_feedback_silver_store_id.2d5e8f99b2": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_customer_feedback_silver_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_customer_feedback_silver_store_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_customer_feedback_silver_store_id.2d5e8f99b2", "fqn": ["retail_dbt", "silver", "not_null_customer_feedback_silver_store_id"], "alias": "not_null_customer_feedback_silver_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.007957, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customer_feedback_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.customer_feedback_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.customer_feedback_silver", "attached_node": "model.retail_dbt.customer_feedback_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('customer_feedback_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_customer_feedback_silver_product_id.8fb9eeb315": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_customer_feedback_silver_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_customer_feedback_silver_product_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_customer_feedback_silver_product_id.8fb9eeb315", "fqn": ["retail_dbt", "silver", "not_null_customer_feedback_silver_product_id"], "alias": "not_null_customer_feedback_silver_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0090032, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customer_feedback_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.customer_feedback_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.customer_feedback_silver", "attached_node": "model.retail_dbt.customer_feedback_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('customer_feedback_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_customer_feedback_silver_rating.ab5a9630b5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_customer_feedback_silver_rating", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_customer_feedback_silver_rating.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_customer_feedback_silver_rating.ab5a9630b5", "fqn": ["retail_dbt", "silver", "not_null_customer_feedback_silver_rating"], "alias": "not_null_customer_feedback_silver_rating", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0101187, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customer_feedback_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.customer_feedback_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rating", "file_key_name": "models.customer_feedback_silver", "attached_node": "model.retail_dbt.customer_feedback_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "rating", "model": "{{ get_where_subquery(ref('customer_feedback_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_customer_feedback_silver_comments.25e81fd4ae": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_customer_feedback_silver_comments", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_customer_feedback_silver_comments.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_customer_feedback_silver_comments.25e81fd4ae", "fqn": ["retail_dbt", "silver", "not_null_customer_feedback_silver_comments"], "alias": "not_null_customer_feedback_silver_comments", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0112214, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customer_feedback_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.customer_feedback_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "comments", "file_key_name": "models.customer_feedback_silver", "attached_node": "model.retail_dbt.customer_feedback_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "comments", "model": "{{ get_where_subquery(ref('customer_feedback_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_customer_feedback_silver_feedback_date.7c4177c699": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_customer_feedback_silver_feedback_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_customer_feedback_silver_feedback_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_customer_feedback_silver_feedback_date.7c4177c699", "fqn": ["retail_dbt", "silver", "not_null_customer_feedback_silver_feedback_date"], "alias": "not_null_customer_feedback_silver_feedback_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.012253, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customer_feedback_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.customer_feedback_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "feedback_date", "file_key_name": "models.customer_feedback_silver", "attached_node": "model.retail_dbt.customer_feedback_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "feedback_date", "model": "{{ get_where_subquery(ref('customer_feedback_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_customers_silver_customer_id.754b05a681": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_customers_silver_customer_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_customers_silver_customer_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_customers_silver_customer_id.754b05a681", "fqn": ["retail_dbt", "silver", "not_null_customers_silver_customer_id"], "alias": "not_null_customers_silver_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0132914, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customers_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.customers_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.customers_silver", "attached_node": "model.retail_dbt.customers_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_customers_silver_name.864d7a97ce": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_customers_silver_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_customers_silver_name.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_customers_silver_name.864d7a97ce", "fqn": ["retail_dbt", "silver", "not_null_customers_silver_name"], "alias": "not_null_customers_silver_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0143595, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customers_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.customers_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.customers_silver", "attached_node": "model.retail_dbt.customers_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('customers_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_customers_silver_email.6856528552": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_customers_silver_email", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_customers_silver_email.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_customers_silver_email.6856528552", "fqn": ["retail_dbt", "silver", "not_null_customers_silver_email"], "alias": "not_null_customers_silver_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0155218, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customers_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.customers_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "email", "file_key_name": "models.customers_silver", "attached_node": "model.retail_dbt.customers_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ get_where_subquery(ref('customers_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_customers_silver_phone.ca7dddc621": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_customers_silver_phone", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_customers_silver_phone.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_customers_silver_phone.ca7dddc621", "fqn": ["retail_dbt", "silver", "not_null_customers_silver_phone"], "alias": "not_null_customers_silver_phone", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0166395, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customers_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.customers_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "phone", "file_key_name": "models.customers_silver", "attached_node": "model.retail_dbt.customers_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "phone", "model": "{{ get_where_subquery(ref('customers_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_customers_silver_loyalty_program_id.c42d2a00d8": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_customers_silver_loyalty_program_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_customers_silver_loyalty_program_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_customers_silver_loyalty_program_id.c42d2a00d8", "fqn": ["retail_dbt", "silver", "not_null_customers_silver_loyalty_program_id"], "alias": "not_null_customers_silver_loyalty_program_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0176988, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customers_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.customers_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "loyalty_program_id", "file_key_name": "models.customers_silver", "attached_node": "model.retail_dbt.customers_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "loyalty_program_id", "model": "{{ get_where_subquery(ref('customers_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_customers_silver_created_at.f6eb18d9e4": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_customers_silver_created_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_customers_silver_created_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_customers_silver_created_at.f6eb18d9e4", "fqn": ["retail_dbt", "silver", "not_null_customers_silver_created_at"], "alias": "not_null_customers_silver_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0187733, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "customers_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.customers_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.customers_silver", "attached_node": "model.retail_dbt.customers_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('customers_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_discount_rules_silver_rule_id.3bd4495dec": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_discount_rules_silver_rule_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_discount_rules_silver_rule_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_discount_rules_silver_rule_id.3bd4495dec", "fqn": ["retail_dbt", "silver", "not_null_discount_rules_silver_rule_id"], "alias": "not_null_discount_rules_silver_rule_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0199313, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "discount_rules_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.discount_rules_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rule_id", "file_key_name": "models.discount_rules_silver", "attached_node": "model.retail_dbt.discount_rules_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "rule_id", "model": "{{ get_where_subquery(ref('discount_rules_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_discount_rules_silver_product_id.81bef753f4": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_discount_rules_silver_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_discount_rules_silver_product_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_discount_rules_silver_product_id.81bef753f4", "fqn": ["retail_dbt", "silver", "not_null_discount_rules_silver_product_id"], "alias": "not_null_discount_rules_silver_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0212371, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "discount_rules_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.discount_rules_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.discount_rules_silver", "attached_node": "model.retail_dbt.discount_rules_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('discount_rules_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_discount_rules_silver_discount_type.508466577d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_discount_rules_silver_discount_type", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_discount_rules_silver_discount_type.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_discount_rules_silver_discount_type.508466577d", "fqn": ["retail_dbt", "silver", "not_null_discount_rules_silver_discount_type"], "alias": "not_null_discount_rules_silver_discount_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0223176, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "discount_rules_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.discount_rules_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "discount_type", "file_key_name": "models.discount_rules_silver", "attached_node": "model.retail_dbt.discount_rules_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "discount_type", "model": "{{ get_where_subquery(ref('discount_rules_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_discount_rules_silver_value.c62b860389": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_discount_rules_silver_value", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_discount_rules_silver_value.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_discount_rules_silver_value.c62b860389", "fqn": ["retail_dbt", "silver", "not_null_discount_rules_silver_value"], "alias": "not_null_discount_rules_silver_value", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0234027, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "discount_rules_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.discount_rules_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "value", "file_key_name": "models.discount_rules_silver", "attached_node": "model.retail_dbt.discount_rules_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "value", "model": "{{ get_where_subquery(ref('discount_rules_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_discount_rules_silver_valid_from.8c61636ef6": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_discount_rules_silver_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_discount_rules_silver_valid_from.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_discount_rules_silver_valid_from.8c61636ef6", "fqn": ["retail_dbt", "silver", "not_null_discount_rules_silver_valid_from"], "alias": "not_null_discount_rules_silver_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0244675, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "discount_rules_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.discount_rules_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_from", "file_key_name": "models.discount_rules_silver", "attached_node": "model.retail_dbt.discount_rules_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('discount_rules_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_discount_rules_silver_valid_to.b846afb85a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_discount_rules_silver_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_discount_rules_silver_valid_to.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_discount_rules_silver_valid_to.b846afb85a", "fqn": ["retail_dbt", "silver", "not_null_discount_rules_silver_valid_to"], "alias": "not_null_discount_rules_silver_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0254977, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "discount_rules_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.discount_rules_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_to", "file_key_name": "models.discount_rules_silver", "attached_node": "model.retail_dbt.discount_rules_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to", "model": "{{ get_where_subquery(ref('discount_rules_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_employees_silver_employee_id.c69a236ad3": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_employees_silver_employee_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_employees_silver_employee_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_employees_silver_employee_id.c69a236ad3", "fqn": ["retail_dbt", "silver", "not_null_employees_silver_employee_id"], "alias": "not_null_employees_silver_employee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0266063, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "employees_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.employees_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "employee_id", "file_key_name": "models.employees_silver", "attached_node": "model.retail_dbt.employees_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_id", "model": "{{ get_where_subquery(ref('employees_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_employees_silver_name.3812e26daf": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_employees_silver_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_employees_silver_name.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_employees_silver_name.3812e26daf", "fqn": ["retail_dbt", "silver", "not_null_employees_silver_name"], "alias": "not_null_employees_silver_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0276356, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "employees_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.employees_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.employees_silver", "attached_node": "model.retail_dbt.employees_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('employees_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_employees_silver_role.958be5c671": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_employees_silver_role", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_employees_silver_role.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_employees_silver_role.958be5c671", "fqn": ["retail_dbt", "silver", "not_null_employees_silver_role"], "alias": "not_null_employees_silver_role", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0287411, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "employees_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.employees_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "role", "file_key_name": "models.employees_silver", "attached_node": "model.retail_dbt.employees_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "role", "model": "{{ get_where_subquery(ref('employees_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_employees_silver_store_id.0e962c8015": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_employees_silver_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_employees_silver_store_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_employees_silver_store_id.0e962c8015", "fqn": ["retail_dbt", "silver", "not_null_employees_silver_store_id"], "alias": "not_null_employees_silver_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0298128, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "employees_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.employees_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.employees_silver", "attached_node": "model.retail_dbt.employees_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('employees_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_inventory_silver_inventory_id.b8e25e2251": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_inventory_silver_inventory_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_inventory_silver_inventory_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_inventory_silver_inventory_id.b8e25e2251", "fqn": ["retail_dbt", "silver", "not_null_inventory_silver_inventory_id"], "alias": "not_null_inventory_silver_inventory_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.030855, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "inventory_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.inventory_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "inventory_id", "file_key_name": "models.inventory_silver", "attached_node": "model.retail_dbt.inventory_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "inventory_id", "model": "{{ get_where_subquery(ref('inventory_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_inventory_silver_store_id.b0a34febbd": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_inventory_silver_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_inventory_silver_store_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_inventory_silver_store_id.b0a34febbd", "fqn": ["retail_dbt", "silver", "not_null_inventory_silver_store_id"], "alias": "not_null_inventory_silver_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0319097, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "inventory_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.inventory_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.inventory_silver", "attached_node": "model.retail_dbt.inventory_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('inventory_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_inventory_silver_product_id.d0a7b9584f": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_inventory_silver_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_inventory_silver_product_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_inventory_silver_product_id.d0a7b9584f", "fqn": ["retail_dbt", "silver", "not_null_inventory_silver_product_id"], "alias": "not_null_inventory_silver_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0336206, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "inventory_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.inventory_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.inventory_silver", "attached_node": "model.retail_dbt.inventory_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('inventory_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_inventory_silver_quantity.ea309d107b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_inventory_silver_quantity", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_inventory_silver_quantity.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_inventory_silver_quantity.ea309d107b", "fqn": ["retail_dbt", "silver", "not_null_inventory_silver_quantity"], "alias": "not_null_inventory_silver_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0347438, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "inventory_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.inventory_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "quantity", "file_key_name": "models.inventory_silver", "attached_node": "model.retail_dbt.inventory_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "quantity", "model": "{{ get_where_subquery(ref('inventory_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_inventory_silver_last_updated.0342be2bb9": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_inventory_silver_last_updated", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_inventory_silver_last_updated.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_inventory_silver_last_updated.0342be2bb9", "fqn": ["retail_dbt", "silver", "not_null_inventory_silver_last_updated"], "alias": "not_null_inventory_silver_last_updated", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0358174, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "inventory_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.inventory_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_updated", "file_key_name": "models.inventory_silver", "attached_node": "model.retail_dbt.inventory_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_updated", "model": "{{ get_where_subquery(ref('inventory_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_loyalty_programs_silver_loyalty_program_id.b5828a7162": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_loyalty_programs_silver_loyalty_program_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_loyalty_programs_silver_loyalty_program_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_loyalty_programs_silver_loyalty_program_id.b5828a7162", "fqn": ["retail_dbt", "silver", "not_null_loyalty_programs_silver_loyalty_program_id"], "alias": "not_null_loyalty_programs_silver_loyalty_program_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0368867, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "loyalty_programs_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.loyalty_programs_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "loyalty_program_id", "file_key_name": "models.loyalty_programs_silver", "attached_node": "model.retail_dbt.loyalty_programs_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "loyalty_program_id", "model": "{{ get_where_subquery(ref('loyalty_programs_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_loyalty_programs_silver_name.89b9e901e2": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_loyalty_programs_silver_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_loyalty_programs_silver_name.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_loyalty_programs_silver_name.89b9e901e2", "fqn": ["retail_dbt", "silver", "not_null_loyalty_programs_silver_name"], "alias": "not_null_loyalty_programs_silver_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0379436, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "loyalty_programs_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.loyalty_programs_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.loyalty_programs_silver", "attached_node": "model.retail_dbt.loyalty_programs_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('loyalty_programs_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_loyalty_programs_silver_points_per_dollar.b30f4d0a71": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_loyalty_programs_silver_points_per_dollar", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_loyalty_programs_silver_points_per_dollar.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_loyalty_programs_silver_points_per_dollar.b30f4d0a71", "fqn": ["retail_dbt", "silver", "not_null_loyalty_programs_silver_points_per_dollar"], "alias": "not_null_loyalty_programs_silver_points_per_dollar", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.039335, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "loyalty_programs_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.loyalty_programs_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "points_per_dollar", "file_key_name": "models.loyalty_programs_silver", "attached_node": "model.retail_dbt.loyalty_programs_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "points_per_dollar", "model": "{{ get_where_subquery(ref('loyalty_programs_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_payments_silver_payment_id.c1d20ab72b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_payments_silver_payment_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_payments_silver_payment_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_payments_silver_payment_id.c1d20ab72b", "fqn": ["retail_dbt", "silver", "not_null_payments_silver_payment_id"], "alias": "not_null_payments_silver_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0409136, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "payments_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.payments_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.payments_silver", "attached_node": "model.retail_dbt.payments_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('payments_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_payments_silver_method.de459907f5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_payments_silver_method", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_payments_silver_method.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_payments_silver_method.de459907f5", "fqn": ["retail_dbt", "silver", "not_null_payments_silver_method"], "alias": "not_null_payments_silver_method", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0425153, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "payments_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.payments_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "method", "file_key_name": "models.payments_silver", "attached_node": "model.retail_dbt.payments_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "method", "model": "{{ get_where_subquery(ref('payments_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_payments_silver_status.c2c4b77279": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_payments_silver_status", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_payments_silver_status.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_payments_silver_status.c2c4b77279", "fqn": ["retail_dbt", "silver", "not_null_payments_silver_status"], "alias": "not_null_payments_silver_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.043643, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "payments_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.payments_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "status", "file_key_name": "models.payments_silver", "attached_node": "model.retail_dbt.payments_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "status", "model": "{{ get_where_subquery(ref('payments_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_payments_silver_paid_at.fb99aa72f2": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_payments_silver_paid_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_payments_silver_paid_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_payments_silver_paid_at.fb99aa72f2", "fqn": ["retail_dbt", "silver", "not_null_payments_silver_paid_at"], "alias": "not_null_payments_silver_paid_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0446827, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "payments_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.payments_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "paid_at", "file_key_name": "models.payments_silver", "attached_node": "model.retail_dbt.payments_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "paid_at", "model": "{{ get_where_subquery(ref('payments_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_pricing_history_silver_history_id.e867959250": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_pricing_history_silver_history_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_pricing_history_silver_history_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_pricing_history_silver_history_id.e867959250", "fqn": ["retail_dbt", "silver", "not_null_pricing_history_silver_history_id"], "alias": "not_null_pricing_history_silver_history_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.045847, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "pricing_history_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.pricing_history_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "history_id", "file_key_name": "models.pricing_history_silver", "attached_node": "model.retail_dbt.pricing_history_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "history_id", "model": "{{ get_where_subquery(ref('pricing_history_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_pricing_history_silver_product_id.35adcf9c8d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_pricing_history_silver_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_pricing_history_silver_product_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_pricing_history_silver_product_id.35adcf9c8d", "fqn": ["retail_dbt", "silver", "not_null_pricing_history_silver_product_id"], "alias": "not_null_pricing_history_silver_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0468981, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "pricing_history_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.pricing_history_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.pricing_history_silver", "attached_node": "model.retail_dbt.pricing_history_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('pricing_history_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_pricing_history_silver_price.b1fde7cb52": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_pricing_history_silver_price", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_pricing_history_silver_price.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_pricing_history_silver_price.b1fde7cb52", "fqn": ["retail_dbt", "silver", "not_null_pricing_history_silver_price"], "alias": "not_null_pricing_history_silver_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0480907, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "pricing_history_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.pricing_history_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price", "file_key_name": "models.pricing_history_silver", "attached_node": "model.retail_dbt.pricing_history_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('pricing_history_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_pricing_history_silver_effective_date.e4ecdc8dc4": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_pricing_history_silver_effective_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_pricing_history_silver_effective_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_pricing_history_silver_effective_date.e4ecdc8dc4", "fqn": ["retail_dbt", "silver", "not_null_pricing_history_silver_effective_date"], "alias": "not_null_pricing_history_silver_effective_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.049159, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "pricing_history_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.pricing_history_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "effective_date", "file_key_name": "models.pricing_history_silver", "attached_node": "model.retail_dbt.pricing_history_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "effective_date", "model": "{{ get_where_subquery(ref('pricing_history_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_products_silver_product_id.ac9520ee8d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_products_silver_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_products_silver_product_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_products_silver_product_id.ac9520ee8d", "fqn": ["retail_dbt", "silver", "not_null_products_silver_product_id"], "alias": "not_null_products_silver_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.050291, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "products_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.products_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.products_silver", "attached_node": "model.retail_dbt.products_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('products_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_products_silver_name.2eb427bac7": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_products_silver_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_products_silver_name.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_products_silver_name.2eb427bac7", "fqn": ["retail_dbt", "silver", "not_null_products_silver_name"], "alias": "not_null_products_silver_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.051449, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "products_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.products_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.products_silver", "attached_node": "model.retail_dbt.products_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('products_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_products_silver_category_id.2a4206bc12": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_products_silver_category_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_products_silver_category_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_products_silver_category_id.2a4206bc12", "fqn": ["retail_dbt", "silver", "not_null_products_silver_category_id"], "alias": "not_null_products_silver_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0525749, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "products_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.products_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_id", "file_key_name": "models.products_silver", "attached_node": "model.retail_dbt.products_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_id", "model": "{{ get_where_subquery(ref('products_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_products_silver_brand_id.e24a5ce560": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_products_silver_brand_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_products_silver_brand_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_products_silver_brand_id.e24a5ce560", "fqn": ["retail_dbt", "silver", "not_null_products_silver_brand_id"], "alias": "not_null_products_silver_brand_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.053628, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "products_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.products_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "brand_id", "file_key_name": "models.products_silver", "attached_node": "model.retail_dbt.products_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "brand_id", "model": "{{ get_where_subquery(ref('products_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_products_silver_supplier_id.f8bf6dd3c6": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_products_silver_supplier_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_products_silver_supplier_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_products_silver_supplier_id.f8bf6dd3c6", "fqn": ["retail_dbt", "silver", "not_null_products_silver_supplier_id"], "alias": "not_null_products_silver_supplier_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0547326, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "products_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.products_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "supplier_id", "file_key_name": "models.products_silver", "attached_node": "model.retail_dbt.products_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_id", "model": "{{ get_where_subquery(ref('products_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_products_silver_price.1d7617dbc8": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_products_silver_price", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_products_silver_price.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_products_silver_price.1d7617dbc8", "fqn": ["retail_dbt", "silver", "not_null_products_silver_price"], "alias": "not_null_products_silver_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0557697, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "products_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.products_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price", "file_key_name": "models.products_silver", "attached_node": "model.retail_dbt.products_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('products_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_products_silver_created_at.f661bb341b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_products_silver_created_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_products_silver_created_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_products_silver_created_at.f661bb341b", "fqn": ["retail_dbt", "silver", "not_null_products_silver_created_at"], "alias": "not_null_products_silver_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.056935, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "products_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.products_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.products_silver", "attached_node": "model.retail_dbt.products_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('products_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_products_silver_season.93161b0991": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_products_silver_season", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_products_silver_season.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_products_silver_season.93161b0991", "fqn": ["retail_dbt", "silver", "not_null_products_silver_season"], "alias": "not_null_products_silver_season", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0579834, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "products_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.products_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "season", "file_key_name": "models.products_silver", "attached_node": "model.retail_dbt.products_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "season", "model": "{{ get_where_subquery(ref('products_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_promotions_silver_promotion_id.b988028c60": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_promotions_silver_promotion_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_promotions_silver_promotion_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_promotions_silver_promotion_id.b988028c60", "fqn": ["retail_dbt", "silver", "not_null_promotions_silver_promotion_id"], "alias": "not_null_promotions_silver_promotion_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0590396, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "promotions_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.promotions_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "promotion_id", "file_key_name": "models.promotions_silver", "attached_node": "model.retail_dbt.promotions_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "promotion_id", "model": "{{ get_where_subquery(ref('promotions_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_promotions_silver_name.6337430c9c": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_promotions_silver_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_promotions_silver_name.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_promotions_silver_name.6337430c9c", "fqn": ["retail_dbt", "silver", "not_null_promotions_silver_name"], "alias": "not_null_promotions_silver_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0600548, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "promotions_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.promotions_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.promotions_silver", "attached_node": "model.retail_dbt.promotions_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('promotions_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_promotions_silver_start_date.9d08c0ea43": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_promotions_silver_start_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_promotions_silver_start_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_promotions_silver_start_date.9d08c0ea43", "fqn": ["retail_dbt", "silver", "not_null_promotions_silver_start_date"], "alias": "not_null_promotions_silver_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0611935, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "promotions_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.promotions_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "start_date", "file_key_name": "models.promotions_silver", "attached_node": "model.retail_dbt.promotions_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_date", "model": "{{ get_where_subquery(ref('promotions_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_promotions_silver_end_date.a8843536c8": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_promotions_silver_end_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_promotions_silver_end_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_promotions_silver_end_date.a8843536c8", "fqn": ["retail_dbt", "silver", "not_null_promotions_silver_end_date"], "alias": "not_null_promotions_silver_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0622668, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "promotions_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.promotions_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_date", "file_key_name": "models.promotions_silver", "attached_node": "model.retail_dbt.promotions_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_date", "model": "{{ get_where_subquery(ref('promotions_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_purchase_orders_silver_order_id.465030e034": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_purchase_orders_silver_order_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_purchase_orders_silver_order_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_purchase_orders_silver_order_id.465030e034", "fqn": ["retail_dbt", "silver", "not_null_purchase_orders_silver_order_id"], "alias": "not_null_purchase_orders_silver_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0634701, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "purchase_orders_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.purchase_orders_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.purchase_orders_silver", "attached_node": "model.retail_dbt.purchase_orders_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('purchase_orders_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_purchase_orders_silver_supplier_id.ec936eb5b5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_purchase_orders_silver_supplier_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_purchase_orders_silver_supplier_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_purchase_orders_silver_supplier_id.ec936eb5b5", "fqn": ["retail_dbt", "silver", "not_null_purchase_orders_silver_supplier_id"], "alias": "not_null_purchase_orders_silver_supplier_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0645263, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "purchase_orders_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.purchase_orders_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "supplier_id", "file_key_name": "models.purchase_orders_silver", "attached_node": "model.retail_dbt.purchase_orders_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_id", "model": "{{ get_where_subquery(ref('purchase_orders_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_purchase_orders_silver_order_date.763925638d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_purchase_orders_silver_order_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_purchase_orders_silver_order_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_purchase_orders_silver_order_date.763925638d", "fqn": ["retail_dbt", "silver", "not_null_purchase_orders_silver_order_date"], "alias": "not_null_purchase_orders_silver_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.065577, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "purchase_orders_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.purchase_orders_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.purchase_orders_silver", "attached_node": "model.retail_dbt.purchase_orders_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('purchase_orders_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_purchase_orders_silver_status.c17b884943": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_purchase_orders_silver_status", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_purchase_orders_silver_status.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_purchase_orders_silver_status.c17b884943", "fqn": ["retail_dbt", "silver", "not_null_purchase_orders_silver_status"], "alias": "not_null_purchase_orders_silver_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.066635, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "purchase_orders_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.purchase_orders_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "status", "file_key_name": "models.purchase_orders_silver", "attached_node": "model.retail_dbt.purchase_orders_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "status", "model": "{{ get_where_subquery(ref('purchase_orders_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_returns_silver_return_id.5102a4a0a2": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_returns_silver_return_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_returns_silver_return_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_returns_silver_return_id.5102a4a0a2", "fqn": ["retail_dbt", "silver", "not_null_returns_silver_return_id"], "alias": "not_null_returns_silver_return_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0677752, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "returns_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.returns_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_id", "file_key_name": "models.returns_silver", "attached_node": "model.retail_dbt.returns_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "return_id", "model": "{{ get_where_subquery(ref('returns_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_returns_silver_item_id.c11f187f38": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_returns_silver_item_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_returns_silver_item_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_returns_silver_item_id.c11f187f38", "fqn": ["retail_dbt", "silver", "not_null_returns_silver_item_id"], "alias": "not_null_returns_silver_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.068928, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "returns_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.returns_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_id", "file_key_name": "models.returns_silver", "attached_node": "model.retail_dbt.returns_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('returns_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_returns_silver_reason.4566784310": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_returns_silver_reason", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_returns_silver_reason.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_returns_silver_reason.4566784310", "fqn": ["retail_dbt", "silver", "not_null_returns_silver_reason"], "alias": "not_null_returns_silver_reason", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0700154, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "returns_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.returns_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "reason", "file_key_name": "models.returns_silver", "attached_node": "model.retail_dbt.returns_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "reason", "model": "{{ get_where_subquery(ref('returns_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_returns_silver_return_date.d4c90371c5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_returns_silver_return_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_returns_silver_return_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_returns_silver_return_date.d4c90371c5", "fqn": ["retail_dbt", "silver", "not_null_returns_silver_return_date"], "alias": "not_null_returns_silver_return_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0710714, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "returns_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.returns_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_date", "file_key_name": "models.returns_silver", "attached_node": "model.retail_dbt.returns_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "return_date", "model": "{{ get_where_subquery(ref('returns_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_items_silver_item_id.db1727c955": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_items_silver_item_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_items_silver_item_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_items_silver_item_id.db1727c955", "fqn": ["retail_dbt", "silver", "not_null_sales_items_silver_item_id"], "alias": "not_null_sales_items_silver_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0721092, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_items_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_items_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_id", "file_key_name": "models.sales_items_silver", "attached_node": "model.retail_dbt.sales_items_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('sales_items_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_items_silver_transaction_id.47979a6b46": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_items_silver_transaction_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_items_silver_transaction_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_items_silver_transaction_id.47979a6b46", "fqn": ["retail_dbt", "silver", "not_null_sales_items_silver_transaction_id"], "alias": "not_null_sales_items_silver_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0732112, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_items_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_items_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_id", "file_key_name": "models.sales_items_silver", "attached_node": "model.retail_dbt.sales_items_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('sales_items_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_items_silver_product_id.d90d226a0c": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_items_silver_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_items_silver_product_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_items_silver_product_id.d90d226a0c", "fqn": ["retail_dbt", "silver", "not_null_sales_items_silver_product_id"], "alias": "not_null_sales_items_silver_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0743752, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_items_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_items_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.sales_items_silver", "attached_node": "model.retail_dbt.sales_items_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('sales_items_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_items_silver_quantity.541fc853cd": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_items_silver_quantity", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_items_silver_quantity.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_items_silver_quantity.541fc853cd", "fqn": ["retail_dbt", "silver", "not_null_sales_items_silver_quantity"], "alias": "not_null_sales_items_silver_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0754993, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_items_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_items_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "quantity", "file_key_name": "models.sales_items_silver", "attached_node": "model.retail_dbt.sales_items_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "quantity", "model": "{{ get_where_subquery(ref('sales_items_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_items_silver_unit_price.83bc8f6f4b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_items_silver_unit_price", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_items_silver_unit_price.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_items_silver_unit_price.83bc8f6f4b", "fqn": ["retail_dbt", "silver", "not_null_sales_items_silver_unit_price"], "alias": "not_null_sales_items_silver_unit_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.07655, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_items_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_items_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unit_price", "file_key_name": "models.sales_items_silver", "attached_node": "model.retail_dbt.sales_items_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "unit_price", "model": "{{ get_where_subquery(ref('sales_items_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_items_silver_discount.7062a6a5ed": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_items_silver_discount", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_items_silver_discount.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_items_silver_discount.7062a6a5ed", "fqn": ["retail_dbt", "silver", "not_null_sales_items_silver_discount"], "alias": "not_null_sales_items_silver_discount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.077658, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_items_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_items_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "discount", "file_key_name": "models.sales_items_silver", "attached_node": "model.retail_dbt.sales_items_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "discount", "model": "{{ get_where_subquery(ref('sales_items_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_items_silver_tax.d8eacf8588": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_items_silver_tax", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_items_silver_tax.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_items_silver_tax.d8eacf8588", "fqn": ["retail_dbt", "silver", "not_null_sales_items_silver_tax"], "alias": "not_null_sales_items_silver_tax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0787323, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_items_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_items_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax", "file_key_name": "models.sales_items_silver", "attached_node": "model.retail_dbt.sales_items_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax", "model": "{{ get_where_subquery(ref('sales_items_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_items_silver_gross_amount.a4eef2ff4d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_items_silver_gross_amount", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_items_silver_gross_amount.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_items_silver_gross_amount.a4eef2ff4d", "fqn": ["retail_dbt", "silver", "not_null_sales_items_silver_gross_amount"], "alias": "not_null_sales_items_silver_gross_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0798566, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_items_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_items_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "gross_amount", "file_key_name": "models.sales_items_silver", "attached_node": "model.retail_dbt.sales_items_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gross_amount", "model": "{{ get_where_subquery(ref('sales_items_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_items_silver_net_amount.afde194730": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_items_silver_net_amount", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_items_silver_net_amount.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_items_silver_net_amount.afde194730", "fqn": ["retail_dbt", "silver", "not_null_sales_items_silver_net_amount"], "alias": "not_null_sales_items_silver_net_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.080907, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_items_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_items_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "net_amount", "file_key_name": "models.sales_items_silver", "attached_node": "model.retail_dbt.sales_items_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "net_amount", "model": "{{ get_where_subquery(ref('sales_items_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_items_silver_business_validation_flag.fc94ea645a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_items_silver_business_validation_flag", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_items_silver_business_validation_flag.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_items_silver_business_validation_flag.fc94ea645a", "fqn": ["retail_dbt", "silver", "not_null_sales_items_silver_business_validation_flag"], "alias": "not_null_sales_items_silver_business_validation_flag", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0819845, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_items_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_items_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "business_validation_flag", "file_key_name": "models.sales_items_silver", "attached_node": "model.retail_dbt.sales_items_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "business_validation_flag", "model": "{{ get_where_subquery(ref('sales_items_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_transactions_silver_transaction_id.736115426b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_transactions_silver_transaction_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_transactions_silver_transaction_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_transactions_silver_transaction_id.736115426b", "fqn": ["retail_dbt", "silver", "not_null_sales_transactions_silver_transaction_id"], "alias": "not_null_sales_transactions_silver_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0831015, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_transactions_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_transactions_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_id", "file_key_name": "models.sales_transactions_silver", "attached_node": "model.retail_dbt.sales_transactions_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('sales_transactions_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_transactions_silver_customer_id.0cba059371": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_transactions_silver_customer_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_transactions_silver_customer_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_transactions_silver_customer_id.0cba059371", "fqn": ["retail_dbt", "silver", "not_null_sales_transactions_silver_customer_id"], "alias": "not_null_sales_transactions_silver_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0842519, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_transactions_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_transactions_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.sales_transactions_silver", "attached_node": "model.retail_dbt.sales_transactions_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('sales_transactions_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_transactions_silver_store_id.3c2472f6c0": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_transactions_silver_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_transactions_silver_store_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_transactions_silver_store_id.3c2472f6c0", "fqn": ["retail_dbt", "silver", "not_null_sales_transactions_silver_store_id"], "alias": "not_null_sales_transactions_silver_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.085393, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_transactions_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_transactions_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.sales_transactions_silver", "attached_node": "model.retail_dbt.sales_transactions_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('sales_transactions_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_transactions_silver_employee_id.088a404cad": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_transactions_silver_employee_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_transactions_silver_employee_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_transactions_silver_employee_id.088a404cad", "fqn": ["retail_dbt", "silver", "not_null_sales_transactions_silver_employee_id"], "alias": "not_null_sales_transactions_silver_employee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.086458, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_transactions_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_transactions_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "employee_id", "file_key_name": "models.sales_transactions_silver", "attached_node": "model.retail_dbt.sales_transactions_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_id", "model": "{{ get_where_subquery(ref('sales_transactions_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_transactions_silver_transaction_date.59131f37e7": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_transactions_silver_transaction_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_transactions_silver_transaction_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_transactions_silver_transaction_date.59131f37e7", "fqn": ["retail_dbt", "silver", "not_null_sales_transactions_silver_transaction_date"], "alias": "not_null_sales_transactions_silver_transaction_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0876544, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_transactions_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_transactions_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_date", "file_key_name": "models.sales_transactions_silver", "attached_node": "model.retail_dbt.sales_transactions_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_date", "model": "{{ get_where_subquery(ref('sales_transactions_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_transactions_silver_total_amount.6e07d2cc0f": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_transactions_silver_total_amount", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_transactions_silver_total_amount.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_transactions_silver_total_amount.6e07d2cc0f", "fqn": ["retail_dbt", "silver", "not_null_sales_transactions_silver_total_amount"], "alias": "not_null_sales_transactions_silver_total_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0887792, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_transactions_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_transactions_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_amount", "file_key_name": "models.sales_transactions_silver", "attached_node": "model.retail_dbt.sales_transactions_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_amount", "model": "{{ get_where_subquery(ref('sales_transactions_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_sales_transactions_silver_payment_id.020fe22706": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_sales_transactions_silver_payment_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_sales_transactions_silver_payment_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_sales_transactions_silver_payment_id.020fe22706", "fqn": ["retail_dbt", "silver", "not_null_sales_transactions_silver_payment_id"], "alias": "not_null_sales_transactions_silver_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0898342, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "sales_transactions_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.sales_transactions_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.sales_transactions_silver", "attached_node": "model.retail_dbt.sales_transactions_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('sales_transactions_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_shipments_silver_shipment_id.ab52987a98": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_shipments_silver_shipment_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_shipments_silver_shipment_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_shipments_silver_shipment_id.ab52987a98", "fqn": ["retail_dbt", "silver", "not_null_shipments_silver_shipment_id"], "alias": "not_null_shipments_silver_shipment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0909445, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "shipments_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.shipments_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipment_id", "file_key_name": "models.shipments_silver", "attached_node": "model.retail_dbt.shipments_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shipment_id", "model": "{{ get_where_subquery(ref('shipments_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_shipments_silver_order_id.6b7ddbfc6b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_shipments_silver_order_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_shipments_silver_order_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_shipments_silver_order_id.6b7ddbfc6b", "fqn": ["retail_dbt", "silver", "not_null_shipments_silver_order_id"], "alias": "not_null_shipments_silver_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0920978, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "shipments_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.shipments_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.shipments_silver", "attached_node": "model.retail_dbt.shipments_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('shipments_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_shipments_silver_store_id.cd277ca902": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_shipments_silver_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_shipments_silver_store_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_shipments_silver_store_id.cd277ca902", "fqn": ["retail_dbt", "silver", "not_null_shipments_silver_store_id"], "alias": "not_null_shipments_silver_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0931282, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "shipments_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.shipments_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.shipments_silver", "attached_node": "model.retail_dbt.shipments_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('shipments_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_shipments_silver_shipped_date.75a36020ee": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_shipments_silver_shipped_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_shipments_silver_shipped_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_shipments_silver_shipped_date.75a36020ee", "fqn": ["retail_dbt", "silver", "not_null_shipments_silver_shipped_date"], "alias": "not_null_shipments_silver_shipped_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0941627, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "shipments_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.shipments_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipped_date", "file_key_name": "models.shipments_silver", "attached_node": "model.retail_dbt.shipments_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shipped_date", "model": "{{ get_where_subquery(ref('shipments_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_shipments_silver_received_date.a083993648": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_shipments_silver_received_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_shipments_silver_received_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_shipments_silver_received_date.a083993648", "fqn": ["retail_dbt", "silver", "not_null_shipments_silver_received_date"], "alias": "not_null_shipments_silver_received_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0951927, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "shipments_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.shipments_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "received_date", "file_key_name": "models.shipments_silver", "attached_node": "model.retail_dbt.shipments_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "received_date", "model": "{{ get_where_subquery(ref('shipments_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_stock_movements_silver_movement_id.9441e6c7bf": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_stock_movements_silver_movement_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_stock_movements_silver_movement_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_stock_movements_silver_movement_id.9441e6c7bf", "fqn": ["retail_dbt", "silver", "not_null_stock_movements_silver_movement_id"], "alias": "not_null_stock_movements_silver_movement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0962837, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stock_movements_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.stock_movements_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "movement_id", "file_key_name": "models.stock_movements_silver", "attached_node": "model.retail_dbt.stock_movements_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "movement_id", "model": "{{ get_where_subquery(ref('stock_movements_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_stock_movements_silver_product_id.893e7e84b1": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_stock_movements_silver_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_stock_movements_silver_product_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_stock_movements_silver_product_id.893e7e84b1", "fqn": ["retail_dbt", "silver", "not_null_stock_movements_silver_product_id"], "alias": "not_null_stock_movements_silver_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.097446, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stock_movements_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.stock_movements_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.stock_movements_silver", "attached_node": "model.retail_dbt.stock_movements_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stock_movements_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_stock_movements_silver_store_id.87dd62d582": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_stock_movements_silver_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_stock_movements_silver_store_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_stock_movements_silver_store_id.87dd62d582", "fqn": ["retail_dbt", "silver", "not_null_stock_movements_silver_store_id"], "alias": "not_null_stock_movements_silver_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0985274, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stock_movements_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.stock_movements_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.stock_movements_silver", "attached_node": "model.retail_dbt.stock_movements_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('stock_movements_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_stock_movements_silver_movement_type.a5e3a59630": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_stock_movements_silver_movement_type", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_stock_movements_silver_movement_type.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_stock_movements_silver_movement_type.a5e3a59630", "fqn": ["retail_dbt", "silver", "not_null_stock_movements_silver_movement_type"], "alias": "not_null_stock_movements_silver_movement_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.0995705, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stock_movements_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.stock_movements_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "movement_type", "file_key_name": "models.stock_movements_silver", "attached_node": "model.retail_dbt.stock_movements_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "movement_type", "model": "{{ get_where_subquery(ref('stock_movements_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_stock_movements_silver_quantity.2ffe698ded": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_stock_movements_silver_quantity", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_stock_movements_silver_quantity.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_stock_movements_silver_quantity.2ffe698ded", "fqn": ["retail_dbt", "silver", "not_null_stock_movements_silver_quantity"], "alias": "not_null_stock_movements_silver_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1007857, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stock_movements_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.stock_movements_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "quantity", "file_key_name": "models.stock_movements_silver", "attached_node": "model.retail_dbt.stock_movements_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "quantity", "model": "{{ get_where_subquery(ref('stock_movements_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_stock_movements_silver_movement_date.efe72dd68d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_stock_movements_silver_movement_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_stock_movements_silver_movement_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_stock_movements_silver_movement_date.efe72dd68d", "fqn": ["retail_dbt", "silver", "not_null_stock_movements_silver_movement_date"], "alias": "not_null_stock_movements_silver_movement_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.101929, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stock_movements_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.stock_movements_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "movement_date", "file_key_name": "models.stock_movements_silver", "attached_node": "model.retail_dbt.stock_movements_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "movement_date", "model": "{{ get_where_subquery(ref('stock_movements_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_store_visits_silver_visit_id.04f76e4203": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_store_visits_silver_visit_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_store_visits_silver_visit_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_store_visits_silver_visit_id.04f76e4203", "fqn": ["retail_dbt", "silver", "not_null_store_visits_silver_visit_id"], "alias": "not_null_store_visits_silver_visit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1031904, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "store_visits_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.store_visits_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visit_id", "file_key_name": "models.store_visits_silver", "attached_node": "model.retail_dbt.store_visits_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_id", "model": "{{ get_where_subquery(ref('store_visits_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_store_visits_silver_customer_id.57f338221d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_store_visits_silver_customer_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_store_visits_silver_customer_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_store_visits_silver_customer_id.57f338221d", "fqn": ["retail_dbt", "silver", "not_null_store_visits_silver_customer_id"], "alias": "not_null_store_visits_silver_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1042714, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "store_visits_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.store_visits_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.store_visits_silver", "attached_node": "model.retail_dbt.store_visits_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('store_visits_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_store_visits_silver_store_id.4276ef5282": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_store_visits_silver_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_store_visits_silver_store_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_store_visits_silver_store_id.4276ef5282", "fqn": ["retail_dbt", "silver", "not_null_store_visits_silver_store_id"], "alias": "not_null_store_visits_silver_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1053271, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "store_visits_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.store_visits_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.store_visits_silver", "attached_node": "model.retail_dbt.store_visits_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('store_visits_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_store_visits_silver_visit_date.adefa3499d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_store_visits_silver_visit_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_store_visits_silver_visit_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_store_visits_silver_visit_date.adefa3499d", "fqn": ["retail_dbt", "silver", "not_null_store_visits_silver_visit_date"], "alias": "not_null_store_visits_silver_visit_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1063936, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "store_visits_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.store_visits_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visit_date", "file_key_name": "models.store_visits_silver", "attached_node": "model.retail_dbt.store_visits_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_date", "model": "{{ get_where_subquery(ref('store_visits_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_stores_silver_store_id.7b5b9ac097": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_stores_silver_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_stores_silver_store_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_stores_silver_store_id.7b5b9ac097", "fqn": ["retail_dbt", "silver", "not_null_stores_silver_store_id"], "alias": "not_null_stores_silver_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1074862, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stores_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.stores_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.stores_silver", "attached_node": "model.retail_dbt.stores_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('stores_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_stores_silver_name.c7d29b75c3": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_stores_silver_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_stores_silver_name.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_stores_silver_name.c7d29b75c3", "fqn": ["retail_dbt", "silver", "not_null_stores_silver_name"], "alias": "not_null_stores_silver_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1085658, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stores_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.stores_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.stores_silver", "attached_node": "model.retail_dbt.stores_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stores_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_stores_silver_location.9e197b2d81": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_stores_silver_location", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_stores_silver_location.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_stores_silver_location.9e197b2d81", "fqn": ["retail_dbt", "silver", "not_null_stores_silver_location"], "alias": "not_null_stores_silver_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1096592, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stores_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.stores_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "location", "file_key_name": "models.stores_silver", "attached_node": "model.retail_dbt.stores_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "location", "model": "{{ get_where_subquery(ref('stores_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_stores_silver_manager_id.c3c7ff2ffa": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_stores_silver_manager_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_stores_silver_manager_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_stores_silver_manager_id.c3c7ff2ffa", "fqn": ["retail_dbt", "silver", "not_null_stores_silver_manager_id"], "alias": "not_null_stores_silver_manager_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1107574, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stores_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.stores_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "manager_id", "file_key_name": "models.stores_silver", "attached_node": "model.retail_dbt.stores_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "manager_id", "model": "{{ get_where_subquery(ref('stores_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_suppliers_silver_supplier_id.82e9077042": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_suppliers_silver_supplier_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_suppliers_silver_supplier_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_suppliers_silver_supplier_id.82e9077042", "fqn": ["retail_dbt", "silver", "not_null_suppliers_silver_supplier_id"], "alias": "not_null_suppliers_silver_supplier_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1118844, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "suppliers_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.suppliers_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "supplier_id", "file_key_name": "models.suppliers_silver", "attached_node": "model.retail_dbt.suppliers_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_id", "model": "{{ get_where_subquery(ref('suppliers_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_suppliers_silver_name.61cee018b3": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_suppliers_silver_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_suppliers_silver_name.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_suppliers_silver_name.61cee018b3", "fqn": ["retail_dbt", "silver", "not_null_suppliers_silver_name"], "alias": "not_null_suppliers_silver_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1129847, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "suppliers_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.suppliers_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.suppliers_silver", "attached_node": "model.retail_dbt.suppliers_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('suppliers_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_suppliers_silver_contact_info.a90509e888": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_suppliers_silver_contact_info", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_suppliers_silver_contact_info.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_suppliers_silver_contact_info.a90509e888", "fqn": ["retail_dbt", "silver", "not_null_suppliers_silver_contact_info"], "alias": "not_null_suppliers_silver_contact_info", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1141844, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "suppliers_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.suppliers_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "contact_info", "file_key_name": "models.suppliers_silver", "attached_node": "model.retail_dbt.suppliers_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_info", "model": "{{ get_where_subquery(ref('suppliers_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_tax_rules_silver_tax_id.24ed2c7254": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_tax_rules_silver_tax_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_tax_rules_silver_tax_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_tax_rules_silver_tax_id.24ed2c7254", "fqn": ["retail_dbt", "silver", "not_null_tax_rules_silver_tax_id"], "alias": "not_null_tax_rules_silver_tax_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1153612, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "tax_rules_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.tax_rules_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_id", "file_key_name": "models.tax_rules_silver", "attached_node": "model.retail_dbt.tax_rules_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_id", "model": "{{ get_where_subquery(ref('tax_rules_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_tax_rules_silver_product_id.1223163e5d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_tax_rules_silver_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_tax_rules_silver_product_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_tax_rules_silver_product_id.1223163e5d", "fqn": ["retail_dbt", "silver", "not_null_tax_rules_silver_product_id"], "alias": "not_null_tax_rules_silver_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.116459, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "tax_rules_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.tax_rules_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.tax_rules_silver", "attached_node": "model.retail_dbt.tax_rules_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('tax_rules_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_tax_rules_silver_tax_rate.8f3dac0898": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_tax_rules_silver_tax_rate", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_tax_rules_silver_tax_rate.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_tax_rules_silver_tax_rate.8f3dac0898", "fqn": ["retail_dbt", "silver", "not_null_tax_rules_silver_tax_rate"], "alias": "not_null_tax_rules_silver_tax_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1175616, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "tax_rules_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.tax_rules_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_rate", "file_key_name": "models.tax_rules_silver", "attached_node": "model.retail_dbt.tax_rules_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_rate", "model": "{{ get_where_subquery(ref('tax_rules_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_tax_rules_silver_region.c6687fdd21": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_tax_rules_silver_region", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_tax_rules_silver_region.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.retail_dbt.not_null_tax_rules_silver_region.c6687fdd21", "fqn": ["retail_dbt", "silver", "not_null_tax_rules_silver_region"], "alias": "not_null_tax_rules_silver_region", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1186094, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "tax_rules_silver", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.tax_rules_silver"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "region", "file_key_name": "models.tax_rules_silver", "attached_node": "model.retail_dbt.tax_rules_silver", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "region", "model": "{{ get_where_subquery(ref('tax_rules_silver')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_brands_scd_brand_id.3b2e1b3772": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_brands_scd_brand_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_brands_scd_brand_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_brands_scd_brand_id.3b2e1b3772", "fqn": ["retail_dbt", "golden", "not_null_dim_brands_scd_brand_id"], "alias": "not_null_dim_brands_scd_brand_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1518397, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_brands_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_brands_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "brand_id", "file_key_name": "models.dim_brands_scd", "attached_node": "model.retail_dbt.dim_brands_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "brand_id", "model": "{{ get_where_subquery(ref('dim_brands_scd')) }}"}, "namespace": null}}, "test.retail_dbt.unique_dim_brands_scd_brand_id.559997024c": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_dim_brands_scd_brand_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_dim_brands_scd_brand_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_dim_brands_scd_brand_id.559997024c", "fqn": ["retail_dbt", "golden", "unique_dim_brands_scd_brand_id"], "alias": "unique_dim_brands_scd_brand_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1530888, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_brands_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.dim_brands_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "brand_id", "file_key_name": "models.dim_brands_scd", "attached_node": "model.retail_dbt.dim_brands_scd", "test_metadata": {"name": "unique", "kwargs": {"column_name": "brand_id", "model": "{{ get_where_subquery(ref('dim_brands_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_brands_scd_name.c6466cd9a4": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_brands_scd_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_brands_scd_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_brands_scd_name.c6466cd9a4", "fqn": ["retail_dbt", "golden", "not_null_dim_brands_scd_name"], "alias": "not_null_dim_brands_scd_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1541693, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_brands_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_brands_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.dim_brands_scd", "attached_node": "model.retail_dbt.dim_brands_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_brands_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_brands_scd_staged_at.c1b687ebe5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_brands_scd_staged_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_brands_scd_staged_at.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_brands_scd_staged_at.c1b687ebe5", "fqn": ["retail_dbt", "golden", "not_null_dim_brands_scd_staged_at"], "alias": "not_null_dim_brands_scd_staged_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1553671, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_brands_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_brands_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "staged_at", "file_key_name": "models.dim_brands_scd", "attached_node": "model.retail_dbt.dim_brands_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "staged_at", "model": "{{ get_where_subquery(ref('dim_brands_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_brands_scd_dbt_scd_id.ad68bfdaf6": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_brands_scd_dbt_scd_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_brands_scd_dbt_scd_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_brands_scd_dbt_scd_id.ad68bfdaf6", "fqn": ["retail_dbt", "golden", "not_null_dim_brands_scd_dbt_scd_id"], "alias": "not_null_dim_brands_scd_dbt_scd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1565485, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_brands_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_brands_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_scd_id", "file_key_name": "models.dim_brands_scd", "attached_node": "model.retail_dbt.dim_brands_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_scd_id", "model": "{{ get_where_subquery(ref('dim_brands_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_brands_scd_dbt_updated_at.909731b239": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_brands_scd_dbt_updated_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_brands_scd_dbt_updated_at.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_brands_scd_dbt_updated_at.909731b239", "fqn": ["retail_dbt", "golden", "not_null_dim_brands_scd_dbt_updated_at"], "alias": "not_null_dim_brands_scd_dbt_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1576698, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_brands_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_brands_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_updated_at", "file_key_name": "models.dim_brands_scd", "attached_node": "model.retail_dbt.dim_brands_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_updated_at", "model": "{{ get_where_subquery(ref('dim_brands_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_brands_scd_dbt_valid_from.3d7351d295": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_brands_scd_dbt_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_brands_scd_dbt_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_brands_scd_dbt_valid_from.3d7351d295", "fqn": ["retail_dbt", "golden", "not_null_dim_brands_scd_dbt_valid_from"], "alias": "not_null_dim_brands_scd_dbt_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.158733, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_brands_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_brands_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_from", "file_key_name": "models.dim_brands_scd", "attached_node": "model.retail_dbt.dim_brands_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_from", "model": "{{ get_where_subquery(ref('dim_brands_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_brands_scd_dbt_valid_to.dfae77005a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_brands_scd_dbt_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_brands_scd_dbt_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_brands_scd_dbt_valid_to.dfae77005a", "fqn": ["retail_dbt", "golden", "not_null_dim_brands_scd_dbt_valid_to"], "alias": "not_null_dim_brands_scd_dbt_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1597896, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_brands_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_brands_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_to", "file_key_name": "models.dim_brands_scd", "attached_node": "model.retail_dbt.dim_brands_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_to", "model": "{{ get_where_subquery(ref('dim_brands_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_brands_scd_brand_sk.d9538046e5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_brands_scd_brand_sk", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_brands_scd_brand_sk.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_brands_scd_brand_sk.d9538046e5", "fqn": ["retail_dbt", "golden", "not_null_dim_brands_scd_brand_sk"], "alias": "not_null_dim_brands_scd_brand_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1608336, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_brands_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_brands_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "brand_sk", "file_key_name": "models.dim_brands_scd", "attached_node": "model.retail_dbt.dim_brands_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "brand_sk", "model": "{{ get_where_subquery(ref('dim_brands_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_brands_scd_valid_from.56ca0ccdfa": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_brands_scd_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_brands_scd_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_brands_scd_valid_from.56ca0ccdfa", "fqn": ["retail_dbt", "golden", "not_null_dim_brands_scd_valid_from"], "alias": "not_null_dim_brands_scd_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.161992, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_brands_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_brands_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_from", "file_key_name": "models.dim_brands_scd", "attached_node": "model.retail_dbt.dim_brands_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('dim_brands_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_brands_scd_valid_to.c5332449c0": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_brands_scd_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_brands_scd_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_brands_scd_valid_to.c5332449c0", "fqn": ["retail_dbt", "golden", "not_null_dim_brands_scd_valid_to"], "alias": "not_null_dim_brands_scd_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1634595, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_brands_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_brands_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_to", "file_key_name": "models.dim_brands_scd", "attached_node": "model.retail_dbt.dim_brands_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to", "model": "{{ get_where_subquery(ref('dim_brands_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_brands_scd_is_current.80ce1d1c55": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_brands_scd_is_current", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_brands_scd_is_current.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_brands_scd_is_current.80ce1d1c55", "fqn": ["retail_dbt", "golden", "not_null_dim_brands_scd_is_current"], "alias": "not_null_dim_brands_scd_is_current", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1645172, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_brands_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_brands_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_current", "file_key_name": "models.dim_brands_scd", "attached_node": "model.retail_dbt.dim_brands_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_current", "model": "{{ get_where_subquery(ref('dim_brands_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_campaigns_campaign_id.b113a46344": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_campaigns_campaign_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_campaigns_campaign_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_campaigns_campaign_id.b113a46344", "fqn": ["retail_dbt", "golden", "not_null_dim_campaigns_campaign_id"], "alias": "not_null_dim_campaigns_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1655781, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_campaigns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "campaign_id", "file_key_name": "models.dim_campaigns", "attached_node": "model.retail_dbt.dim_campaigns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('dim_campaigns')) }}"}, "namespace": null}}, "test.retail_dbt.unique_dim_campaigns_campaign_id.efba50e300": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_dim_campaigns_campaign_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_dim_campaigns_campaign_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_dim_campaigns_campaign_id.efba50e300", "fqn": ["retail_dbt", "golden", "unique_dim_campaigns_campaign_id"], "alias": "unique_dim_campaigns_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1666782, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.dim_campaigns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "campaign_id", "file_key_name": "models.dim_campaigns", "attached_node": "model.retail_dbt.dim_campaigns", "test_metadata": {"name": "unique", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('dim_campaigns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_campaigns_name.96fa971944": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_campaigns_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_campaigns_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_campaigns_name.96fa971944", "fqn": ["retail_dbt", "golden", "not_null_dim_campaigns_name"], "alias": "not_null_dim_campaigns_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1677985, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_campaigns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.dim_campaigns", "attached_node": "model.retail_dbt.dim_campaigns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_campaigns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_campaigns_budget.2df449c486": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_campaigns_budget", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_campaigns_budget.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_campaigns_budget.2df449c486", "fqn": ["retail_dbt", "golden", "not_null_dim_campaigns_budget"], "alias": "not_null_dim_campaigns_budget", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1689975, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_campaigns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "budget", "file_key_name": "models.dim_campaigns", "attached_node": "model.retail_dbt.dim_campaigns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget", "model": "{{ get_where_subquery(ref('dim_campaigns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_campaigns_start_date.482b5b3761": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_campaigns_start_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_campaigns_start_date.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_campaigns_start_date.482b5b3761", "fqn": ["retail_dbt", "golden", "not_null_dim_campaigns_start_date"], "alias": "not_null_dim_campaigns_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1700778, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_campaigns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "start_date", "file_key_name": "models.dim_campaigns", "attached_node": "model.retail_dbt.dim_campaigns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_date", "model": "{{ get_where_subquery(ref('dim_campaigns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_campaigns_end_date.1c340a76b4": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_campaigns_end_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_campaigns_end_date.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_campaigns_end_date.1c340a76b4", "fqn": ["retail_dbt", "golden", "not_null_dim_campaigns_end_date"], "alias": "not_null_dim_campaigns_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.171162, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_campaigns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_date", "file_key_name": "models.dim_campaigns", "attached_node": "model.retail_dbt.dim_campaigns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_date", "model": "{{ get_where_subquery(ref('dim_campaigns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_campaigns_staged_at.8cda809396": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_campaigns_staged_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_campaigns_staged_at.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_campaigns_staged_at.8cda809396", "fqn": ["retail_dbt", "golden", "not_null_dim_campaigns_staged_at"], "alias": "not_null_dim_campaigns_staged_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1721926, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_campaigns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "staged_at", "file_key_name": "models.dim_campaigns", "attached_node": "model.retail_dbt.dim_campaigns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "staged_at", "model": "{{ get_where_subquery(ref('dim_campaigns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_categories_scd_category_id.d57e3f2fe4": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_categories_scd_category_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_categories_scd_category_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_categories_scd_category_id.d57e3f2fe4", "fqn": ["retail_dbt", "golden", "not_null_dim_categories_scd_category_id"], "alias": "not_null_dim_categories_scd_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1732373, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_categories_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_categories_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_id", "file_key_name": "models.dim_categories_scd", "attached_node": "model.retail_dbt.dim_categories_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_id", "model": "{{ get_where_subquery(ref('dim_categories_scd')) }}"}, "namespace": null}}, "test.retail_dbt.unique_dim_categories_scd_category_id.a547519caa": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_dim_categories_scd_category_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_dim_categories_scd_category_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_dim_categories_scd_category_id.a547519caa", "fqn": ["retail_dbt", "golden", "unique_dim_categories_scd_category_id"], "alias": "unique_dim_categories_scd_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1743596, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_categories_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.dim_categories_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_id", "file_key_name": "models.dim_categories_scd", "attached_node": "model.retail_dbt.dim_categories_scd", "test_metadata": {"name": "unique", "kwargs": {"column_name": "category_id", "model": "{{ get_where_subquery(ref('dim_categories_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_categories_scd_name.e1787b6126": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_categories_scd_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_categories_scd_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_categories_scd_name.e1787b6126", "fqn": ["retail_dbt", "golden", "not_null_dim_categories_scd_name"], "alias": "not_null_dim_categories_scd_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.175463, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_categories_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_categories_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.dim_categories_scd", "attached_node": "model.retail_dbt.dim_categories_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_categories_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_categories_scd_staged_at.03ba82dab0": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_categories_scd_staged_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_categories_scd_staged_at.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_categories_scd_staged_at.03ba82dab0", "fqn": ["retail_dbt", "golden", "not_null_dim_categories_scd_staged_at"], "alias": "not_null_dim_categories_scd_staged_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.176513, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_categories_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_categories_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "staged_at", "file_key_name": "models.dim_categories_scd", "attached_node": "model.retail_dbt.dim_categories_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "staged_at", "model": "{{ get_where_subquery(ref('dim_categories_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_categories_scd_dbt_scd_id.dd413e98d8": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_categories_scd_dbt_scd_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_categories_scd_dbt_scd_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_categories_scd_dbt_scd_id.dd413e98d8", "fqn": ["retail_dbt", "golden", "not_null_dim_categories_scd_dbt_scd_id"], "alias": "not_null_dim_categories_scd_dbt_scd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.177987, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_categories_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_categories_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_scd_id", "file_key_name": "models.dim_categories_scd", "attached_node": "model.retail_dbt.dim_categories_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_scd_id", "model": "{{ get_where_subquery(ref('dim_categories_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_categories_scd_dbt_updated_at.db8d94fc39": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_categories_scd_dbt_updated_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_categories_scd_dbt_updated_at.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_categories_scd_dbt_updated_at.db8d94fc39", "fqn": ["retail_dbt", "golden", "not_null_dim_categories_scd_dbt_updated_at"], "alias": "not_null_dim_categories_scd_dbt_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1794457, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_categories_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_categories_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_updated_at", "file_key_name": "models.dim_categories_scd", "attached_node": "model.retail_dbt.dim_categories_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_updated_at", "model": "{{ get_where_subquery(ref('dim_categories_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_categories_scd_dbt_valid_from.f655d038ca": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_categories_scd_dbt_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_categories_scd_dbt_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_categories_scd_dbt_valid_from.f655d038ca", "fqn": ["retail_dbt", "golden", "not_null_dim_categories_scd_dbt_valid_from"], "alias": "not_null_dim_categories_scd_dbt_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.180695, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_categories_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_categories_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_from", "file_key_name": "models.dim_categories_scd", "attached_node": "model.retail_dbt.dim_categories_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_from", "model": "{{ get_where_subquery(ref('dim_categories_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_categories_scd_dbt_valid_to.997f516640": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_categories_scd_dbt_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_categories_scd_dbt_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_categories_scd_dbt_valid_to.997f516640", "fqn": ["retail_dbt", "golden", "not_null_dim_categories_scd_dbt_valid_to"], "alias": "not_null_dim_categories_scd_dbt_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1818404, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_categories_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_categories_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_to", "file_key_name": "models.dim_categories_scd", "attached_node": "model.retail_dbt.dim_categories_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_to", "model": "{{ get_where_subquery(ref('dim_categories_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_categories_scd_category_sk.96df2a66cf": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_categories_scd_category_sk", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_categories_scd_category_sk.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_categories_scd_category_sk.96df2a66cf", "fqn": ["retail_dbt", "golden", "not_null_dim_categories_scd_category_sk"], "alias": "not_null_dim_categories_scd_category_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1829562, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_categories_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_categories_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_sk", "file_key_name": "models.dim_categories_scd", "attached_node": "model.retail_dbt.dim_categories_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_sk", "model": "{{ get_where_subquery(ref('dim_categories_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_categories_scd_valid_from.3f6c56d686": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_categories_scd_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_categories_scd_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_categories_scd_valid_from.3f6c56d686", "fqn": ["retail_dbt", "golden", "not_null_dim_categories_scd_valid_from"], "alias": "not_null_dim_categories_scd_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1840465, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_categories_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_categories_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_from", "file_key_name": "models.dim_categories_scd", "attached_node": "model.retail_dbt.dim_categories_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('dim_categories_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_categories_scd_valid_to.39024b6046": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_categories_scd_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_categories_scd_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_categories_scd_valid_to.39024b6046", "fqn": ["retail_dbt", "golden", "not_null_dim_categories_scd_valid_to"], "alias": "not_null_dim_categories_scd_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1851184, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_categories_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_categories_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_to", "file_key_name": "models.dim_categories_scd", "attached_node": "model.retail_dbt.dim_categories_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to", "model": "{{ get_where_subquery(ref('dim_categories_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_categories_scd_is_current.e82f2605e7": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_categories_scd_is_current", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_categories_scd_is_current.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_categories_scd_is_current.e82f2605e7", "fqn": ["retail_dbt", "golden", "not_null_dim_categories_scd_is_current"], "alias": "not_null_dim_categories_scd_is_current", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1862683, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_categories_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_categories_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_current", "file_key_name": "models.dim_categories_scd", "attached_node": "model.retail_dbt.dim_categories_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_current", "model": "{{ get_where_subquery(ref('dim_categories_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_customers_scd_customer_id.56933c880b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_customers_scd_customer_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_customers_scd_customer_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_customers_scd_customer_id.56933c880b", "fqn": ["retail_dbt", "golden", "not_null_dim_customers_scd_customer_id"], "alias": "not_null_dim_customers_scd_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1873574, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_customers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.dim_customers_scd", "attached_node": "model.retail_dbt.dim_customers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('dim_customers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.unique_dim_customers_scd_customer_id.2b326f2086": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_dim_customers_scd_customer_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_dim_customers_scd_customer_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_dim_customers_scd_customer_id.2b326f2086", "fqn": ["retail_dbt", "golden", "unique_dim_customers_scd_customer_id"], "alias": "unique_dim_customers_scd_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.18841, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.dim_customers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.dim_customers_scd", "attached_node": "model.retail_dbt.dim_customers_scd", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('dim_customers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_customers_scd_name.26c4fede0b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_customers_scd_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_customers_scd_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_customers_scd_name.26c4fede0b", "fqn": ["retail_dbt", "golden", "not_null_dim_customers_scd_name"], "alias": "not_null_dim_customers_scd_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.189456, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_customers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.dim_customers_scd", "attached_node": "model.retail_dbt.dim_customers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_customers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_customers_scd_email.dca7a01a3a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_customers_scd_email", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_customers_scd_email.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_customers_scd_email.dca7a01a3a", "fqn": ["retail_dbt", "golden", "not_null_dim_customers_scd_email"], "alias": "not_null_dim_customers_scd_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1905105, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_customers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "email", "file_key_name": "models.dim_customers_scd", "attached_node": "model.retail_dbt.dim_customers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ get_where_subquery(ref('dim_customers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_customers_scd_phone.eaebcaf4c2": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_customers_scd_phone", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_customers_scd_phone.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_customers_scd_phone.eaebcaf4c2", "fqn": ["retail_dbt", "golden", "not_null_dim_customers_scd_phone"], "alias": "not_null_dim_customers_scd_phone", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.191575, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_customers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "phone", "file_key_name": "models.dim_customers_scd", "attached_node": "model.retail_dbt.dim_customers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "phone", "model": "{{ get_where_subquery(ref('dim_customers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_customers_scd_loyalty_program_id.98d673395a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_customers_scd_loyalty_program_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_customers_scd_loyalty_program_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_customers_scd_loyalty_program_id.98d673395a", "fqn": ["retail_dbt", "golden", "not_null_dim_customers_scd_loyalty_program_id"], "alias": "not_null_dim_customers_scd_loyalty_program_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1926942, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_customers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "loyalty_program_id", "file_key_name": "models.dim_customers_scd", "attached_node": "model.retail_dbt.dim_customers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "loyalty_program_id", "model": "{{ get_where_subquery(ref('dim_customers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_customers_scd_created_at.6b44bd0165": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_customers_scd_created_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_customers_scd_created_at.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_customers_scd_created_at.6b44bd0165", "fqn": ["retail_dbt", "golden", "not_null_dim_customers_scd_created_at"], "alias": "not_null_dim_customers_scd_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1938045, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_customers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.dim_customers_scd", "attached_node": "model.retail_dbt.dim_customers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('dim_customers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_customers_scd_dbt_scd_id.793c4db6f3": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_customers_scd_dbt_scd_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_customers_scd_dbt_scd_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_customers_scd_dbt_scd_id.793c4db6f3", "fqn": ["retail_dbt", "golden", "not_null_dim_customers_scd_dbt_scd_id"], "alias": "not_null_dim_customers_scd_dbt_scd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1949327, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_customers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_scd_id", "file_key_name": "models.dim_customers_scd", "attached_node": "model.retail_dbt.dim_customers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_scd_id", "model": "{{ get_where_subquery(ref('dim_customers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_customers_scd_dbt_updated_at.5585ab9cdd": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_customers_scd_dbt_updated_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_customers_scd_dbt_updated_at.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_customers_scd_dbt_updated_at.5585ab9cdd", "fqn": ["retail_dbt", "golden", "not_null_dim_customers_scd_dbt_updated_at"], "alias": "not_null_dim_customers_scd_dbt_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1960268, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_customers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_updated_at", "file_key_name": "models.dim_customers_scd", "attached_node": "model.retail_dbt.dim_customers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_updated_at", "model": "{{ get_where_subquery(ref('dim_customers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_customers_scd_dbt_valid_from.5ed37ae6c3": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_customers_scd_dbt_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_customers_scd_dbt_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_customers_scd_dbt_valid_from.5ed37ae6c3", "fqn": ["retail_dbt", "golden", "not_null_dim_customers_scd_dbt_valid_from"], "alias": "not_null_dim_customers_scd_dbt_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1971009, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_customers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_from", "file_key_name": "models.dim_customers_scd", "attached_node": "model.retail_dbt.dim_customers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_from", "model": "{{ get_where_subquery(ref('dim_customers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_customers_scd_dbt_valid_to.ac2963c119": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_customers_scd_dbt_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_customers_scd_dbt_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_customers_scd_dbt_valid_to.ac2963c119", "fqn": ["retail_dbt", "golden", "not_null_dim_customers_scd_dbt_valid_to"], "alias": "not_null_dim_customers_scd_dbt_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.198242, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_customers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_to", "file_key_name": "models.dim_customers_scd", "attached_node": "model.retail_dbt.dim_customers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_to", "model": "{{ get_where_subquery(ref('dim_customers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_customers_scd_customer_sk.a516213f73": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_customers_scd_customer_sk", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_customers_scd_customer_sk.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_customers_scd_customer_sk.a516213f73", "fqn": ["retail_dbt", "golden", "not_null_dim_customers_scd_customer_sk"], "alias": "not_null_dim_customers_scd_customer_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.1993058, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_customers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_sk", "file_key_name": "models.dim_customers_scd", "attached_node": "model.retail_dbt.dim_customers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_sk", "model": "{{ get_where_subquery(ref('dim_customers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_customers_scd_valid_from.d76146eb84": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_customers_scd_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_customers_scd_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_customers_scd_valid_from.d76146eb84", "fqn": ["retail_dbt", "golden", "not_null_dim_customers_scd_valid_from"], "alias": "not_null_dim_customers_scd_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2003615, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_customers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_from", "file_key_name": "models.dim_customers_scd", "attached_node": "model.retail_dbt.dim_customers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('dim_customers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_customers_scd_valid_to.6e22a57601": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_customers_scd_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_customers_scd_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_customers_scd_valid_to.6e22a57601", "fqn": ["retail_dbt", "golden", "not_null_dim_customers_scd_valid_to"], "alias": "not_null_dim_customers_scd_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2014456, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_customers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_to", "file_key_name": "models.dim_customers_scd", "attached_node": "model.retail_dbt.dim_customers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to", "model": "{{ get_where_subquery(ref('dim_customers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_customers_scd_is_current.18e6f7ab8f": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_customers_scd_is_current", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_customers_scd_is_current.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_customers_scd_is_current.18e6f7ab8f", "fqn": ["retail_dbt", "golden", "not_null_dim_customers_scd_is_current"], "alias": "not_null_dim_customers_scd_is_current", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.202507, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_customers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_current", "file_key_name": "models.dim_customers_scd", "attached_node": "model.retail_dbt.dim_customers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_current", "model": "{{ get_where_subquery(ref('dim_customers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_discount_rules_rule_id.bea823b062": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_discount_rules_rule_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_discount_rules_rule_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_discount_rules_rule_id.bea823b062", "fqn": ["retail_dbt", "golden", "not_null_dim_discount_rules_rule_id"], "alias": "not_null_dim_discount_rules_rule_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2036412, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_discount_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_discount_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rule_id", "file_key_name": "models.dim_discount_rules", "attached_node": "model.retail_dbt.dim_discount_rules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "rule_id", "model": "{{ get_where_subquery(ref('dim_discount_rules')) }}"}, "namespace": null}}, "test.retail_dbt.unique_dim_discount_rules_rule_id.2d4022ebb6": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_dim_discount_rules_rule_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_dim_discount_rules_rule_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_dim_discount_rules_rule_id.2d4022ebb6", "fqn": ["retail_dbt", "golden", "unique_dim_discount_rules_rule_id"], "alias": "unique_dim_discount_rules_rule_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2046893, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_discount_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.dim_discount_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rule_id", "file_key_name": "models.dim_discount_rules", "attached_node": "model.retail_dbt.dim_discount_rules", "test_metadata": {"name": "unique", "kwargs": {"column_name": "rule_id", "model": "{{ get_where_subquery(ref('dim_discount_rules')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_discount_rules_product_id.8ab02eea4b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_discount_rules_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_discount_rules_product_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_discount_rules_product_id.8ab02eea4b", "fqn": ["retail_dbt", "golden", "not_null_dim_discount_rules_product_id"], "alias": "not_null_dim_discount_rules_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2057233, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_discount_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_discount_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.dim_discount_rules", "attached_node": "model.retail_dbt.dim_discount_rules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('dim_discount_rules')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_discount_rules_discount_type.a759a6bff8": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_discount_rules_discount_type", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_discount_rules_discount_type.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_discount_rules_discount_type.a759a6bff8", "fqn": ["retail_dbt", "golden", "not_null_dim_discount_rules_discount_type"], "alias": "not_null_dim_discount_rules_discount_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2068264, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_discount_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_discount_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "discount_type", "file_key_name": "models.dim_discount_rules", "attached_node": "model.retail_dbt.dim_discount_rules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "discount_type", "model": "{{ get_where_subquery(ref('dim_discount_rules')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_discount_rules_value.e6ec5427b6": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_discount_rules_value", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_discount_rules_value.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_discount_rules_value.e6ec5427b6", "fqn": ["retail_dbt", "golden", "not_null_dim_discount_rules_value"], "alias": "not_null_dim_discount_rules_value", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.207901, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_discount_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_discount_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "value", "file_key_name": "models.dim_discount_rules", "attached_node": "model.retail_dbt.dim_discount_rules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "value", "model": "{{ get_where_subquery(ref('dim_discount_rules')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_discount_rules_valid_from.96af6b93c0": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_discount_rules_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_discount_rules_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_discount_rules_valid_from.96af6b93c0", "fqn": ["retail_dbt", "golden", "not_null_dim_discount_rules_valid_from"], "alias": "not_null_dim_discount_rules_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.209186, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_discount_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_discount_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_from", "file_key_name": "models.dim_discount_rules", "attached_node": "model.retail_dbt.dim_discount_rules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('dim_discount_rules')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_discount_rules_valid_to.42ac252875": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_discount_rules_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_discount_rules_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_discount_rules_valid_to.42ac252875", "fqn": ["retail_dbt", "golden", "not_null_dim_discount_rules_valid_to"], "alias": "not_null_dim_discount_rules_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2102804, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_discount_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_discount_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_to", "file_key_name": "models.dim_discount_rules", "attached_node": "model.retail_dbt.dim_discount_rules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to", "model": "{{ get_where_subquery(ref('dim_discount_rules')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_employees_scd_employee_id.8522bc8cd3": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_employees_scd_employee_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_employees_scd_employee_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_employees_scd_employee_id.8522bc8cd3", "fqn": ["retail_dbt", "golden", "not_null_dim_employees_scd_employee_id"], "alias": "not_null_dim_employees_scd_employee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2113252, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_employees_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_employees_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "employee_id", "file_key_name": "models.dim_employees_scd", "attached_node": "model.retail_dbt.dim_employees_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_id", "model": "{{ get_where_subquery(ref('dim_employees_scd')) }}"}, "namespace": null}}, "test.retail_dbt.unique_dim_employees_scd_employee_id.60d37e9021": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_dim_employees_scd_employee_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_dim_employees_scd_employee_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_dim_employees_scd_employee_id.60d37e9021", "fqn": ["retail_dbt", "golden", "unique_dim_employees_scd_employee_id"], "alias": "unique_dim_employees_scd_employee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2123857, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_employees_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.dim_employees_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "employee_id", "file_key_name": "models.dim_employees_scd", "attached_node": "model.retail_dbt.dim_employees_scd", "test_metadata": {"name": "unique", "kwargs": {"column_name": "employee_id", "model": "{{ get_where_subquery(ref('dim_employees_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_employees_scd_name.de3a965790": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_employees_scd_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_employees_scd_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_employees_scd_name.de3a965790", "fqn": ["retail_dbt", "golden", "not_null_dim_employees_scd_name"], "alias": "not_null_dim_employees_scd_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.213445, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_employees_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_employees_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.dim_employees_scd", "attached_node": "model.retail_dbt.dim_employees_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_employees_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_employees_scd_role.4466e0f8a7": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_employees_scd_role", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_employees_scd_role.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_employees_scd_role.4466e0f8a7", "fqn": ["retail_dbt", "golden", "not_null_dim_employees_scd_role"], "alias": "not_null_dim_employees_scd_role", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.214697, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_employees_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_employees_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "role", "file_key_name": "models.dim_employees_scd", "attached_node": "model.retail_dbt.dim_employees_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "role", "model": "{{ get_where_subquery(ref('dim_employees_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_employees_scd_store_id.8b22391c15": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_employees_scd_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_employees_scd_store_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_employees_scd_store_id.8b22391c15", "fqn": ["retail_dbt", "golden", "not_null_dim_employees_scd_store_id"], "alias": "not_null_dim_employees_scd_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2157598, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_employees_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_employees_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.dim_employees_scd", "attached_node": "model.retail_dbt.dim_employees_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('dim_employees_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_employees_scd_dbt_scd_id.f47f324dd6": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_employees_scd_dbt_scd_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_employees_scd_dbt_scd_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_employees_scd_dbt_scd_id.f47f324dd6", "fqn": ["retail_dbt", "golden", "not_null_dim_employees_scd_dbt_scd_id"], "alias": "not_null_dim_employees_scd_dbt_scd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2168195, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_employees_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_employees_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_scd_id", "file_key_name": "models.dim_employees_scd", "attached_node": "model.retail_dbt.dim_employees_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_scd_id", "model": "{{ get_where_subquery(ref('dim_employees_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_employees_scd_dbt_updated_at.bcf03562d7": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_employees_scd_dbt_updated_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_employees_scd_dbt_updated_at.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_employees_scd_dbt_updated_at.bcf03562d7", "fqn": ["retail_dbt", "golden", "not_null_dim_employees_scd_dbt_updated_at"], "alias": "not_null_dim_employees_scd_dbt_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2178957, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_employees_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_employees_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_updated_at", "file_key_name": "models.dim_employees_scd", "attached_node": "model.retail_dbt.dim_employees_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_updated_at", "model": "{{ get_where_subquery(ref('dim_employees_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_employees_scd_dbt_valid_from.a49438694c": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_employees_scd_dbt_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_employees_scd_dbt_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_employees_scd_dbt_valid_from.a49438694c", "fqn": ["retail_dbt", "golden", "not_null_dim_employees_scd_dbt_valid_from"], "alias": "not_null_dim_employees_scd_dbt_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2189782, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_employees_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_employees_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_from", "file_key_name": "models.dim_employees_scd", "attached_node": "model.retail_dbt.dim_employees_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_from", "model": "{{ get_where_subquery(ref('dim_employees_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_employees_scd_dbt_valid_to.d1aead151a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_employees_scd_dbt_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_employees_scd_dbt_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_employees_scd_dbt_valid_to.d1aead151a", "fqn": ["retail_dbt", "golden", "not_null_dim_employees_scd_dbt_valid_to"], "alias": "not_null_dim_employees_scd_dbt_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2200413, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_employees_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_employees_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_to", "file_key_name": "models.dim_employees_scd", "attached_node": "model.retail_dbt.dim_employees_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_to", "model": "{{ get_where_subquery(ref('dim_employees_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_employees_scd_employee_sk.46b10e0100": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_employees_scd_employee_sk", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_employees_scd_employee_sk.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_employees_scd_employee_sk.46b10e0100", "fqn": ["retail_dbt", "golden", "not_null_dim_employees_scd_employee_sk"], "alias": "not_null_dim_employees_scd_employee_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.221177, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_employees_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_employees_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "employee_sk", "file_key_name": "models.dim_employees_scd", "attached_node": "model.retail_dbt.dim_employees_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_sk", "model": "{{ get_where_subquery(ref('dim_employees_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_employees_scd_valid_from.18363deeac": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_employees_scd_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_employees_scd_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_employees_scd_valid_from.18363deeac", "fqn": ["retail_dbt", "golden", "not_null_dim_employees_scd_valid_from"], "alias": "not_null_dim_employees_scd_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2222266, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_employees_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_employees_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_from", "file_key_name": "models.dim_employees_scd", "attached_node": "model.retail_dbt.dim_employees_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('dim_employees_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_employees_scd_valid_to.a3ee7e82d3": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_employees_scd_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_employees_scd_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_employees_scd_valid_to.a3ee7e82d3", "fqn": ["retail_dbt", "golden", "not_null_dim_employees_scd_valid_to"], "alias": "not_null_dim_employees_scd_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2233481, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_employees_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_employees_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_to", "file_key_name": "models.dim_employees_scd", "attached_node": "model.retail_dbt.dim_employees_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to", "model": "{{ get_where_subquery(ref('dim_employees_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_employees_scd_is_current.e8e5357df2": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_employees_scd_is_current", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_employees_scd_is_current.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_employees_scd_is_current.e8e5357df2", "fqn": ["retail_dbt", "golden", "not_null_dim_employees_scd_is_current"], "alias": "not_null_dim_employees_scd_is_current", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2244625, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_employees_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_employees_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_current", "file_key_name": "models.dim_employees_scd", "attached_node": "model.retail_dbt.dim_employees_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_current", "model": "{{ get_where_subquery(ref('dim_employees_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_loyalty_programs_scd_loyalty_program_id.e84dfa91aa": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_loyalty_programs_scd_loyalty_program_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_loyalty_programs_scd_loyalty_program_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_loyalty_programs_scd_loyalty_program_id.e84dfa91aa", "fqn": ["retail_dbt", "golden", "not_null_dim_loyalty_programs_scd_loyalty_program_id"], "alias": "not_null_dim_loyalty_programs_scd_loyalty_program_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.225616, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_loyalty_programs_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_loyalty_programs_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "loyalty_program_id", "file_key_name": "models.dim_loyalty_programs_scd", "attached_node": "model.retail_dbt.dim_loyalty_programs_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "loyalty_program_id", "model": "{{ get_where_subquery(ref('dim_loyalty_programs_scd')) }}"}, "namespace": null}}, "test.retail_dbt.unique_dim_loyalty_programs_scd_loyalty_program_id.3e227fa805": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_dim_loyalty_programs_scd_loyalty_program_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_dim_loyalty_programs_scd_loyalty_program_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_dim_loyalty_programs_scd_loyalty_program_id.3e227fa805", "fqn": ["retail_dbt", "golden", "unique_dim_loyalty_programs_scd_loyalty_program_id"], "alias": "unique_dim_loyalty_programs_scd_loyalty_program_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2268345, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_loyalty_programs_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.dim_loyalty_programs_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "loyalty_program_id", "file_key_name": "models.dim_loyalty_programs_scd", "attached_node": "model.retail_dbt.dim_loyalty_programs_scd", "test_metadata": {"name": "unique", "kwargs": {"column_name": "loyalty_program_id", "model": "{{ get_where_subquery(ref('dim_loyalty_programs_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_loyalty_programs_scd_name.3db7e3f58a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_loyalty_programs_scd_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_loyalty_programs_scd_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_loyalty_programs_scd_name.3db7e3f58a", "fqn": ["retail_dbt", "golden", "not_null_dim_loyalty_programs_scd_name"], "alias": "not_null_dim_loyalty_programs_scd_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2279036, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_loyalty_programs_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_loyalty_programs_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.dim_loyalty_programs_scd", "attached_node": "model.retail_dbt.dim_loyalty_programs_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_loyalty_programs_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_loyalty_programs_scd_points_per_dollar.efe31e239c": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_loyalty_programs_scd_points_per_dollar", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_loyalty_programs_scd_points_per_dollar.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_loyalty_programs_scd_points_per_dollar.efe31e239c", "fqn": ["retail_dbt", "golden", "not_null_dim_loyalty_programs_scd_points_per_dollar"], "alias": "not_null_dim_loyalty_programs_scd_points_per_dollar", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2289634, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_loyalty_programs_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_loyalty_programs_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "points_per_dollar", "file_key_name": "models.dim_loyalty_programs_scd", "attached_node": "model.retail_dbt.dim_loyalty_programs_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "points_per_dollar", "model": "{{ get_where_subquery(ref('dim_loyalty_programs_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_scd_id.038f10ad7b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_loyalty_programs_scd_dbt_scd_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_loyalty_programs_scd_dbt_scd_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_scd_id.038f10ad7b", "fqn": ["retail_dbt", "golden", "not_null_dim_loyalty_programs_scd_dbt_scd_id"], "alias": "not_null_dim_loyalty_programs_scd_dbt_scd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2300313, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_loyalty_programs_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_loyalty_programs_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_scd_id", "file_key_name": "models.dim_loyalty_programs_scd", "attached_node": "model.retail_dbt.dim_loyalty_programs_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_scd_id", "model": "{{ get_where_subquery(ref('dim_loyalty_programs_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_updated_at.c9d70f49a2": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_loyalty_programs_scd_dbt_updated_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_loyalty_programs_scd_dbt_updated_at.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_updated_at.c9d70f49a2", "fqn": ["retail_dbt", "golden", "not_null_dim_loyalty_programs_scd_dbt_updated_at"], "alias": "not_null_dim_loyalty_programs_scd_dbt_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2311337, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_loyalty_programs_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_loyalty_programs_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_updated_at", "file_key_name": "models.dim_loyalty_programs_scd", "attached_node": "model.retail_dbt.dim_loyalty_programs_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_updated_at", "model": "{{ get_where_subquery(ref('dim_loyalty_programs_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_valid_from.7dac90a210": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_loyalty_programs_scd_dbt_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_loyalty_programs_scd_dbt_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_valid_from.7dac90a210", "fqn": ["retail_dbt", "golden", "not_null_dim_loyalty_programs_scd_dbt_valid_from"], "alias": "not_null_dim_loyalty_programs_scd_dbt_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2323503, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_loyalty_programs_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_loyalty_programs_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_from", "file_key_name": "models.dim_loyalty_programs_scd", "attached_node": "model.retail_dbt.dim_loyalty_programs_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_from", "model": "{{ get_where_subquery(ref('dim_loyalty_programs_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_valid_to.4c513e1ea4": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_loyalty_programs_scd_dbt_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_loyalty_programs_scd_dbt_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_valid_to.4c513e1ea4", "fqn": ["retail_dbt", "golden", "not_null_dim_loyalty_programs_scd_dbt_valid_to"], "alias": "not_null_dim_loyalty_programs_scd_dbt_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2334626, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_loyalty_programs_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_loyalty_programs_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_to", "file_key_name": "models.dim_loyalty_programs_scd", "attached_node": "model.retail_dbt.dim_loyalty_programs_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_to", "model": "{{ get_where_subquery(ref('dim_loyalty_programs_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_loyalty_programs_scd_loyalty_program_sk.84ba447ff4": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_loyalty_programs_scd_loyalty_program_sk", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_loyalty_programs_scd_loyalty_program_sk.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_loyalty_programs_scd_loyalty_program_sk.84ba447ff4", "fqn": ["retail_dbt", "golden", "not_null_dim_loyalty_programs_scd_loyalty_program_sk"], "alias": "not_null_dim_loyalty_programs_scd_loyalty_program_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.234543, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_loyalty_programs_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_loyalty_programs_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "loyalty_program_sk", "file_key_name": "models.dim_loyalty_programs_scd", "attached_node": "model.retail_dbt.dim_loyalty_programs_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "loyalty_program_sk", "model": "{{ get_where_subquery(ref('dim_loyalty_programs_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_loyalty_programs_scd_valid_from.8260f64e1f": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_loyalty_programs_scd_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_loyalty_programs_scd_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_loyalty_programs_scd_valid_from.8260f64e1f", "fqn": ["retail_dbt", "golden", "not_null_dim_loyalty_programs_scd_valid_from"], "alias": "not_null_dim_loyalty_programs_scd_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2355747, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_loyalty_programs_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_loyalty_programs_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_from", "file_key_name": "models.dim_loyalty_programs_scd", "attached_node": "model.retail_dbt.dim_loyalty_programs_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('dim_loyalty_programs_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_loyalty_programs_scd_valid_to.e800634182": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_loyalty_programs_scd_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_loyalty_programs_scd_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_loyalty_programs_scd_valid_to.e800634182", "fqn": ["retail_dbt", "golden", "not_null_dim_loyalty_programs_scd_valid_to"], "alias": "not_null_dim_loyalty_programs_scd_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.236616, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_loyalty_programs_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_loyalty_programs_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_to", "file_key_name": "models.dim_loyalty_programs_scd", "attached_node": "model.retail_dbt.dim_loyalty_programs_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to", "model": "{{ get_where_subquery(ref('dim_loyalty_programs_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_loyalty_programs_scd_is_current.43f58f8f11": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_loyalty_programs_scd_is_current", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_loyalty_programs_scd_is_current.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_loyalty_programs_scd_is_current.43f58f8f11", "fqn": ["retail_dbt", "golden", "not_null_dim_loyalty_programs_scd_is_current"], "alias": "not_null_dim_loyalty_programs_scd_is_current", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2377362, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_loyalty_programs_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_loyalty_programs_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_current", "file_key_name": "models.dim_loyalty_programs_scd", "attached_node": "model.retail_dbt.dim_loyalty_programs_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_current", "model": "{{ get_where_subquery(ref('dim_loyalty_programs_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_product_id.888f04d8f7": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_product_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_product_id.888f04d8f7", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_product_id"], "alias": "not_null_dim_products_scd_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2388272, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.unique_dim_products_scd_product_id.87baa6b989": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_dim_products_scd_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_dim_products_scd_product_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_dim_products_scd_product_id.87baa6b989", "fqn": ["retail_dbt", "golden", "unique_dim_products_scd_product_id"], "alias": "unique_dim_products_scd_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2399077, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_name.2e07a01976": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_name.2e07a01976", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_name"], "alias": "not_null_dim_products_scd_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2410965, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_category_id.525f0df4c5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_category_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_category_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_category_id.525f0df4c5", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_category_id"], "alias": "not_null_dim_products_scd_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2424817, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_id", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_id", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_brand_id.c6bec72bb3": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_brand_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_brand_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_brand_id.c6bec72bb3", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_brand_id"], "alias": "not_null_dim_products_scd_brand_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2439656, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "brand_id", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "brand_id", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_supplier_id.a891d79aaf": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_supplier_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_supplier_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_supplier_id.a891d79aaf", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_supplier_id"], "alias": "not_null_dim_products_scd_supplier_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2450366, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "supplier_id", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_id", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_price.d616170fd5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_price", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_price.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_price.d616170fd5", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_price"], "alias": "not_null_dim_products_scd_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.246141, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_created_at.359e29dc39": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_created_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_created_at.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_created_at.359e29dc39", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_created_at"], "alias": "not_null_dim_products_scd_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2472498, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "created_at", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_season.1a2da695e2": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_season", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_season.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_season.1a2da695e2", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_season"], "alias": "not_null_dim_products_scd_season", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.24832, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "season", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "season", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_dbt_scd_id.64fe98147e": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_dbt_scd_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_dbt_scd_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_dbt_scd_id.64fe98147e", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_dbt_scd_id"], "alias": "not_null_dim_products_scd_dbt_scd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2494042, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_scd_id", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_scd_id", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_dbt_updated_at.ad195b0ea9": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_dbt_updated_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_dbt_updated_at.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_dbt_updated_at.ad195b0ea9", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_dbt_updated_at"], "alias": "not_null_dim_products_scd_dbt_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2505882, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_updated_at", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_updated_at", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_dbt_valid_from.129e676468": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_dbt_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_dbt_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_dbt_valid_from.129e676468", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_dbt_valid_from"], "alias": "not_null_dim_products_scd_dbt_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2516687, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_from", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_from", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_dbt_valid_to.06eb6909d3": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_dbt_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_dbt_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_dbt_valid_to.06eb6909d3", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_dbt_valid_to"], "alias": "not_null_dim_products_scd_dbt_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.252734, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_to", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_to", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_product_sk.08e66abbef": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_product_sk", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_product_sk.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_product_sk.08e66abbef", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_product_sk"], "alias": "not_null_dim_products_scd_product_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2537992, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_sk", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_sk", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_valid_from.ff3104926b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_valid_from.ff3104926b", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_valid_from"], "alias": "not_null_dim_products_scd_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.254881, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_from", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_valid_to.07fb76bf34": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_valid_to.07fb76bf34", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_valid_to"], "alias": "not_null_dim_products_scd_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2560897, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_to", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_products_scd_is_current.f1a053499d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_products_scd_is_current", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_products_scd_is_current.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_products_scd_is_current.f1a053499d", "fqn": ["retail_dbt", "golden", "not_null_dim_products_scd_is_current"], "alias": "not_null_dim_products_scd_is_current", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.257217, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_products_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_products_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_current", "file_key_name": "models.dim_products_scd", "attached_node": "model.retail_dbt.dim_products_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_current", "model": "{{ get_where_subquery(ref('dim_products_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_promotions_scd_promotion_id.68a043e3c4": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_promotions_scd_promotion_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_promotions_scd_promotion_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_promotions_scd_promotion_id.68a043e3c4", "fqn": ["retail_dbt", "golden", "not_null_dim_promotions_scd_promotion_id"], "alias": "not_null_dim_promotions_scd_promotion_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2583084, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_promotions_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_promotions_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "promotion_id", "file_key_name": "models.dim_promotions_scd", "attached_node": "model.retail_dbt.dim_promotions_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "promotion_id", "model": "{{ get_where_subquery(ref('dim_promotions_scd')) }}"}, "namespace": null}}, "test.retail_dbt.unique_dim_promotions_scd_promotion_id.cd385201fe": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_dim_promotions_scd_promotion_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_dim_promotions_scd_promotion_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_dim_promotions_scd_promotion_id.cd385201fe", "fqn": ["retail_dbt", "golden", "unique_dim_promotions_scd_promotion_id"], "alias": "unique_dim_promotions_scd_promotion_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.259379, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_promotions_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.dim_promotions_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "promotion_id", "file_key_name": "models.dim_promotions_scd", "attached_node": "model.retail_dbt.dim_promotions_scd", "test_metadata": {"name": "unique", "kwargs": {"column_name": "promotion_id", "model": "{{ get_where_subquery(ref('dim_promotions_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_promotions_scd_name.eff08cd11a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_promotions_scd_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_promotions_scd_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_promotions_scd_name.eff08cd11a", "fqn": ["retail_dbt", "golden", "not_null_dim_promotions_scd_name"], "alias": "not_null_dim_promotions_scd_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.260508, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_promotions_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_promotions_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.dim_promotions_scd", "attached_node": "model.retail_dbt.dim_promotions_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_promotions_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_promotions_scd_start_date.da0735dcd5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_promotions_scd_start_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_promotions_scd_start_date.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_promotions_scd_start_date.da0735dcd5", "fqn": ["retail_dbt", "golden", "not_null_dim_promotions_scd_start_date"], "alias": "not_null_dim_promotions_scd_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2616637, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_promotions_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_promotions_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "start_date", "file_key_name": "models.dim_promotions_scd", "attached_node": "model.retail_dbt.dim_promotions_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_date", "model": "{{ get_where_subquery(ref('dim_promotions_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_promotions_scd_end_date.fdca100ea5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_promotions_scd_end_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_promotions_scd_end_date.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_promotions_scd_end_date.fdca100ea5", "fqn": ["retail_dbt", "golden", "not_null_dim_promotions_scd_end_date"], "alias": "not_null_dim_promotions_scd_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.262742, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_promotions_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_promotions_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "end_date", "file_key_name": "models.dim_promotions_scd", "attached_node": "model.retail_dbt.dim_promotions_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_date", "model": "{{ get_where_subquery(ref('dim_promotions_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_promotions_scd_dbt_scd_id.b1c88a581f": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_promotions_scd_dbt_scd_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_promotions_scd_dbt_scd_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_promotions_scd_dbt_scd_id.b1c88a581f", "fqn": ["retail_dbt", "golden", "not_null_dim_promotions_scd_dbt_scd_id"], "alias": "not_null_dim_promotions_scd_dbt_scd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2639184, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_promotions_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_promotions_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_scd_id", "file_key_name": "models.dim_promotions_scd", "attached_node": "model.retail_dbt.dim_promotions_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_scd_id", "model": "{{ get_where_subquery(ref('dim_promotions_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_promotions_scd_dbt_updated_at.f5373d9439": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_promotions_scd_dbt_updated_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_promotions_scd_dbt_updated_at.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_promotions_scd_dbt_updated_at.f5373d9439", "fqn": ["retail_dbt", "golden", "not_null_dim_promotions_scd_dbt_updated_at"], "alias": "not_null_dim_promotions_scd_dbt_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2650232, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_promotions_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_promotions_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_updated_at", "file_key_name": "models.dim_promotions_scd", "attached_node": "model.retail_dbt.dim_promotions_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_updated_at", "model": "{{ get_where_subquery(ref('dim_promotions_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_promotions_scd_dbt_valid_from.f013709fc8": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_promotions_scd_dbt_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_promotions_scd_dbt_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_promotions_scd_dbt_valid_from.f013709fc8", "fqn": ["retail_dbt", "golden", "not_null_dim_promotions_scd_dbt_valid_from"], "alias": "not_null_dim_promotions_scd_dbt_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.266084, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_promotions_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_promotions_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_from", "file_key_name": "models.dim_promotions_scd", "attached_node": "model.retail_dbt.dim_promotions_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_from", "model": "{{ get_where_subquery(ref('dim_promotions_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_promotions_scd_dbt_valid_to.dc9326ebd7": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_promotions_scd_dbt_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_promotions_scd_dbt_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_promotions_scd_dbt_valid_to.dc9326ebd7", "fqn": ["retail_dbt", "golden", "not_null_dim_promotions_scd_dbt_valid_to"], "alias": "not_null_dim_promotions_scd_dbt_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2671847, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_promotions_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_promotions_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_to", "file_key_name": "models.dim_promotions_scd", "attached_node": "model.retail_dbt.dim_promotions_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_to", "model": "{{ get_where_subquery(ref('dim_promotions_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_promotions_scd_promotion_sk.bd7c176ae5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_promotions_scd_promotion_sk", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_promotions_scd_promotion_sk.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_promotions_scd_promotion_sk.bd7c176ae5", "fqn": ["retail_dbt", "golden", "not_null_dim_promotions_scd_promotion_sk"], "alias": "not_null_dim_promotions_scd_promotion_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.268232, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_promotions_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_promotions_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "promotion_sk", "file_key_name": "models.dim_promotions_scd", "attached_node": "model.retail_dbt.dim_promotions_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "promotion_sk", "model": "{{ get_where_subquery(ref('dim_promotions_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_promotions_scd_valid_from.e12b3e052f": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_promotions_scd_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_promotions_scd_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_promotions_scd_valid_from.e12b3e052f", "fqn": ["retail_dbt", "golden", "not_null_dim_promotions_scd_valid_from"], "alias": "not_null_dim_promotions_scd_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2693202, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_promotions_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_promotions_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_from", "file_key_name": "models.dim_promotions_scd", "attached_node": "model.retail_dbt.dim_promotions_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('dim_promotions_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_promotions_scd_valid_to.9419731417": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_promotions_scd_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_promotions_scd_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_promotions_scd_valid_to.9419731417", "fqn": ["retail_dbt", "golden", "not_null_dim_promotions_scd_valid_to"], "alias": "not_null_dim_promotions_scd_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2703888, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_promotions_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_promotions_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_to", "file_key_name": "models.dim_promotions_scd", "attached_node": "model.retail_dbt.dim_promotions_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to", "model": "{{ get_where_subquery(ref('dim_promotions_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_promotions_scd_is_current.c1c92cb247": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_promotions_scd_is_current", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_promotions_scd_is_current.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_promotions_scd_is_current.c1c92cb247", "fqn": ["retail_dbt", "golden", "not_null_dim_promotions_scd_is_current"], "alias": "not_null_dim_promotions_scd_is_current", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.271453, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_promotions_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_promotions_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_current", "file_key_name": "models.dim_promotions_scd", "attached_node": "model.retail_dbt.dim_promotions_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_current", "model": "{{ get_where_subquery(ref('dim_promotions_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_stores_scd_store_id.eb554c331f": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_stores_scd_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_stores_scd_store_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_stores_scd_store_id.eb554c331f", "fqn": ["retail_dbt", "golden", "not_null_dim_stores_scd_store_id"], "alias": "not_null_dim_stores_scd_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2726467, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_stores_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_stores_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.dim_stores_scd", "attached_node": "model.retail_dbt.dim_stores_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('dim_stores_scd')) }}"}, "namespace": null}}, "test.retail_dbt.unique_dim_stores_scd_store_id.6625450729": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_dim_stores_scd_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_dim_stores_scd_store_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_dim_stores_scd_store_id.6625450729", "fqn": ["retail_dbt", "golden", "unique_dim_stores_scd_store_id"], "alias": "unique_dim_stores_scd_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2738247, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_stores_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.dim_stores_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.dim_stores_scd", "attached_node": "model.retail_dbt.dim_stores_scd", "test_metadata": {"name": "unique", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('dim_stores_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_stores_scd_name.57cf8fd999": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_stores_scd_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_stores_scd_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_stores_scd_name.57cf8fd999", "fqn": ["retail_dbt", "golden", "not_null_dim_stores_scd_name"], "alias": "not_null_dim_stores_scd_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2749133, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_stores_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_stores_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.dim_stores_scd", "attached_node": "model.retail_dbt.dim_stores_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_stores_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_stores_scd_location.0fb1fcff58": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_stores_scd_location", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_stores_scd_location.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_stores_scd_location.0fb1fcff58", "fqn": ["retail_dbt", "golden", "not_null_dim_stores_scd_location"], "alias": "not_null_dim_stores_scd_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2759755, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_stores_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_stores_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "location", "file_key_name": "models.dim_stores_scd", "attached_node": "model.retail_dbt.dim_stores_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "location", "model": "{{ get_where_subquery(ref('dim_stores_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_stores_scd_manager_id.38d4e973e8": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_stores_scd_manager_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_stores_scd_manager_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_stores_scd_manager_id.38d4e973e8", "fqn": ["retail_dbt", "golden", "not_null_dim_stores_scd_manager_id"], "alias": "not_null_dim_stores_scd_manager_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2770288, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_stores_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_stores_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "manager_id", "file_key_name": "models.dim_stores_scd", "attached_node": "model.retail_dbt.dim_stores_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "manager_id", "model": "{{ get_where_subquery(ref('dim_stores_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_stores_scd_dbt_scd_id.6c8439aad5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_stores_scd_dbt_scd_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_stores_scd_dbt_scd_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_stores_scd_dbt_scd_id.6c8439aad5", "fqn": ["retail_dbt", "golden", "not_null_dim_stores_scd_dbt_scd_id"], "alias": "not_null_dim_stores_scd_dbt_scd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.278133, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_stores_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_stores_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_scd_id", "file_key_name": "models.dim_stores_scd", "attached_node": "model.retail_dbt.dim_stores_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_scd_id", "model": "{{ get_where_subquery(ref('dim_stores_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_stores_scd_dbt_updated_at.e345a23f59": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_stores_scd_dbt_updated_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_stores_scd_dbt_updated_at.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_stores_scd_dbt_updated_at.e345a23f59", "fqn": ["retail_dbt", "golden", "not_null_dim_stores_scd_dbt_updated_at"], "alias": "not_null_dim_stores_scd_dbt_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.279291, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_stores_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_stores_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_updated_at", "file_key_name": "models.dim_stores_scd", "attached_node": "model.retail_dbt.dim_stores_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_updated_at", "model": "{{ get_where_subquery(ref('dim_stores_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_stores_scd_dbt_valid_from.d644927787": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_stores_scd_dbt_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_stores_scd_dbt_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_stores_scd_dbt_valid_from.d644927787", "fqn": ["retail_dbt", "golden", "not_null_dim_stores_scd_dbt_valid_from"], "alias": "not_null_dim_stores_scd_dbt_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.280341, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_stores_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_stores_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_from", "file_key_name": "models.dim_stores_scd", "attached_node": "model.retail_dbt.dim_stores_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_from", "model": "{{ get_where_subquery(ref('dim_stores_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_stores_scd_dbt_valid_to.a973a28dbc": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_stores_scd_dbt_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_stores_scd_dbt_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_stores_scd_dbt_valid_to.a973a28dbc", "fqn": ["retail_dbt", "golden", "not_null_dim_stores_scd_dbt_valid_to"], "alias": "not_null_dim_stores_scd_dbt_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2813785, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_stores_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_stores_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_to", "file_key_name": "models.dim_stores_scd", "attached_node": "model.retail_dbt.dim_stores_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_to", "model": "{{ get_where_subquery(ref('dim_stores_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_stores_scd_store_sk.75a15a101c": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_stores_scd_store_sk", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_stores_scd_store_sk.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_stores_scd_store_sk.75a15a101c", "fqn": ["retail_dbt", "golden", "not_null_dim_stores_scd_store_sk"], "alias": "not_null_dim_stores_scd_store_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2824214, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_stores_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_stores_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_sk", "file_key_name": "models.dim_stores_scd", "attached_node": "model.retail_dbt.dim_stores_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_sk", "model": "{{ get_where_subquery(ref('dim_stores_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_stores_scd_valid_from.8b8490821f": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_stores_scd_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_stores_scd_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_stores_scd_valid_from.8b8490821f", "fqn": ["retail_dbt", "golden", "not_null_dim_stores_scd_valid_from"], "alias": "not_null_dim_stores_scd_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2834797, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_stores_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_stores_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_from", "file_key_name": "models.dim_stores_scd", "attached_node": "model.retail_dbt.dim_stores_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('dim_stores_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_stores_scd_valid_to.587d234d24": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_stores_scd_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_stores_scd_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_stores_scd_valid_to.587d234d24", "fqn": ["retail_dbt", "golden", "not_null_dim_stores_scd_valid_to"], "alias": "not_null_dim_stores_scd_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.284601, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_stores_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_stores_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_to", "file_key_name": "models.dim_stores_scd", "attached_node": "model.retail_dbt.dim_stores_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to", "model": "{{ get_where_subquery(ref('dim_stores_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_stores_scd_is_current.a5e5c85257": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_stores_scd_is_current", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_stores_scd_is_current.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_stores_scd_is_current.a5e5c85257", "fqn": ["retail_dbt", "golden", "not_null_dim_stores_scd_is_current"], "alias": "not_null_dim_stores_scd_is_current", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.285664, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_stores_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_stores_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_current", "file_key_name": "models.dim_stores_scd", "attached_node": "model.retail_dbt.dim_stores_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_current", "model": "{{ get_where_subquery(ref('dim_stores_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_suppliers_scd_supplier_id.b2cfb6ed2a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_suppliers_scd_supplier_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_suppliers_scd_supplier_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_suppliers_scd_supplier_id.b2cfb6ed2a", "fqn": ["retail_dbt", "golden", "not_null_dim_suppliers_scd_supplier_id"], "alias": "not_null_dim_suppliers_scd_supplier_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2867732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_suppliers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_suppliers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "supplier_id", "file_key_name": "models.dim_suppliers_scd", "attached_node": "model.retail_dbt.dim_suppliers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_id", "model": "{{ get_where_subquery(ref('dim_suppliers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.unique_dim_suppliers_scd_supplier_id.d042172574": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_dim_suppliers_scd_supplier_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_dim_suppliers_scd_supplier_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_dim_suppliers_scd_supplier_id.d042172574", "fqn": ["retail_dbt", "golden", "unique_dim_suppliers_scd_supplier_id"], "alias": "unique_dim_suppliers_scd_supplier_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2878828, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_suppliers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.dim_suppliers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "supplier_id", "file_key_name": "models.dim_suppliers_scd", "attached_node": "model.retail_dbt.dim_suppliers_scd", "test_metadata": {"name": "unique", "kwargs": {"column_name": "supplier_id", "model": "{{ get_where_subquery(ref('dim_suppliers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_suppliers_scd_name.11edeb06e1": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_suppliers_scd_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_suppliers_scd_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_suppliers_scd_name.11edeb06e1", "fqn": ["retail_dbt", "golden", "not_null_dim_suppliers_scd_name"], "alias": "not_null_dim_suppliers_scd_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2889988, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_suppliers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_suppliers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "name", "file_key_name": "models.dim_suppliers_scd", "attached_node": "model.retail_dbt.dim_suppliers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_suppliers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_suppliers_scd_contact_info.586f4ecbc6": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_suppliers_scd_contact_info", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_suppliers_scd_contact_info.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_suppliers_scd_contact_info.586f4ecbc6", "fqn": ["retail_dbt", "golden", "not_null_dim_suppliers_scd_contact_info"], "alias": "not_null_dim_suppliers_scd_contact_info", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2901444, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_suppliers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_suppliers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "contact_info", "file_key_name": "models.dim_suppliers_scd", "attached_node": "model.retail_dbt.dim_suppliers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_info", "model": "{{ get_where_subquery(ref('dim_suppliers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_suppliers_scd_dbt_scd_id.cd6b9cad0e": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_suppliers_scd_dbt_scd_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_suppliers_scd_dbt_scd_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_suppliers_scd_dbt_scd_id.cd6b9cad0e", "fqn": ["retail_dbt", "golden", "not_null_dim_suppliers_scd_dbt_scd_id"], "alias": "not_null_dim_suppliers_scd_dbt_scd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2912107, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_suppliers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_suppliers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_scd_id", "file_key_name": "models.dim_suppliers_scd", "attached_node": "model.retail_dbt.dim_suppliers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_scd_id", "model": "{{ get_where_subquery(ref('dim_suppliers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_suppliers_scd_dbt_updated_at.e8aeeea372": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_suppliers_scd_dbt_updated_at", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_suppliers_scd_dbt_updated_at.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_suppliers_scd_dbt_updated_at.e8aeeea372", "fqn": ["retail_dbt", "golden", "not_null_dim_suppliers_scd_dbt_updated_at"], "alias": "not_null_dim_suppliers_scd_dbt_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2923284, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_suppliers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_suppliers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_updated_at", "file_key_name": "models.dim_suppliers_scd", "attached_node": "model.retail_dbt.dim_suppliers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_updated_at", "model": "{{ get_where_subquery(ref('dim_suppliers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_suppliers_scd_dbt_valid_from.c8ab1f4710": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_suppliers_scd_dbt_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_suppliers_scd_dbt_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_suppliers_scd_dbt_valid_from.c8ab1f4710", "fqn": ["retail_dbt", "golden", "not_null_dim_suppliers_scd_dbt_valid_from"], "alias": "not_null_dim_suppliers_scd_dbt_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2934268, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_suppliers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_suppliers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_from", "file_key_name": "models.dim_suppliers_scd", "attached_node": "model.retail_dbt.dim_suppliers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_from", "model": "{{ get_where_subquery(ref('dim_suppliers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_suppliers_scd_dbt_valid_to.6c4f8f5e93": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_suppliers_scd_dbt_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_suppliers_scd_dbt_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_suppliers_scd_dbt_valid_to.6c4f8f5e93", "fqn": ["retail_dbt", "golden", "not_null_dim_suppliers_scd_dbt_valid_to"], "alias": "not_null_dim_suppliers_scd_dbt_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2945147, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_suppliers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_suppliers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_to", "file_key_name": "models.dim_suppliers_scd", "attached_node": "model.retail_dbt.dim_suppliers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_to", "model": "{{ get_where_subquery(ref('dim_suppliers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_suppliers_scd_supplier_sk.3062b6e773": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_suppliers_scd_supplier_sk", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_suppliers_scd_supplier_sk.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_suppliers_scd_supplier_sk.3062b6e773", "fqn": ["retail_dbt", "golden", "not_null_dim_suppliers_scd_supplier_sk"], "alias": "not_null_dim_suppliers_scd_supplier_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2956414, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_suppliers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_suppliers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "supplier_sk", "file_key_name": "models.dim_suppliers_scd", "attached_node": "model.retail_dbt.dim_suppliers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_sk", "model": "{{ get_where_subquery(ref('dim_suppliers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_suppliers_scd_valid_from.ac87d1b209": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_suppliers_scd_valid_from", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_suppliers_scd_valid_from.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_suppliers_scd_valid_from.ac87d1b209", "fqn": ["retail_dbt", "golden", "not_null_dim_suppliers_scd_valid_from"], "alias": "not_null_dim_suppliers_scd_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.296698, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_suppliers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_suppliers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_from", "file_key_name": "models.dim_suppliers_scd", "attached_node": "model.retail_dbt.dim_suppliers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('dim_suppliers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_suppliers_scd_valid_to.b898b9d917": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_suppliers_scd_valid_to", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_suppliers_scd_valid_to.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_suppliers_scd_valid_to.b898b9d917", "fqn": ["retail_dbt", "golden", "not_null_dim_suppliers_scd_valid_to"], "alias": "not_null_dim_suppliers_scd_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2977684, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_suppliers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_suppliers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_to", "file_key_name": "models.dim_suppliers_scd", "attached_node": "model.retail_dbt.dim_suppliers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to", "model": "{{ get_where_subquery(ref('dim_suppliers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_suppliers_scd_is_current.a0ea2cb2e1": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_suppliers_scd_is_current", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_suppliers_scd_is_current.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_suppliers_scd_is_current.a0ea2cb2e1", "fqn": ["retail_dbt", "golden", "not_null_dim_suppliers_scd_is_current"], "alias": "not_null_dim_suppliers_scd_is_current", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.298829, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_suppliers_scd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_suppliers_scd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_current", "file_key_name": "models.dim_suppliers_scd", "attached_node": "model.retail_dbt.dim_suppliers_scd", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_current", "model": "{{ get_where_subquery(ref('dim_suppliers_scd')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_tax_rules_tax_id.149c22c98b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_tax_rules_tax_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_tax_rules_tax_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_tax_rules_tax_id.149c22c98b", "fqn": ["retail_dbt", "golden", "not_null_dim_tax_rules_tax_id"], "alias": "not_null_dim_tax_rules_tax_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.2998989, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_tax_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_tax_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_id", "file_key_name": "models.dim_tax_rules", "attached_node": "model.retail_dbt.dim_tax_rules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_id", "model": "{{ get_where_subquery(ref('dim_tax_rules')) }}"}, "namespace": null}}, "test.retail_dbt.unique_dim_tax_rules_tax_id.dc86f06360": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_dim_tax_rules_tax_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_dim_tax_rules_tax_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_dim_tax_rules_tax_id.dc86f06360", "fqn": ["retail_dbt", "golden", "unique_dim_tax_rules_tax_id"], "alias": "unique_dim_tax_rules_tax_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.30111, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_tax_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.dim_tax_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_id", "file_key_name": "models.dim_tax_rules", "attached_node": "model.retail_dbt.dim_tax_rules", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tax_id", "model": "{{ get_where_subquery(ref('dim_tax_rules')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_tax_rules_product_id.9e61b95297": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_tax_rules_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_tax_rules_product_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_tax_rules_product_id.9e61b95297", "fqn": ["retail_dbt", "golden", "not_null_dim_tax_rules_product_id"], "alias": "not_null_dim_tax_rules_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.30217, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_tax_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_tax_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.dim_tax_rules", "attached_node": "model.retail_dbt.dim_tax_rules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('dim_tax_rules')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_tax_rules_tax_rate.db33d03da1": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_tax_rules_tax_rate", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_tax_rules_tax_rate.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_tax_rules_tax_rate.db33d03da1", "fqn": ["retail_dbt", "golden", "not_null_dim_tax_rules_tax_rate"], "alias": "not_null_dim_tax_rules_tax_rate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3032303, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_tax_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_tax_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax_rate", "file_key_name": "models.dim_tax_rules", "attached_node": "model.retail_dbt.dim_tax_rules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax_rate", "model": "{{ get_where_subquery(ref('dim_tax_rules')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_dim_tax_rules_region.0377b55149": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_dim_tax_rules_region", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_dim_tax_rules_region.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_dim_tax_rules_region.0377b55149", "fqn": ["retail_dbt", "golden", "not_null_dim_tax_rules_region"], "alias": "not_null_dim_tax_rules_region", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3042903, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_tax_rules", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.dim_tax_rules"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "region", "file_key_name": "models.dim_tax_rules", "attached_node": "model.retail_dbt.dim_tax_rules", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "region", "model": "{{ get_where_subquery(ref('dim_tax_rules')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_customer_feedback_feedback_id.290ec7f6ca": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_customer_feedback_feedback_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_customer_feedback_feedback_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_customer_feedback_feedback_id.290ec7f6ca", "fqn": ["retail_dbt", "golden", "not_null_fct_customer_feedback_feedback_id"], "alias": "not_null_fct_customer_feedback_feedback_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3053906, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_feedback", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "feedback_id", "file_key_name": "models.fct_customer_feedback", "attached_node": "model.retail_dbt.fct_customer_feedback", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "feedback_id", "model": "{{ get_where_subquery(ref('fct_customer_feedback')) }}"}, "namespace": null}}, "test.retail_dbt.unique_fct_customer_feedback_feedback_id.769d5be999": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_fct_customer_feedback_feedback_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_fct_customer_feedback_feedback_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_fct_customer_feedback_feedback_id.769d5be999", "fqn": ["retail_dbt", "golden", "unique_fct_customer_feedback_feedback_id"], "alias": "unique_fct_customer_feedback_feedback_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3064747, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_feedback", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.fct_customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "feedback_id", "file_key_name": "models.fct_customer_feedback", "attached_node": "model.retail_dbt.fct_customer_feedback", "test_metadata": {"name": "unique", "kwargs": {"column_name": "feedback_id", "model": "{{ get_where_subquery(ref('fct_customer_feedback')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_customer_feedback_customer_id.f3a53e00a3": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_customer_feedback_customer_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_customer_feedback_customer_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_customer_feedback_customer_id.f3a53e00a3", "fqn": ["retail_dbt", "golden", "not_null_fct_customer_feedback_customer_id"], "alias": "not_null_fct_customer_feedback_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.30767, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_feedback", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.fct_customer_feedback", "attached_node": "model.retail_dbt.fct_customer_feedback", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('fct_customer_feedback')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_customer_feedback_store_id.e4db9a27ee": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_customer_feedback_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_customer_feedback_store_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_customer_feedback_store_id.e4db9a27ee", "fqn": ["retail_dbt", "golden", "not_null_fct_customer_feedback_store_id"], "alias": "not_null_fct_customer_feedback_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3087378, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_feedback", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.fct_customer_feedback", "attached_node": "model.retail_dbt.fct_customer_feedback", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('fct_customer_feedback')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_customer_feedback_product_id.fcca4d142d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_customer_feedback_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_customer_feedback_product_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_customer_feedback_product_id.fcca4d142d", "fqn": ["retail_dbt", "golden", "not_null_fct_customer_feedback_product_id"], "alias": "not_null_fct_customer_feedback_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3098283, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_feedback", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.fct_customer_feedback", "attached_node": "model.retail_dbt.fct_customer_feedback", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('fct_customer_feedback')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_customer_feedback_rating.b81d0c4d8d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_customer_feedback_rating", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_customer_feedback_rating.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_customer_feedback_rating.b81d0c4d8d", "fqn": ["retail_dbt", "golden", "not_null_fct_customer_feedback_rating"], "alias": "not_null_fct_customer_feedback_rating", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.311003, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_feedback", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rating", "file_key_name": "models.fct_customer_feedback", "attached_node": "model.retail_dbt.fct_customer_feedback", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "rating", "model": "{{ get_where_subquery(ref('fct_customer_feedback')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_customer_feedback_comments.f30943758d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_customer_feedback_comments", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_customer_feedback_comments.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_customer_feedback_comments.f30943758d", "fqn": ["retail_dbt", "golden", "not_null_fct_customer_feedback_comments"], "alias": "not_null_fct_customer_feedback_comments", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.312084, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_feedback", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "comments", "file_key_name": "models.fct_customer_feedback", "attached_node": "model.retail_dbt.fct_customer_feedback", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "comments", "model": "{{ get_where_subquery(ref('fct_customer_feedback')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_customer_feedback_feedback_date.5484fc0f41": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_customer_feedback_feedback_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_customer_feedback_feedback_date.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_customer_feedback_feedback_date.5484fc0f41", "fqn": ["retail_dbt", "golden", "not_null_fct_customer_feedback_feedback_date"], "alias": "not_null_fct_customer_feedback_feedback_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3132117, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_feedback", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "feedback_date", "file_key_name": "models.fct_customer_feedback", "attached_node": "model.retail_dbt.fct_customer_feedback", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "feedback_date", "model": "{{ get_where_subquery(ref('fct_customer_feedback')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_customer_feedback_customer_name.2c828aca63": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_customer_feedback_customer_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_customer_feedback_customer_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_customer_feedback_customer_name.2c828aca63", "fqn": ["retail_dbt", "golden", "not_null_fct_customer_feedback_customer_name"], "alias": "not_null_fct_customer_feedback_customer_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3142927, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_feedback", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_name", "file_key_name": "models.fct_customer_feedback", "attached_node": "model.retail_dbt.fct_customer_feedback", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_name", "model": "{{ get_where_subquery(ref('fct_customer_feedback')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_customer_feedback_store_name.a504fa53f8": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_customer_feedback_store_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_customer_feedback_store_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_customer_feedback_store_name.a504fa53f8", "fqn": ["retail_dbt", "golden", "not_null_fct_customer_feedback_store_name"], "alias": "not_null_fct_customer_feedback_store_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3153772, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_feedback", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_name", "file_key_name": "models.fct_customer_feedback", "attached_node": "model.retail_dbt.fct_customer_feedback", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_name", "model": "{{ get_where_subquery(ref('fct_customer_feedback')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_customer_feedback_product_name.27663ad7e1": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_customer_feedback_product_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_customer_feedback_product_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_customer_feedback_product_name.27663ad7e1", "fqn": ["retail_dbt", "golden", "not_null_fct_customer_feedback_product_name"], "alias": "not_null_fct_customer_feedback_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3164165, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_feedback", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.fct_customer_feedback", "attached_node": "model.retail_dbt.fct_customer_feedback", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('fct_customer_feedback')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_customer_feedback_feedback_year.72346da577": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_customer_feedback_feedback_year", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_customer_feedback_feedback_year.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_customer_feedback_feedback_year.72346da577", "fqn": ["retail_dbt", "golden", "not_null_fct_customer_feedback_feedback_year"], "alias": "not_null_fct_customer_feedback_feedback_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3174627, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_feedback", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "feedback_year", "file_key_name": "models.fct_customer_feedback", "attached_node": "model.retail_dbt.fct_customer_feedback", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "feedback_year", "model": "{{ get_where_subquery(ref('fct_customer_feedback')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_customer_feedback_feedback_month.441da6ee87": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_customer_feedback_feedback_month", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_customer_feedback_feedback_month.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_customer_feedback_feedback_month.441da6ee87", "fqn": ["retail_dbt", "golden", "not_null_fct_customer_feedback_feedback_month"], "alias": "not_null_fct_customer_feedback_feedback_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3186936, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_feedback", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "feedback_month", "file_key_name": "models.fct_customer_feedback", "attached_node": "model.retail_dbt.fct_customer_feedback", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "feedback_month", "model": "{{ get_where_subquery(ref('fct_customer_feedback')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_customer_feedback_feedback_day.40e1bb2f83": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_customer_feedback_feedback_day", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_customer_feedback_feedback_day.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_customer_feedback_feedback_day.40e1bb2f83", "fqn": ["retail_dbt", "golden", "not_null_fct_customer_feedback_feedback_day"], "alias": "not_null_fct_customer_feedback_feedback_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.31975, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_customer_feedback", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_customer_feedback"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "feedback_day", "file_key_name": "models.fct_customer_feedback", "attached_node": "model.retail_dbt.fct_customer_feedback", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "feedback_day", "model": "{{ get_where_subquery(ref('fct_customer_feedback')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_inventory_inventory_id.c3674522ab": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_inventory_inventory_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_inventory_inventory_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_inventory_inventory_id.c3674522ab", "fqn": ["retail_dbt", "golden", "not_null_fct_inventory_inventory_id"], "alias": "not_null_fct_inventory_inventory_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.320837, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_inventory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_inventory"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "inventory_id", "file_key_name": "models.fct_inventory", "attached_node": "model.retail_dbt.fct_inventory", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "inventory_id", "model": "{{ get_where_subquery(ref('fct_inventory')) }}"}, "namespace": null}}, "test.retail_dbt.unique_fct_inventory_inventory_id.1cf54f628e": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_fct_inventory_inventory_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_fct_inventory_inventory_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_fct_inventory_inventory_id.1cf54f628e", "fqn": ["retail_dbt", "golden", "unique_fct_inventory_inventory_id"], "alias": "unique_fct_inventory_inventory_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3219044, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_inventory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.fct_inventory"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "inventory_id", "file_key_name": "models.fct_inventory", "attached_node": "model.retail_dbt.fct_inventory", "test_metadata": {"name": "unique", "kwargs": {"column_name": "inventory_id", "model": "{{ get_where_subquery(ref('fct_inventory')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_inventory_store_id.0eb1c2b718": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_inventory_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_inventory_store_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_inventory_store_id.0eb1c2b718", "fqn": ["retail_dbt", "golden", "not_null_fct_inventory_store_id"], "alias": "not_null_fct_inventory_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3230717, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_inventory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_inventory"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.fct_inventory", "attached_node": "model.retail_dbt.fct_inventory", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('fct_inventory')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_inventory_product_id.55271876bd": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_inventory_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_inventory_product_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_inventory_product_id.55271876bd", "fqn": ["retail_dbt", "golden", "not_null_fct_inventory_product_id"], "alias": "not_null_fct_inventory_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3242383, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_inventory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_inventory"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.fct_inventory", "attached_node": "model.retail_dbt.fct_inventory", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('fct_inventory')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_inventory_quantity.b01f0f5d7b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_inventory_quantity", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_inventory_quantity.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_inventory_quantity.b01f0f5d7b", "fqn": ["retail_dbt", "golden", "not_null_fct_inventory_quantity"], "alias": "not_null_fct_inventory_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.32531, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_inventory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_inventory"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "quantity", "file_key_name": "models.fct_inventory", "attached_node": "model.retail_dbt.fct_inventory", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "quantity", "model": "{{ get_where_subquery(ref('fct_inventory')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_inventory_last_updated.dfe083d6e9": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_inventory_last_updated", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_inventory_last_updated.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_inventory_last_updated.dfe083d6e9", "fqn": ["retail_dbt", "golden", "not_null_fct_inventory_last_updated"], "alias": "not_null_fct_inventory_last_updated", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3264, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_inventory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_inventory"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_updated", "file_key_name": "models.fct_inventory", "attached_node": "model.retail_dbt.fct_inventory", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_updated", "model": "{{ get_where_subquery(ref('fct_inventory')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_inventory_store_name.36742932e5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_inventory_store_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_inventory_store_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_inventory_store_name.36742932e5", "fqn": ["retail_dbt", "golden", "not_null_fct_inventory_store_name"], "alias": "not_null_fct_inventory_store_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3274763, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_inventory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_inventory"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_name", "file_key_name": "models.fct_inventory", "attached_node": "model.retail_dbt.fct_inventory", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_name", "model": "{{ get_where_subquery(ref('fct_inventory')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_inventory_product_name.ef036593c6": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_inventory_product_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_inventory_product_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_inventory_product_name.ef036593c6", "fqn": ["retail_dbt", "golden", "not_null_fct_inventory_product_name"], "alias": "not_null_fct_inventory_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.328575, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_inventory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_inventory"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.fct_inventory", "attached_node": "model.retail_dbt.fct_inventory", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('fct_inventory')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_inventory_last_updated_year.48cd555f65": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_inventory_last_updated_year", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_inventory_last_updated_year.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_inventory_last_updated_year.48cd555f65", "fqn": ["retail_dbt", "golden", "not_null_fct_inventory_last_updated_year"], "alias": "not_null_fct_inventory_last_updated_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.329677, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_inventory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_inventory"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_updated_year", "file_key_name": "models.fct_inventory", "attached_node": "model.retail_dbt.fct_inventory", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_updated_year", "model": "{{ get_where_subquery(ref('fct_inventory')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_inventory_last_updated_month.67a2657bfc": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_inventory_last_updated_month", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_inventory_last_updated_month.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_inventory_last_updated_month.67a2657bfc", "fqn": ["retail_dbt", "golden", "not_null_fct_inventory_last_updated_month"], "alias": "not_null_fct_inventory_last_updated_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3307374, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_inventory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_inventory"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_updated_month", "file_key_name": "models.fct_inventory", "attached_node": "model.retail_dbt.fct_inventory", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_updated_month", "model": "{{ get_where_subquery(ref('fct_inventory')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_inventory_last_updated_day.3f95fafb5d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_inventory_last_updated_day", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_inventory_last_updated_day.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_inventory_last_updated_day.3f95fafb5d", "fqn": ["retail_dbt", "golden", "not_null_fct_inventory_last_updated_day"], "alias": "not_null_fct_inventory_last_updated_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.331799, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_inventory", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_inventory"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_updated_day", "file_key_name": "models.fct_inventory", "attached_node": "model.retail_dbt.fct_inventory", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_updated_day", "model": "{{ get_where_subquery(ref('fct_inventory')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_pricing_history_history_id.6fa60f1cbc": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_pricing_history_history_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_pricing_history_history_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_pricing_history_history_id.6fa60f1cbc", "fqn": ["retail_dbt", "golden", "not_null_fct_pricing_history_history_id"], "alias": "not_null_fct_pricing_history_history_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3328314, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_pricing_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_pricing_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "history_id", "file_key_name": "models.fct_pricing_history", "attached_node": "model.retail_dbt.fct_pricing_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "history_id", "model": "{{ get_where_subquery(ref('fct_pricing_history')) }}"}, "namespace": null}}, "test.retail_dbt.unique_fct_pricing_history_history_id.99c76c96fe": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_fct_pricing_history_history_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_fct_pricing_history_history_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_fct_pricing_history_history_id.99c76c96fe", "fqn": ["retail_dbt", "golden", "unique_fct_pricing_history_history_id"], "alias": "unique_fct_pricing_history_history_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3338544, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_pricing_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.fct_pricing_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "history_id", "file_key_name": "models.fct_pricing_history", "attached_node": "model.retail_dbt.fct_pricing_history", "test_metadata": {"name": "unique", "kwargs": {"column_name": "history_id", "model": "{{ get_where_subquery(ref('fct_pricing_history')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_pricing_history_product_id.af202ef865": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_pricing_history_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_pricing_history_product_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_pricing_history_product_id.af202ef865", "fqn": ["retail_dbt", "golden", "not_null_fct_pricing_history_product_id"], "alias": "not_null_fct_pricing_history_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3349328, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_pricing_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_pricing_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.fct_pricing_history", "attached_node": "model.retail_dbt.fct_pricing_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('fct_pricing_history')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_pricing_history_price.91e1728b2b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_pricing_history_price", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_pricing_history_price.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_pricing_history_price.91e1728b2b", "fqn": ["retail_dbt", "golden", "not_null_fct_pricing_history_price"], "alias": "not_null_fct_pricing_history_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.336063, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_pricing_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_pricing_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price", "file_key_name": "models.fct_pricing_history", "attached_node": "model.retail_dbt.fct_pricing_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price", "model": "{{ get_where_subquery(ref('fct_pricing_history')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_pricing_history_effective_date.578e01ad9a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_pricing_history_effective_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_pricing_history_effective_date.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_pricing_history_effective_date.578e01ad9a", "fqn": ["retail_dbt", "golden", "not_null_fct_pricing_history_effective_date"], "alias": "not_null_fct_pricing_history_effective_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3372028, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_pricing_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_pricing_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "effective_date", "file_key_name": "models.fct_pricing_history", "attached_node": "model.retail_dbt.fct_pricing_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "effective_date", "model": "{{ get_where_subquery(ref('fct_pricing_history')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_pricing_history_product_name.8632159ba6": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_pricing_history_product_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_pricing_history_product_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_pricing_history_product_name.8632159ba6", "fqn": ["retail_dbt", "golden", "not_null_fct_pricing_history_product_name"], "alias": "not_null_fct_pricing_history_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3383296, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_pricing_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_pricing_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.fct_pricing_history", "attached_node": "model.retail_dbt.fct_pricing_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('fct_pricing_history')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_pricing_history_effective_year.37172b90f8": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_pricing_history_effective_year", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_pricing_history_effective_year.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_pricing_history_effective_year.37172b90f8", "fqn": ["retail_dbt", "golden", "not_null_fct_pricing_history_effective_year"], "alias": "not_null_fct_pricing_history_effective_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3394873, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_pricing_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_pricing_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "effective_year", "file_key_name": "models.fct_pricing_history", "attached_node": "model.retail_dbt.fct_pricing_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "effective_year", "model": "{{ get_where_subquery(ref('fct_pricing_history')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_pricing_history_effective_month.36473878ff": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_pricing_history_effective_month", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_pricing_history_effective_month.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_pricing_history_effective_month.36473878ff", "fqn": ["retail_dbt", "golden", "not_null_fct_pricing_history_effective_month"], "alias": "not_null_fct_pricing_history_effective_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3405585, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_pricing_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_pricing_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "effective_month", "file_key_name": "models.fct_pricing_history", "attached_node": "model.retail_dbt.fct_pricing_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "effective_month", "model": "{{ get_where_subquery(ref('fct_pricing_history')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_purchase_orders_order_id.985efd7afa": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_purchase_orders_order_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_purchase_orders_order_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_purchase_orders_order_id.985efd7afa", "fqn": ["retail_dbt", "golden", "not_null_fct_purchase_orders_order_id"], "alias": "not_null_fct_purchase_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3417456, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_purchase_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_purchase_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.fct_purchase_orders", "attached_node": "model.retail_dbt.fct_purchase_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('fct_purchase_orders')) }}"}, "namespace": null}}, "test.retail_dbt.unique_fct_purchase_orders_order_id.9b983fae18": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_fct_purchase_orders_order_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_fct_purchase_orders_order_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_fct_purchase_orders_order_id.9b983fae18", "fqn": ["retail_dbt", "golden", "unique_fct_purchase_orders_order_id"], "alias": "unique_fct_purchase_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3428454, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_purchase_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.fct_purchase_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.fct_purchase_orders", "attached_node": "model.retail_dbt.fct_purchase_orders", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('fct_purchase_orders')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_purchase_orders_supplier_id.0ea61a31cb": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_purchase_orders_supplier_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_purchase_orders_supplier_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_purchase_orders_supplier_id.0ea61a31cb", "fqn": ["retail_dbt", "golden", "not_null_fct_purchase_orders_supplier_id"], "alias": "not_null_fct_purchase_orders_supplier_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3439147, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_purchase_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_purchase_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "supplier_id", "file_key_name": "models.fct_purchase_orders", "attached_node": "model.retail_dbt.fct_purchase_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_id", "model": "{{ get_where_subquery(ref('fct_purchase_orders')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_purchase_orders_order_date.d69ebd4960": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_purchase_orders_order_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_purchase_orders_order_date.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_purchase_orders_order_date.d69ebd4960", "fqn": ["retail_dbt", "golden", "not_null_fct_purchase_orders_order_date"], "alias": "not_null_fct_purchase_orders_order_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3449812, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_purchase_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_purchase_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_date", "file_key_name": "models.fct_purchase_orders", "attached_node": "model.retail_dbt.fct_purchase_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('fct_purchase_orders')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_purchase_orders_status.0bda348636": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_purchase_orders_status", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_purchase_orders_status.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_purchase_orders_status.0bda348636", "fqn": ["retail_dbt", "golden", "not_null_fct_purchase_orders_status"], "alias": "not_null_fct_purchase_orders_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3460343, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_purchase_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_purchase_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "status", "file_key_name": "models.fct_purchase_orders", "attached_node": "model.retail_dbt.fct_purchase_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "status", "model": "{{ get_where_subquery(ref('fct_purchase_orders')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_purchase_orders_supplier_name.672f54587e": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_purchase_orders_supplier_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_purchase_orders_supplier_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_purchase_orders_supplier_name.672f54587e", "fqn": ["retail_dbt", "golden", "not_null_fct_purchase_orders_supplier_name"], "alias": "not_null_fct_purchase_orders_supplier_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.347248, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_purchase_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_purchase_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "supplier_name", "file_key_name": "models.fct_purchase_orders", "attached_node": "model.retail_dbt.fct_purchase_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_name", "model": "{{ get_where_subquery(ref('fct_purchase_orders')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_purchase_orders_order_year.5b7ecc0640": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_purchase_orders_order_year", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_purchase_orders_order_year.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_purchase_orders_order_year.5b7ecc0640", "fqn": ["retail_dbt", "golden", "not_null_fct_purchase_orders_order_year"], "alias": "not_null_fct_purchase_orders_order_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.348288, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_purchase_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_purchase_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_year", "file_key_name": "models.fct_purchase_orders", "attached_node": "model.retail_dbt.fct_purchase_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_year", "model": "{{ get_where_subquery(ref('fct_purchase_orders')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_purchase_orders_order_month.9ae7c12a3e": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_purchase_orders_order_month", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_purchase_orders_order_month.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_purchase_orders_order_month.9ae7c12a3e", "fqn": ["retail_dbt", "golden", "not_null_fct_purchase_orders_order_month"], "alias": "not_null_fct_purchase_orders_order_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.349334, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_purchase_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_purchase_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_month", "file_key_name": "models.fct_purchase_orders", "attached_node": "model.retail_dbt.fct_purchase_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_month", "model": "{{ get_where_subquery(ref('fct_purchase_orders')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_purchase_orders_order_day.b3ecf021aa": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_purchase_orders_order_day", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_purchase_orders_order_day.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_purchase_orders_order_day.b3ecf021aa", "fqn": ["retail_dbt", "golden", "not_null_fct_purchase_orders_order_day"], "alias": "not_null_fct_purchase_orders_order_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3504484, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_purchase_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_purchase_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_day", "file_key_name": "models.fct_purchase_orders", "attached_node": "model.retail_dbt.fct_purchase_orders", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_day", "model": "{{ get_where_subquery(ref('fct_purchase_orders')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_returns_return_id.f5e79b5df0": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_returns_return_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_returns_return_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_returns_return_id.f5e79b5df0", "fqn": ["retail_dbt", "golden", "not_null_fct_returns_return_id"], "alias": "not_null_fct_returns_return_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3515093, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_returns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_id", "file_key_name": "models.fct_returns", "attached_node": "model.retail_dbt.fct_returns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "return_id", "model": "{{ get_where_subquery(ref('fct_returns')) }}"}, "namespace": null}}, "test.retail_dbt.unique_fct_returns_return_id.d461048e81": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_fct_returns_return_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_fct_returns_return_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_fct_returns_return_id.d461048e81", "fqn": ["retail_dbt", "golden", "unique_fct_returns_return_id"], "alias": "unique_fct_returns_return_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.353053, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_returns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.fct_returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_id", "file_key_name": "models.fct_returns", "attached_node": "model.retail_dbt.fct_returns", "test_metadata": {"name": "unique", "kwargs": {"column_name": "return_id", "model": "{{ get_where_subquery(ref('fct_returns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_returns_item_id.b07181f0c9": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_returns_item_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_returns_item_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_returns_item_id.b07181f0c9", "fqn": ["retail_dbt", "golden", "not_null_fct_returns_item_id"], "alias": "not_null_fct_returns_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3544128, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_returns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_id", "file_key_name": "models.fct_returns", "attached_node": "model.retail_dbt.fct_returns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('fct_returns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_returns_reason.cfc2bc25cf": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_returns_reason", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_returns_reason.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_returns_reason.cfc2bc25cf", "fqn": ["retail_dbt", "golden", "not_null_fct_returns_reason"], "alias": "not_null_fct_returns_reason", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3555262, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_returns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "reason", "file_key_name": "models.fct_returns", "attached_node": "model.retail_dbt.fct_returns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "reason", "model": "{{ get_where_subquery(ref('fct_returns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_returns_return_date.68cf4a5dd2": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_returns_return_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_returns_return_date.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_returns_return_date.68cf4a5dd2", "fqn": ["retail_dbt", "golden", "not_null_fct_returns_return_date"], "alias": "not_null_fct_returns_return_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.356728, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_returns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_date", "file_key_name": "models.fct_returns", "attached_node": "model.retail_dbt.fct_returns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "return_date", "model": "{{ get_where_subquery(ref('fct_returns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_returns_product_id.eac7c2e9a8": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_returns_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_returns_product_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_returns_product_id.eac7c2e9a8", "fqn": ["retail_dbt", "golden", "not_null_fct_returns_product_id"], "alias": "not_null_fct_returns_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.357828, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_returns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.fct_returns", "attached_node": "model.retail_dbt.fct_returns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('fct_returns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_returns_returned_quantity.7832676150": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_returns_returned_quantity", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_returns_returned_quantity.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_returns_returned_quantity.7832676150", "fqn": ["retail_dbt", "golden", "not_null_fct_returns_returned_quantity"], "alias": "not_null_fct_returns_returned_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3591018, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_returns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "returned_quantity", "file_key_name": "models.fct_returns", "attached_node": "model.retail_dbt.fct_returns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "returned_quantity", "model": "{{ get_where_subquery(ref('fct_returns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_returns_product_name.a9969e8f2c": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_returns_product_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_returns_product_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_returns_product_name.a9969e8f2c", "fqn": ["retail_dbt", "golden", "not_null_fct_returns_product_name"], "alias": "not_null_fct_returns_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.360208, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_returns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.fct_returns", "attached_node": "model.retail_dbt.fct_returns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('fct_returns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_returns_customer_id.0b988c1fc5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_returns_customer_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_returns_customer_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_returns_customer_id.0b988c1fc5", "fqn": ["retail_dbt", "golden", "not_null_fct_returns_customer_id"], "alias": "not_null_fct_returns_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3612697, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_returns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.fct_returns", "attached_node": "model.retail_dbt.fct_returns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('fct_returns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_returns_store_name.ff87589dc0": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_returns_store_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_returns_store_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_returns_store_name.ff87589dc0", "fqn": ["retail_dbt", "golden", "not_null_fct_returns_store_name"], "alias": "not_null_fct_returns_store_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.362383, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_returns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_name", "file_key_name": "models.fct_returns", "attached_node": "model.retail_dbt.fct_returns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_name", "model": "{{ get_where_subquery(ref('fct_returns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_returns_return_year.3559dc73d8": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_returns_return_year", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_returns_return_year.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_returns_return_year.3559dc73d8", "fqn": ["retail_dbt", "golden", "not_null_fct_returns_return_year"], "alias": "not_null_fct_returns_return_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3634145, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_returns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_year", "file_key_name": "models.fct_returns", "attached_node": "model.retail_dbt.fct_returns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "return_year", "model": "{{ get_where_subquery(ref('fct_returns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_returns_return_month.db1bccbc54": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_returns_return_month", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_returns_return_month.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_returns_return_month.db1bccbc54", "fqn": ["retail_dbt", "golden", "not_null_fct_returns_return_month"], "alias": "not_null_fct_returns_return_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3645034, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_returns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_month", "file_key_name": "models.fct_returns", "attached_node": "model.retail_dbt.fct_returns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "return_month", "model": "{{ get_where_subquery(ref('fct_returns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_returns_return_day.04a48b9b1e": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_returns_return_day", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_returns_return_day.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_returns_return_day.04a48b9b1e", "fqn": ["retail_dbt", "golden", "not_null_fct_returns_return_day"], "alias": "not_null_fct_returns_return_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3656495, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_returns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_returns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "return_day", "file_key_name": "models.fct_returns", "attached_node": "model.retail_dbt.fct_returns", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "return_day", "model": "{{ get_where_subquery(ref('fct_returns')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_item_id.4222fa4674": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_item_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_item_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_item_id.4222fa4674", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_item_id"], "alias": "not_null_fct_sales_items_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3667736, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_id", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.unique_fct_sales_items_item_id.5a55da8b8b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_fct_sales_items_item_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_fct_sales_items_item_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_fct_sales_items_item_id.5a55da8b8b", "fqn": ["retail_dbt", "golden", "unique_fct_sales_items_item_id"], "alias": "unique_fct_sales_items_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3678408, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "item_id", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "unique", "kwargs": {"column_name": "item_id", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_transaction_id.64d2810d05": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_transaction_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_transaction_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_transaction_id.64d2810d05", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_transaction_id"], "alias": "not_null_fct_sales_items_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3690412, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_id", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_product_id.994a6131e6": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_product_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_product_id.994a6131e6", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_product_id"], "alias": "not_null_fct_sales_items_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3701537, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_quantity.8ac109260f": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_quantity", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_quantity.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_quantity.8ac109260f", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_quantity"], "alias": "not_null_fct_sales_items_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3713741, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "quantity", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "quantity", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_unit_price.70dbf3e9ee": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_unit_price", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_unit_price.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_unit_price.70dbf3e9ee", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_unit_price"], "alias": "not_null_fct_sales_items_unit_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.37243, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unit_price", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "unit_price", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_discount.e0ac2718d6": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_discount", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_discount.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_discount.e0ac2718d6", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_discount"], "alias": "not_null_fct_sales_items_discount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3734713, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "discount", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "discount", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_tax.80bf57b12a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_tax", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_tax.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_tax.80bf57b12a", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_tax"], "alias": "not_null_fct_sales_items_tax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3746202, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tax", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tax", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_gross_amount.5819b82261": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_gross_amount", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_gross_amount.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_gross_amount.5819b82261", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_gross_amount"], "alias": "not_null_fct_sales_items_gross_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3756833, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "gross_amount", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gross_amount", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_net_amount.e75e88a87c": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_net_amount", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_net_amount.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_net_amount.e75e88a87c", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_net_amount"], "alias": "not_null_fct_sales_items_net_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3767989, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "net_amount", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "net_amount", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_business_validation_flag.b7cc4d94b6": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_business_validation_flag", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_business_validation_flag.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_business_validation_flag.b7cc4d94b6", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_business_validation_flag"], "alias": "not_null_fct_sales_items_business_validation_flag", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3779168, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "business_validation_flag", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "business_validation_flag", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_product_name.c2ed25d3d1": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_product_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_product_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_product_name.c2ed25d3d1", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_product_name"], "alias": "not_null_fct_sales_items_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3789809, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_category_name.3951967161": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_category_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_category_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_category_name.3951967161", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_category_name"], "alias": "not_null_fct_sales_items_category_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.380054, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "category_name", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_name", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_customer_id.ee86af3d0d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_customer_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_customer_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_customer_id.ee86af3d0d", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_customer_id"], "alias": "not_null_fct_sales_items_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3810914, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_store_name.e8d3862422": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_store_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_store_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_store_name.e8d3862422", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_store_name"], "alias": "not_null_fct_sales_items_store_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3821936, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_name", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_name", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_transaction_year.25032ec5f5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_transaction_year", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_transaction_year.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_transaction_year.25032ec5f5", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_transaction_year"], "alias": "not_null_fct_sales_items_transaction_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3833828, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_year", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_year", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_items_transaction_month.24b38791d4": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_items_transaction_month", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_items_transaction_month.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_items_transaction_month.24b38791d4", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_items_transaction_month"], "alias": "not_null_fct_sales_items_transaction_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.384562, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_month", "file_key_name": "models.fct_sales_items", "attached_node": "model.retail_dbt.fct_sales_items", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_month", "model": "{{ get_where_subquery(ref('fct_sales_items')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_transactions_transaction_id.6aa0a0732d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_transactions_transaction_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_transactions_transaction_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_transactions_transaction_id.6aa0a0732d", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_transactions_transaction_id"], "alias": "not_null_fct_sales_transactions_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3856225, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_id", "file_key_name": "models.fct_sales_transactions", "attached_node": "model.retail_dbt.fct_sales_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('fct_sales_transactions')) }}"}, "namespace": null}}, "test.retail_dbt.unique_fct_sales_transactions_transaction_id.dc29ee08f1": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_fct_sales_transactions_transaction_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_fct_sales_transactions_transaction_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_fct_sales_transactions_transaction_id.dc29ee08f1", "fqn": ["retail_dbt", "golden", "unique_fct_sales_transactions_transaction_id"], "alias": "unique_fct_sales_transactions_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3867068, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.fct_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_id", "file_key_name": "models.fct_sales_transactions", "attached_node": "model.retail_dbt.fct_sales_transactions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('fct_sales_transactions')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_transactions_customer_id.a59585ae63": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_transactions_customer_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_transactions_customer_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_transactions_customer_id.a59585ae63", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_transactions_customer_id"], "alias": "not_null_fct_sales_transactions_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3878107, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.fct_sales_transactions", "attached_node": "model.retail_dbt.fct_sales_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('fct_sales_transactions')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_transactions_store_id.f1d1131dbb": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_transactions_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_transactions_store_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_transactions_store_id.f1d1131dbb", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_transactions_store_id"], "alias": "not_null_fct_sales_transactions_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3888588, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.fct_sales_transactions", "attached_node": "model.retail_dbt.fct_sales_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('fct_sales_transactions')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_transactions_employee_id.e803488ec0": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_transactions_employee_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_transactions_employee_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_transactions_employee_id.e803488ec0", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_transactions_employee_id"], "alias": "not_null_fct_sales_transactions_employee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3898914, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "employee_id", "file_key_name": "models.fct_sales_transactions", "attached_node": "model.retail_dbt.fct_sales_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_id", "model": "{{ get_where_subquery(ref('fct_sales_transactions')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_transactions_transaction_date.14a9e3ac61": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_transactions_transaction_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_transactions_transaction_date.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_transactions_transaction_date.14a9e3ac61", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_transactions_transaction_date"], "alias": "not_null_fct_sales_transactions_transaction_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3909163, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_date", "file_key_name": "models.fct_sales_transactions", "attached_node": "model.retail_dbt.fct_sales_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_date", "model": "{{ get_where_subquery(ref('fct_sales_transactions')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_transactions_total_amount.d6bfe3802b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_transactions_total_amount", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_transactions_total_amount.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_transactions_total_amount.d6bfe3802b", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_transactions_total_amount"], "alias": "not_null_fct_sales_transactions_total_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3920457, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "total_amount", "file_key_name": "models.fct_sales_transactions", "attached_node": "model.retail_dbt.fct_sales_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_amount", "model": "{{ get_where_subquery(ref('fct_sales_transactions')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_transactions_payment_id.f38f7868b8": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_transactions_payment_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_transactions_payment_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_transactions_payment_id.f38f7868b8", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_transactions_payment_id"], "alias": "not_null_fct_sales_transactions_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3931036, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.fct_sales_transactions", "attached_node": "model.retail_dbt.fct_sales_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('fct_sales_transactions')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_transactions_customer_name.41e94942fa": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_transactions_customer_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_transactions_customer_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_transactions_customer_name.41e94942fa", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_transactions_customer_name"], "alias": "not_null_fct_sales_transactions_customer_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3942766, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_name", "file_key_name": "models.fct_sales_transactions", "attached_node": "model.retail_dbt.fct_sales_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_name", "model": "{{ get_where_subquery(ref('fct_sales_transactions')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_transactions_store_name.e14a622f9b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_transactions_store_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_transactions_store_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_transactions_store_name.e14a622f9b", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_transactions_store_name"], "alias": "not_null_fct_sales_transactions_store_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3953414, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_name", "file_key_name": "models.fct_sales_transactions", "attached_node": "model.retail_dbt.fct_sales_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_name", "model": "{{ get_where_subquery(ref('fct_sales_transactions')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_transactions_employee_name.48c171139a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_transactions_employee_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_transactions_employee_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_transactions_employee_name.48c171139a", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_transactions_employee_name"], "alias": "not_null_fct_sales_transactions_employee_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.396502, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "employee_name", "file_key_name": "models.fct_sales_transactions", "attached_node": "model.retail_dbt.fct_sales_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_name", "model": "{{ get_where_subquery(ref('fct_sales_transactions')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_transactions_payment_method.65924986c5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_transactions_payment_method", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_transactions_payment_method.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_transactions_payment_method.65924986c5", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_transactions_payment_method"], "alias": "not_null_fct_sales_transactions_payment_method", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.397608, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method", "file_key_name": "models.fct_sales_transactions", "attached_node": "model.retail_dbt.fct_sales_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_method", "model": "{{ get_where_subquery(ref('fct_sales_transactions')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_transactions_transaction_year.14b2ae0c7e": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_transactions_transaction_year", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_transactions_transaction_year.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_transactions_transaction_year.14b2ae0c7e", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_transactions_transaction_year"], "alias": "not_null_fct_sales_transactions_transaction_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3986857, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_year", "file_key_name": "models.fct_sales_transactions", "attached_node": "model.retail_dbt.fct_sales_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_year", "model": "{{ get_where_subquery(ref('fct_sales_transactions')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_transactions_transaction_month.50cb49dcc6": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_transactions_transaction_month", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_transactions_transaction_month.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_transactions_transaction_month.50cb49dcc6", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_transactions_transaction_month"], "alias": "not_null_fct_sales_transactions_transaction_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.3998923, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_month", "file_key_name": "models.fct_sales_transactions", "attached_node": "model.retail_dbt.fct_sales_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_month", "model": "{{ get_where_subquery(ref('fct_sales_transactions')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_sales_transactions_transaction_day.ff2426df86": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_sales_transactions_transaction_day", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_sales_transactions_transaction_day.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_sales_transactions_transaction_day.ff2426df86", "fqn": ["retail_dbt", "golden", "not_null_fct_sales_transactions_transaction_day"], "alias": "not_null_fct_sales_transactions_transaction_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4009488, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_sales_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_sales_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "transaction_day", "file_key_name": "models.fct_sales_transactions", "attached_node": "model.retail_dbt.fct_sales_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_day", "model": "{{ get_where_subquery(ref('fct_sales_transactions')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_shipments_shipment_id.7b472eaf5b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_shipments_shipment_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_shipments_shipment_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_shipments_shipment_id.7b472eaf5b", "fqn": ["retail_dbt", "golden", "not_null_fct_shipments_shipment_id"], "alias": "not_null_fct_shipments_shipment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4020112, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipment_id", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shipment_id", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.unique_fct_shipments_shipment_id.c7c159f82c": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_fct_shipments_shipment_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_fct_shipments_shipment_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_fct_shipments_shipment_id.c7c159f82c", "fqn": ["retail_dbt", "golden", "unique_fct_shipments_shipment_id"], "alias": "unique_fct_shipments_shipment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4030678, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipment_id", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "unique", "kwargs": {"column_name": "shipment_id", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_shipments_order_id.31824196fb": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_shipments_order_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_shipments_order_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_shipments_order_id.31824196fb", "fqn": ["retail_dbt", "golden", "not_null_fct_shipments_order_id"], "alias": "not_null_fct_shipments_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.404127, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_shipments_store_id.cbaa0193f1": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_shipments_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_shipments_store_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_shipments_store_id.cbaa0193f1", "fqn": ["retail_dbt", "golden", "not_null_fct_shipments_store_id"], "alias": "not_null_fct_shipments_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4052682, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_shipments_shipped_date.a55e53121a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_shipments_shipped_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_shipments_shipped_date.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_shipments_shipped_date.a55e53121a", "fqn": ["retail_dbt", "golden", "not_null_fct_shipments_shipped_date"], "alias": "not_null_fct_shipments_shipped_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4063191, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipped_date", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shipped_date", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_shipments_received_date.a1d7a60517": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_shipments_received_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_shipments_received_date.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_shipments_received_date.a1d7a60517", "fqn": ["retail_dbt", "golden", "not_null_fct_shipments_received_date"], "alias": "not_null_fct_shipments_received_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4073646, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "received_date", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "received_date", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_shipments_supplier_id.6a9b9eadca": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_shipments_supplier_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_shipments_supplier_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_shipments_supplier_id.6a9b9eadca", "fqn": ["retail_dbt", "golden", "not_null_fct_shipments_supplier_id"], "alias": "not_null_fct_shipments_supplier_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4084022, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "supplier_id", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_id", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_shipments_supplier_name.db948b952f": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_shipments_supplier_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_shipments_supplier_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_shipments_supplier_name.db948b952f", "fqn": ["retail_dbt", "golden", "not_null_fct_shipments_supplier_name"], "alias": "not_null_fct_shipments_supplier_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.409518, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "supplier_name", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_name", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_shipments_store_name.99e48f1e8d": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_shipments_store_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_shipments_store_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_shipments_store_name.99e48f1e8d", "fqn": ["retail_dbt", "golden", "not_null_fct_shipments_store_name"], "alias": "not_null_fct_shipments_store_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4106681, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_name", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_name", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_shipments_shipped_year.23a61ed5d5": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_shipments_shipped_year", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_shipments_shipped_year.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_shipments_shipped_year.23a61ed5d5", "fqn": ["retail_dbt", "golden", "not_null_fct_shipments_shipped_year"], "alias": "not_null_fct_shipments_shipped_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4117289, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipped_year", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shipped_year", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_shipments_shipped_month.17477a85cc": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_shipments_shipped_month", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_shipments_shipped_month.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_shipments_shipped_month.17477a85cc", "fqn": ["retail_dbt", "golden", "not_null_fct_shipments_shipped_month"], "alias": "not_null_fct_shipments_shipped_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4127862, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipped_month", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shipped_month", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_shipments_shipped_day.3e35b68843": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_shipments_shipped_day", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_shipments_shipped_day.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_shipments_shipped_day.3e35b68843", "fqn": ["retail_dbt", "golden", "not_null_fct_shipments_shipped_day"], "alias": "not_null_fct_shipments_shipped_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.413882, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipped_day", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shipped_day", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_shipments_received_year.10db577f8f": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_shipments_received_year", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_shipments_received_year.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_shipments_received_year.10db577f8f", "fqn": ["retail_dbt", "golden", "not_null_fct_shipments_received_year"], "alias": "not_null_fct_shipments_received_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.415061, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "received_year", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "received_year", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_shipments_received_month.3a25060656": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_shipments_received_month", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_shipments_received_month.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_shipments_received_month.3a25060656", "fqn": ["retail_dbt", "golden", "not_null_fct_shipments_received_month"], "alias": "not_null_fct_shipments_received_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4167833, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "received_month", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "received_month", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_shipments_received_day.e3c9436f10": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_shipments_received_day", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_shipments_received_day.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_shipments_received_day.e3c9436f10", "fqn": ["retail_dbt", "golden", "not_null_fct_shipments_received_day"], "alias": "not_null_fct_shipments_received_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.418206, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "received_day", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "received_day", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_shipments_shipment_duration_days.5f1f9fe2d0": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_shipments_shipment_duration_days", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_shipments_shipment_duration_days.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_shipments_shipment_duration_days.5f1f9fe2d0", "fqn": ["retail_dbt", "golden", "not_null_fct_shipments_shipment_duration_days"], "alias": "not_null_fct_shipments_shipment_duration_days", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.419263, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_shipments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_shipments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "shipment_duration_days", "file_key_name": "models.fct_shipments", "attached_node": "model.retail_dbt.fct_shipments", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "shipment_duration_days", "model": "{{ get_where_subquery(ref('fct_shipments')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_stock_movements_movement_id.5325f52ab6": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_stock_movements_movement_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_stock_movements_movement_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_stock_movements_movement_id.5325f52ab6", "fqn": ["retail_dbt", "golden", "not_null_fct_stock_movements_movement_id"], "alias": "not_null_fct_stock_movements_movement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.420311, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_stock_movements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_stock_movements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "movement_id", "file_key_name": "models.fct_stock_movements", "attached_node": "model.retail_dbt.fct_stock_movements", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "movement_id", "model": "{{ get_where_subquery(ref('fct_stock_movements')) }}"}, "namespace": null}}, "test.retail_dbt.unique_fct_stock_movements_movement_id.4f94955333": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_fct_stock_movements_movement_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_fct_stock_movements_movement_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_fct_stock_movements_movement_id.4f94955333", "fqn": ["retail_dbt", "golden", "unique_fct_stock_movements_movement_id"], "alias": "unique_fct_stock_movements_movement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4213545, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_stock_movements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.fct_stock_movements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "movement_id", "file_key_name": "models.fct_stock_movements", "attached_node": "model.retail_dbt.fct_stock_movements", "test_metadata": {"name": "unique", "kwargs": {"column_name": "movement_id", "model": "{{ get_where_subquery(ref('fct_stock_movements')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_stock_movements_product_id.ed24f6fe8a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_stock_movements_product_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_stock_movements_product_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_stock_movements_product_id.ed24f6fe8a", "fqn": ["retail_dbt", "golden", "not_null_fct_stock_movements_product_id"], "alias": "not_null_fct_stock_movements_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4224684, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_stock_movements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_stock_movements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.fct_stock_movements", "attached_node": "model.retail_dbt.fct_stock_movements", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('fct_stock_movements')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_stock_movements_store_id.43d1e01385": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_stock_movements_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_stock_movements_store_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_stock_movements_store_id.43d1e01385", "fqn": ["retail_dbt", "golden", "not_null_fct_stock_movements_store_id"], "alias": "not_null_fct_stock_movements_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.423786, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_stock_movements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_stock_movements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.fct_stock_movements", "attached_node": "model.retail_dbt.fct_stock_movements", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('fct_stock_movements')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_stock_movements_movement_type.2f78394096": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_stock_movements_movement_type", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_stock_movements_movement_type.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_stock_movements_movement_type.2f78394096", "fqn": ["retail_dbt", "golden", "not_null_fct_stock_movements_movement_type"], "alias": "not_null_fct_stock_movements_movement_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.424849, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_stock_movements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_stock_movements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "movement_type", "file_key_name": "models.fct_stock_movements", "attached_node": "model.retail_dbt.fct_stock_movements", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "movement_type", "model": "{{ get_where_subquery(ref('fct_stock_movements')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_stock_movements_quantity.ed8ca7eb3a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_stock_movements_quantity", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_stock_movements_quantity.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_stock_movements_quantity.ed8ca7eb3a", "fqn": ["retail_dbt", "golden", "not_null_fct_stock_movements_quantity"], "alias": "not_null_fct_stock_movements_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4259477, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_stock_movements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_stock_movements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "quantity", "file_key_name": "models.fct_stock_movements", "attached_node": "model.retail_dbt.fct_stock_movements", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "quantity", "model": "{{ get_where_subquery(ref('fct_stock_movements')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_stock_movements_movement_date.af4682980f": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_stock_movements_movement_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_stock_movements_movement_date.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_stock_movements_movement_date.af4682980f", "fqn": ["retail_dbt", "golden", "not_null_fct_stock_movements_movement_date"], "alias": "not_null_fct_stock_movements_movement_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4270399, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_stock_movements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_stock_movements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "movement_date", "file_key_name": "models.fct_stock_movements", "attached_node": "model.retail_dbt.fct_stock_movements", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "movement_date", "model": "{{ get_where_subquery(ref('fct_stock_movements')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_stock_movements_product_name.f6fcc3190b": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_stock_movements_product_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_stock_movements_product_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_stock_movements_product_name.f6fcc3190b", "fqn": ["retail_dbt", "golden", "not_null_fct_stock_movements_product_name"], "alias": "not_null_fct_stock_movements_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4280837, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_stock_movements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_stock_movements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.fct_stock_movements", "attached_node": "model.retail_dbt.fct_stock_movements", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('fct_stock_movements')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_stock_movements_store_name.3dba1692e7": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_stock_movements_store_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_stock_movements_store_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_stock_movements_store_name.3dba1692e7", "fqn": ["retail_dbt", "golden", "not_null_fct_stock_movements_store_name"], "alias": "not_null_fct_stock_movements_store_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4291961, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_stock_movements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_stock_movements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_name", "file_key_name": "models.fct_stock_movements", "attached_node": "model.retail_dbt.fct_stock_movements", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_name", "model": "{{ get_where_subquery(ref('fct_stock_movements')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_stock_movements_movement_year.d2b6fa2c13": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_stock_movements_movement_year", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_stock_movements_movement_year.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_stock_movements_movement_year.d2b6fa2c13", "fqn": ["retail_dbt", "golden", "not_null_fct_stock_movements_movement_year"], "alias": "not_null_fct_stock_movements_movement_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4303324, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_stock_movements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_stock_movements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "movement_year", "file_key_name": "models.fct_stock_movements", "attached_node": "model.retail_dbt.fct_stock_movements", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "movement_year", "model": "{{ get_where_subquery(ref('fct_stock_movements')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_stock_movements_movement_month.ce0c4afedd": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_stock_movements_movement_month", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_stock_movements_movement_month.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_stock_movements_movement_month.ce0c4afedd", "fqn": ["retail_dbt", "golden", "not_null_fct_stock_movements_movement_month"], "alias": "not_null_fct_stock_movements_movement_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4315891, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_stock_movements", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_stock_movements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "movement_month", "file_key_name": "models.fct_stock_movements", "attached_node": "model.retail_dbt.fct_stock_movements", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "movement_month", "model": "{{ get_where_subquery(ref('fct_stock_movements')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_store_visits_visit_id.b04eec3a54": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_store_visits_visit_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_store_visits_visit_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_store_visits_visit_id.b04eec3a54", "fqn": ["retail_dbt", "golden", "not_null_fct_store_visits_visit_id"], "alias": "not_null_fct_store_visits_visit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4326355, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_store_visits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_store_visits"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visit_id", "file_key_name": "models.fct_store_visits", "attached_node": "model.retail_dbt.fct_store_visits", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_id", "model": "{{ get_where_subquery(ref('fct_store_visits')) }}"}, "namespace": null}}, "test.retail_dbt.unique_fct_store_visits_visit_id.182732ac28": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "unique_fct_store_visits_visit_id", "resource_type": "test", "package_name": "retail_dbt", "path": "unique_fct_store_visits_visit_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.unique_fct_store_visits_visit_id.182732ac28", "fqn": ["retail_dbt", "golden", "unique_fct_store_visits_visit_id"], "alias": "unique_fct_store_visits_visit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4337027, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_store_visits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.retail_dbt.fct_store_visits"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visit_id", "file_key_name": "models.fct_store_visits", "attached_node": "model.retail_dbt.fct_store_visits", "test_metadata": {"name": "unique", "kwargs": {"column_name": "visit_id", "model": "{{ get_where_subquery(ref('fct_store_visits')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_store_visits_customer_id.a7afd7afb0": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_store_visits_customer_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_store_visits_customer_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_store_visits_customer_id.a7afd7afb0", "fqn": ["retail_dbt", "golden", "not_null_fct_store_visits_customer_id"], "alias": "not_null_fct_store_visits_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4348845, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_store_visits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_store_visits"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.fct_store_visits", "attached_node": "model.retail_dbt.fct_store_visits", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('fct_store_visits')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_store_visits_store_id.7967e95abb": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_store_visits_store_id", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_store_visits_store_id.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_store_visits_store_id.7967e95abb", "fqn": ["retail_dbt", "golden", "not_null_fct_store_visits_store_id"], "alias": "not_null_fct_store_visits_store_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4359956, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_store_visits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_store_visits"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_id", "file_key_name": "models.fct_store_visits", "attached_node": "model.retail_dbt.fct_store_visits", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_id", "model": "{{ get_where_subquery(ref('fct_store_visits')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_store_visits_visit_date.888b3ee58a": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_store_visits_visit_date", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_store_visits_visit_date.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_store_visits_visit_date.888b3ee58a", "fqn": ["retail_dbt", "golden", "not_null_fct_store_visits_visit_date"], "alias": "not_null_fct_store_visits_visit_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4371207, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_store_visits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_store_visits"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visit_date", "file_key_name": "models.fct_store_visits", "attached_node": "model.retail_dbt.fct_store_visits", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_date", "model": "{{ get_where_subquery(ref('fct_store_visits')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_store_visits_customer_name.210deecb76": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_store_visits_customer_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_store_visits_customer_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_store_visits_customer_name.210deecb76", "fqn": ["retail_dbt", "golden", "not_null_fct_store_visits_customer_name"], "alias": "not_null_fct_store_visits_customer_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4381776, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_store_visits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_store_visits"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_name", "file_key_name": "models.fct_store_visits", "attached_node": "model.retail_dbt.fct_store_visits", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_name", "model": "{{ get_where_subquery(ref('fct_store_visits')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_store_visits_store_name.68be67ae31": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_store_visits_store_name", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_store_visits_store_name.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_store_visits_store_name.68be67ae31", "fqn": ["retail_dbt", "golden", "not_null_fct_store_visits_store_name"], "alias": "not_null_fct_store_visits_store_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4392128, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_store_visits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_store_visits"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "store_name", "file_key_name": "models.fct_store_visits", "attached_node": "model.retail_dbt.fct_store_visits", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "store_name", "model": "{{ get_where_subquery(ref('fct_store_visits')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_store_visits_visit_year.a29b118227": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_store_visits_visit_year", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_store_visits_visit_year.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_store_visits_visit_year.a29b118227", "fqn": ["retail_dbt", "golden", "not_null_fct_store_visits_visit_year"], "alias": "not_null_fct_store_visits_visit_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4404893, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_store_visits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_store_visits"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visit_year", "file_key_name": "models.fct_store_visits", "attached_node": "model.retail_dbt.fct_store_visits", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_year", "model": "{{ get_where_subquery(ref('fct_store_visits')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_store_visits_visit_month.64aa632157": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_store_visits_visit_month", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_store_visits_visit_month.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_store_visits_visit_month.64aa632157", "fqn": ["retail_dbt", "golden", "not_null_fct_store_visits_visit_month"], "alias": "not_null_fct_store_visits_visit_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4415486, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_store_visits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_store_visits"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visit_month", "file_key_name": "models.fct_store_visits", "attached_node": "model.retail_dbt.fct_store_visits", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_month", "model": "{{ get_where_subquery(ref('fct_store_visits')) }}"}, "namespace": null}}, "test.retail_dbt.not_null_fct_store_visits_visit_day.6e9b93eb48": {"database": "postgres", "schema": "silver_dbt_test__audit", "name": "not_null_fct_store_visits_visit_day", "resource_type": "test", "package_name": "retail_dbt", "path": "not_null_fct_store_visits_visit_day.sql", "original_file_path": "models/golden/schema.yml", "unique_id": "test.retail_dbt.not_null_fct_store_visits_visit_day.6e9b93eb48", "fqn": ["retail_dbt", "golden", "not_null_fct_store_visits_visit_day"], "alias": "not_null_fct_store_visits_visit_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756221681.4426205, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fct_store_visits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.retail_dbt.fct_store_visits"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "visit_day", "file_key_name": "models.fct_store_visits", "attached_node": "model.retail_dbt.fct_store_visits", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_day", "model": "{{ get_where_subquery(ref('fct_store_visits')) }}"}, "namespace": null}}}, "sources": {"source.retail_dbt.raw.brands": {"database": "postgres", "schema": "raw", "name": "brands", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.brands", "fqn": ["retail_dbt", "raw", "brands"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "brands", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"brands\"", "created_at": 1756221681.4587579, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.campaigns": {"database": "postgres", "schema": "raw", "name": "campaigns", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.campaigns", "fqn": ["retail_dbt", "raw", "campaigns"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "campaigns", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"campaigns\"", "created_at": 1756221681.4599655, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.categories": {"database": "postgres", "schema": "raw", "name": "categories", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.categories", "fqn": ["retail_dbt", "raw", "categories"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "categories", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"categories\"", "created_at": 1756221681.4603512, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.customer_feedback": {"database": "postgres", "schema": "raw", "name": "customer_feedback", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.customer_feedback", "fqn": ["retail_dbt", "raw", "customer_feedback"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "customer_feedback", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"customer_feedback\"", "created_at": 1756221681.4607027, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.customers": {"database": "postgres", "schema": "raw", "name": "customers", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.customers", "fqn": ["retail_dbt", "raw", "customers"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "customers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"customers\"", "created_at": 1756221681.4611022, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.discount_rules": {"database": "postgres", "schema": "raw", "name": "discount_rules", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.discount_rules", "fqn": ["retail_dbt", "raw", "discount_rules"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "discount_rules", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"discount_rules\"", "created_at": 1756221681.461455, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.employees": {"database": "postgres", "schema": "raw", "name": "employees", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.employees", "fqn": ["retail_dbt", "raw", "employees"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "employees", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"employees\"", "created_at": 1756221681.461808, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.inventory": {"database": "postgres", "schema": "raw", "name": "inventory", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.inventory", "fqn": ["retail_dbt", "raw", "inventory"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "inventory", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"inventory\"", "created_at": 1756221681.4622035, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.loyalty_programs": {"database": "postgres", "schema": "raw", "name": "loyalty_programs", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.loyalty_programs", "fqn": ["retail_dbt", "raw", "loyalty_programs"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "loyalty_programs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"loyalty_programs\"", "created_at": 1756221681.4625454, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.payments": {"database": "postgres", "schema": "raw", "name": "payments", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.payments", "fqn": ["retail_dbt", "raw", "payments"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "payments", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"payments\"", "created_at": 1756221681.463089, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.pricing_history": {"database": "postgres", "schema": "raw", "name": "pricing_history", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.pricing_history", "fqn": ["retail_dbt", "raw", "pricing_history"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "pricing_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"pricing_history\"", "created_at": 1756221681.4635644, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.products": {"database": "postgres", "schema": "raw", "name": "products", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.products", "fqn": ["retail_dbt", "raw", "products"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "products", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"products\"", "created_at": 1756221681.4640229, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.promotions": {"database": "postgres", "schema": "raw", "name": "promotions", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.promotions", "fqn": ["retail_dbt", "raw", "promotions"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "promotions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"promotions\"", "created_at": 1756221681.4643776, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.purchase_orders": {"database": "postgres", "schema": "raw", "name": "purchase_orders", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.purchase_orders", "fqn": ["retail_dbt", "raw", "purchase_orders"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "purchase_orders", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"purchase_orders\"", "created_at": 1756221681.4647171, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.returns": {"database": "postgres", "schema": "raw", "name": "returns", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.returns", "fqn": ["retail_dbt", "raw", "returns"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "returns", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"returns\"", "created_at": 1756221681.465115, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.sales_items": {"database": "postgres", "schema": "raw", "name": "sales_items", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.sales_items", "fqn": ["retail_dbt", "raw", "sales_items"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "sales_items", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"sales_items\"", "created_at": 1756221681.4654572, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.sales_transactions": {"database": "postgres", "schema": "raw", "name": "sales_transactions", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.sales_transactions", "fqn": ["retail_dbt", "raw", "sales_transactions"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "sales_transactions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"sales_transactions\"", "created_at": 1756221681.4657845, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.shipments": {"database": "postgres", "schema": "raw", "name": "shipments", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.shipments", "fqn": ["retail_dbt", "raw", "shipments"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "shipments", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"shipments\"", "created_at": 1756221681.466231, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.stock_movements": {"database": "postgres", "schema": "raw", "name": "stock_movements", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.stock_movements", "fqn": ["retail_dbt", "raw", "stock_movements"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "stock_movements", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"stock_movements\"", "created_at": 1756221681.4665828, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.store_visits": {"database": "postgres", "schema": "raw", "name": "store_visits", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.store_visits", "fqn": ["retail_dbt", "raw", "store_visits"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "store_visits", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"store_visits\"", "created_at": 1756221681.466969, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.stores": {"database": "postgres", "schema": "raw", "name": "stores", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.stores", "fqn": ["retail_dbt", "raw", "stores"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "stores", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"stores\"", "created_at": 1756221681.4673128, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.suppliers": {"database": "postgres", "schema": "raw", "name": "suppliers", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.suppliers", "fqn": ["retail_dbt", "raw", "suppliers"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "suppliers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"suppliers\"", "created_at": 1756221681.4676962, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}, "source.retail_dbt.raw.tax_rules": {"database": "postgres", "schema": "raw", "name": "tax_rules", "resource_type": "source", "package_name": "retail_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.retail_dbt.raw.tax_rules", "fqn": ["retail_dbt", "raw", "tax_rules"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "tax_rules", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "loaded_at_query": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "patch_path": null, "unrendered_config": {"loaded_at_field": null, "loaded_at_query": null, "meta": {}, "tags": []}, "relation_name": "\"postgres\".\"raw\".\"tax_rules\"", "created_at": 1756221681.46808, "unrendered_database": null, "unrendered_schema": "raw", "doc_blocks": []}}, "macros": {"macro.retail_dbt.stage_from_source": {"name": "stage_from_source", "resource_type": "macro", "package_name": "retail_dbt", "path": "macros/staging/stage_from_source.sql", "original_file_path": "macros/staging/stage_from_source.sql", "unique_id": "macro.retail_dbt.stage_from_source", "macro_sql": "{% macro stage_from_source(src_schema, src_name) %}\n  {% set rel = source(src_schema, src_name) %}\n  {% set cols = adapter.get_columns_in_relation(rel) %}\n\n  {# typing hints per table come from vars: staging_types.<table_name> #}\n  {% set all_types = var('staging_types', {}) %}\n  {% set cfg = all_types.get(src_name, {}) %}\n  {% set force_numeric   = cfg.get('force_numeric',   []) %}\n  {% set force_date      = cfg.get('force_date',      []) %}\n  {% set force_timestamp = cfg.get('force_timestamp', []) %}\n  {% set force_boolean   = cfg.get('force_boolean',   []) %}\n  {% set force_text      = cfg.get('force_text',      []) %}\n\n  select\n    {% for c in cols %}\n      {% set chosen = decide_type(\n          c,\n          force_numeric=force_numeric,\n          force_date=force_date,\n          force_timestamp=force_timestamp,\n          force_boolean=force_boolean,\n          force_text=force_text\n      ) %}\n      {{ clean_expr_with_type(c, chosen) }}{% if not loop.last %}, {% endif %}\n    {% endfor %}\n  from {{ rel }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2576604, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2584202, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2585895, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2612815, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.261976, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2623746, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2627816, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2633445, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2639015, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2641244, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2645328, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2650347, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2662213, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2664666, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2669182, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.267258, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2678576, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  {% if relation.type == 'materialized_view' -%}\n    {% set relation_type = \"materialized view\" %}\n  {%- else -%}\n    {%- set relation_type = relation.type -%}\n  {%- endif -%}\n  comment on {{ relation_type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2683415, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.269089, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2693458, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.269493, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2697089, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2700152, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2702923, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.270517, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2706873, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2708614, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2710154, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2722452, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.272662, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    update {{ target }}\n    set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }}::text = {{ target }}.{{ columns.dbt_scd_id }}::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      {% if config.get(\"dbt_valid_to_current\") %}\n        and ({{ target }}.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or {{ target }}.{{ columns.dbt_valid_to }} is null);\n      {% else %}\n        and {{ target }}.{{ columns.dbt_valid_to }} is null;\n      {% endif %}\n\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2742145, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2747352, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_microbatch_sql": {"name": "postgres__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_microbatch_sql", "macro_sql": "{% macro postgres__get_incremental_microbatch_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) %}\n  {% else %}\n    {{ exceptions.raise_compiler_error(\"dbt-postgres 'microbatch' requires a `unique_key` config\") }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql", "macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2751768, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2755692, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}{{ ';' if not loop.last else \"\" }}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2761295, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.276323, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2770104, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }}\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\t{{ ';' if not loop.last else \"\" }}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.277647, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2780604, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2782536, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.278471, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2786415, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.279338, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2795696, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.279747, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.280514, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2807384, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2833276, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.283661, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2842903, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2848496, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.285418, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.285647, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.286458, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2866895, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.28787, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.288365, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.289179, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2897785, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2898839, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2902284, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2908525, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2912414, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2916005, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2921665, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.292348, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2925394, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.292998, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2932637, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2934415, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.293633, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2937884, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2943141, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2946491, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2948992, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2951462, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2954655, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2960036, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2965586, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2970583, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2973316, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2977, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2985218, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2987225, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.299235, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2996373, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.2999256, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3003488, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3005676, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3007853, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3010578, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.301741, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3020043, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.302224, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3034787, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.303633, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3038354, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.303978, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3044744, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3049963, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3051963, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.305477, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3057318, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3059914, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3063025, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3065822, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3074315, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3076637, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3079681, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.308283, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3097234, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3102455, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3104813, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.310717, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3116727, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.311993, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3122764, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3125997, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3128145, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3130033, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3132696, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3135705, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.313808, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.314254, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3147373, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3149657, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3151839, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3154323, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3156385, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3158276, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.316068, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3163161, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3168483, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3170316, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3172045, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3173792, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_postgres.postgres__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.317884, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.318101, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.318201, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3184695, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.318678, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3199599, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3201597, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3205745, "supported_languages": null}, "macro.dbt.get_list_of_column_names": {"name": "get_list_of_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_list_of_column_names", "macro_sql": "\n\n{%- macro get_list_of_column_names(columns) -%}\n  {% set col_names = [] %}\n  {% for col in columns %}\n    {% do col_names.append(col.name) %}\n  {% endfor %}\n  {{ return(col_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3209245, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3211772, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3214765, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3216977, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3231924, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.323652, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3238776, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3242984, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3245888, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3253803, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.325693, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.quoted }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.quoted }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3267071, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3270426, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3273985, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.327773, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3280075, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3282003, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3284743, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.329509, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.329752, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3299286, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3301136, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3302867, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3309577, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3314939, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.331953, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.332565, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3337076, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.338558, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.341117, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3413324, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3416593, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3428664, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3430784, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3432932, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3450773, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3468902, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3492892, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column {{ adapter.quote(column.name) }} {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.349692, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3498943, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3500068, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3502378, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3503904, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3506298, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3509092, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n            {%- if strategy.hard_deletes == 'new_record' %}\n            and not (\n                --avoid updating the record's valid_to if the latest entry is marked as deleted\n                snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n                and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n            {%- endif %}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set snapshotted_cols = get_list_of_column_names(get_columns_in_relation(target_relation)) %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {#\n                If a column has been added to the source it won't yet exist in the\n                snapshotted table so we insert a null value as a placeholder for the column.\n             #}\n            {%- for col in source_sql_cols -%}\n            {%- if col.name in snapshotted_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {%- else -%}\n            NULL as {{ adapter.quote(col.column) }},\n            {%- endif -%}\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n        and not (\n            --avoid inserting a new record if the latest one is marked as deleted\n            snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n            and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_list_of_column_names", "macro.dbt.get_columns_in_relation", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3560019, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3562987, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3569596, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3575084, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3582788, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3588002, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3591816, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.359611, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3603418, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3606071, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.36086, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3635392, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.365417, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3659081, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3663068, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3678577, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.368137, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3689275, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3714988, "supported_languages": ["sql"]}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3722284, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3725452, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3727744, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3731081, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3733752, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.373721, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.373942, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3742917, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3746672, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3748622, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3750806, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3752978, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.375646, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3763416, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3775477, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.379813, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.380161, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3810732, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.381394, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3822203, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.383587, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3851, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.386605, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3876321, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3928006, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3938076, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3945627, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3954015, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3956804, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.396574, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% if target_relation.database == defer_relation.database and\n            target_relation.schema == defer_relation.schema and\n            target_relation.identifier == defer_relation.identifier %}\n        {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n      {% else %}\n        {% call statement('main') %}\n            {{ create_or_replace_clone(target_relation, defer_relation) }}\n        {% endcall %}\n      {% endif %}\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.3996449, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4000528, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4002786, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4005597, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4007046, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4011054, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4015725, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- set column_name_to_quoted = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%-   do column_name_to_quoted.update({column.name|lower: column.quoted}) -%}\n  {%- endfor -%}\n\n  {%- set expected_column_names_quoted = [] -%}\n  {%- for column_name in tested_expected_column_names -%}\n  {%-   do expected_column_names_quoted.append(column_name_to_quoted[column_name|lower]) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types, column_name_to_quoted) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, expected_column_names_quoted) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4038117, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4044735, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.40485, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4051435, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4058745, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4087548, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4122841, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.413446, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4145641, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4148414, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.415483, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4157183, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4158862, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.416084, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4162545, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.41645, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4165976, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4172037, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4174345, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.418918, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4194002, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4197185, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4202719, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4206026, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4209428, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4214346, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4218807, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4222958, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4225557, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4229252, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4234176, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4237897, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4240427, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.424556, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4250774, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4255111, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4258153, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4264197, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4268901, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4271286, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4273987, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4276361, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4283066, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4297829, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4303675, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.430874, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4311128, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.431515, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4318328, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4320889, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4324527, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4326372, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4329298, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.433086, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4337456, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4340837, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.43447, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4346592, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.434972, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4351716, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4355392, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.435707, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.436012, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4362297, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.436654, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.436846, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4370558, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.43763, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.437932, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4381444, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4388134, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4390104, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4403477, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4405875, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4409187, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4412408, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4414232, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4424994, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.442696, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4434223, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4437478, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.44394, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4454641, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4459696, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4464335, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4471693, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4473896, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4479806, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4488022, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.449367, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.449587, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4498417, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4502075, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4503736, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4506843, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4509158, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4512372, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4514287, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4530127, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4536781, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4541035, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4550235, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4565527, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4574964, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4577951, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4582314, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4584067, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4587, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4588988, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4592743, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4596255, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.459962, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4601073, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4604695, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4606733, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4610581, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.461247, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4615827, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.461749, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4620757, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4621809, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4627357, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4634778, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.463754, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4642243, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4645042, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4646068, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4650133, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4652288, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4657865, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4666848, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4670513, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4672356, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4675922, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4677973, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4681633, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4683356, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4686248, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4687562, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4691284, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4693081, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4697337, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4700217, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4703555, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4706495, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.470779, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.471123, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4713192, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4716017, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4717891, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4722064, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4725409, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4729357, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.473251, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.473432, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4740005, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4746773, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4749534, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4755886, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4759722, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.476156, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.476455, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.476592, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4774215, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.477615, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4778085, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4780352, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4782548, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4784415, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.478631, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4788344, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4790814, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4792728, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4794636, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4796455, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.479831, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4800532, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4804935, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4807882, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4811628, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4813478, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   set column_name_to_quoted = {} -%}\n{%-   for column in columns_in_relation -%}\n\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-     do column_name_to_quoted.update({column.name|lower: column.quoted}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4847786, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types, column_name_to_quoted) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4854994, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4869492, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4872034, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4873292, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4879255, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.488251, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4886575, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4890137, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.489879, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4908383, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as datetime )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as datetime )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4916823, "supported_languages": null}, "macro.dbt_date.trino__get_base_dates": {"name": "trino__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.trino__get_base_dates", "macro_sql": "{% macro trino__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.now()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4926467, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4939878, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.496626, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.4995313, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.499989, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.500235, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5004199, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5005553, "supported_languages": null}, "macro.dbt_date.spark__to_unixtimestamp": {"name": "spark__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.spark__to_unixtimestamp", "macro_sql": "\n\n{%- macro spark__to_unixtimestamp(timestamp) -%}\n    unix_timestamp({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5006883, "supported_languages": null}, "macro.dbt_date.trino__to_unixtimestamp": {"name": "trino__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__to_unixtimestamp", "macro_sql": "\n\n{%- macro trino__to_unixtimestamp(timestamp) -%}\n    to_unixtime({{ timestamp }} AT TIME ZONE 'UTC')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5008216, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5011501, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5017395, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.501955, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.502198, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5023825, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5025551, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_start": {"name": "duckdb__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_start", "macro_sql": "\n\n{%- macro duckdb__iso_week_start(date) -%}\n{{ return(dbt_date.postgres__iso_week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5027246, "supported_languages": null}, "macro.dbt_date.spark__iso_week_start": {"name": "spark__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.spark__iso_week_start", "macro_sql": "\n\n{%- macro spark__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.502887, "supported_languages": null}, "macro.dbt_date.trino__iso_week_start": {"name": "trino__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.trino__iso_week_start", "macro_sql": "\n\n{%- macro trino__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5030503, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.postgres__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5038512, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5041173, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5043306, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5046177, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5048428, "supported_languages": null}, "macro.dbt_date.duckdb__convert_timezone": {"name": "duckdb__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.duckdb__convert_timezone", "macro_sql": "{% macro duckdb__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.postgres__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.postgres__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5050552, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.50534, "supported_languages": null}, "macro.dbt_date.trino__convert_timezone": {"name": "trino__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.trino__convert_timezone", "macro_sql": "{%- macro trino__convert_timezone(column, target_tz, source_tz) -%}\n    cast((at_timezone(with_timezone(cast({{ column }} as {{ dbt.type_timestamp() }}), '{{ source_tz }}'), '{{ target_tz }}')) as {{ dbt.type_timestamp() }})\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.505635, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5061018, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5067577, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5071204, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5074077, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5076575, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5079036, "supported_languages": null}, "macro.dbt_date.duckdb__day_name": {"name": "duckdb__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.duckdb__day_name", "macro_sql": "\n\n{%- macro duckdb__day_name(date, short) -%}\n    {%- if short -%}\n    substr(dayname({{ date }}), 1, 3)\n    {%- else -%}\n    dayname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.508165, "supported_languages": null}, "macro.dbt_date.spark__day_name": {"name": "spark__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.spark__day_name", "macro_sql": "\n\n{%- macro spark__day_name(date, short) -%}\n{%- set f = 'E' if short else 'EEEE' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5084262, "supported_languages": null}, "macro.dbt_date.trino__day_name": {"name": "trino__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.trino__day_name", "macro_sql": "\n\n{%- macro trino__day_name(date, short) -%}\n{%- set f = 'a' if short else 'W' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5086656, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5089543, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5094223, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5098975, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5102293, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5104148, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5105855, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5114403, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.511802, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5123348, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.512696, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.513242, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.513707, "supported_languages": null}, "macro.dbt_date.duckdb__day_of_week": {"name": "duckdb__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.duckdb__day_of_week", "macro_sql": "\n\n{%- macro duckdb__day_of_week(date, isoweek) -%}\n{{ return(dbt_date.postgres__day_of_week(date, isoweek)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.51391, "supported_languages": null}, "macro.dbt_date.spark__day_of_week": {"name": "spark__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.spark__day_of_week", "macro_sql": "\n\n\n{%- macro spark__day_of_week(date, isoweek) -%}\n\n    {%- set dow = \"dayofweek_iso\" if isoweek else \"dayofweek\" -%}\n\n    {{ dbt_date.date_part(dow, date) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5142686, "supported_languages": null}, "macro.dbt_date.trino__day_of_week": {"name": "trino__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.trino__day_of_week", "macro_sql": "\n\n\n{%- macro trino__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('day_of_week', date) -%}\n\n    {%- if isoweek -%}\n        {{ dow }}\n    {%- else -%}\n        case\n            when {{ dow }} = 7 then 1\n            else {{ dow }} + 1\n        end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5146265, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.514859, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5151129, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5154173, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5158026, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5159826, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5162454, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5165763, "supported_languages": null}, "macro.dbt_date.spark__day_of_year": {"name": "spark__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.spark__day_of_year", "macro_sql": "\n\n{%- macro spark__day_of_year(date) -%}\n    dayofyear({{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.516715, "supported_languages": null}, "macro.dbt_date.trino__day_of_year": {"name": "trino__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.trino__day_of_year", "macro_sql": "\n\n{%- macro trino__day_of_year(date) -%}\n    {{ dbt_date.date_part('day_of_year', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5168862, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5174313, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5176024, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5178423, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.518118, "supported_languages": null}, "macro.dbt_date.duckdb__week_end": {"name": "duckdb__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.duckdb__week_end", "macro_sql": "\n\n{%- macro duckdb__week_end(date) -%}\n{{ return(dbt_date.postgres__week_end(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5183413, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5188859, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5190663, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.519455, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5197663, "supported_languages": null}, "macro.dbt_date.duckdb__week_start": {"name": "duckdb__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.duckdb__week_start", "macro_sql": "\n\n{%- macro duckdb__week_start(date) -%}\n{{ return(dbt_date.postgres__week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5199404, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5202718, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5211544, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5218012, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.522347, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5231087, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.523763, "supported_languages": null}, "macro.dbt_date.trino__from_unixtimestamp": {"name": "trino__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__from_unixtimestamp", "macro_sql": "\n\n{%- macro trino__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        cast(from_unixtime({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"milliseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 6)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"microseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 3)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"nanoseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.524635, "supported_languages": null}, "macro.dbt_date.duckdb__from_unixtimestamp": {"name": "duckdb__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.duckdb__from_unixtimestamp", "macro_sql": "\n\n\n{%- macro duckdb__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5249715, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.525386, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5255747, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5257444, "supported_languages": null}, "macro.dbt_date.trino__date_part": {"name": "trino__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.trino__date_part", "macro_sql": "{% macro trino__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5259085, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5266612, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5269444, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5271394, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5273182, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.527565, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_of_year": {"name": "duckdb__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_of_year", "macro_sql": "\n\n{%- macro duckdb__iso_week_of_year(date) -%}\n{{ return(dbt_date.postgres__iso_week_of_year(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5277526, "supported_languages": null}, "macro.dbt_date.spark__iso_week_of_year": {"name": "spark__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.spark__iso_week_of_year", "macro_sql": "\n\n{%- macro spark__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5279262, "supported_languages": null}, "macro.dbt_date.trino__iso_week_of_year": {"name": "trino__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.trino__iso_week_of_year", "macro_sql": "\n\n{%- macro trino__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.528095, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5285254, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5287843, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5290413, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5292535, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5296042, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5298357, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.530305, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.530827, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5313766, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5316718, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.531867, "supported_languages": null}, "macro.dbt_date.duckdb__week_of_year": {"name": "duckdb__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__week_of_year", "macro_sql": "\n\n{%- macro duckdb__week_of_year(date) -%}\ncast(ceil(dayofyear({{ date }}) / 7) as int)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5320365, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5323033, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5326488, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.532924, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5331402, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5338194, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.534109, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5343778, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5347638, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5350254, "supported_languages": null}, "macro.dbt_date.duckdb__month_name": {"name": "duckdb__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.duckdb__month_name", "macro_sql": "\n\n\n{%- macro duckdb__month_name(date, short) -%}\n    {%- if short -%}\n    substr(monthname({{ date }}), 1, 3)\n    {%- else -%}\n    monthname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5352674, "supported_languages": null}, "macro.dbt_date.spark__month_name": {"name": "spark__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.spark__month_name", "macro_sql": "\n\n{%- macro spark__month_name(date, short) -%}\n{%- set f = 'MMM' if short else 'MMMM' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5355227, "supported_languages": null}, "macro.dbt_date.trino__month_name": {"name": "trino__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.trino__month_name", "macro_sql": "\n\n{%- macro trino__month_name(date, short) -%}\n{%- set f = 'b' if short else 'M' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5357938, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5360522, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5362744, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.537156, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5379665, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith fsc_date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        fsc_date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5388167, "supported_languages": null}, "macro.dbt_date.date": {"name": "date", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/modules_datetime.sql", "original_file_path": "macros/_utils/modules_datetime.sql", "unique_id": "macro.dbt_date.date", "macro_sql": "{% macro date(year, month, day) %}\n    {{ return(modules.datetime.date(year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5391848, "supported_languages": null}, "macro.dbt_date.datetime": {"name": "datetime", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/modules_datetime.sql", "original_file_path": "macros/_utils/modules_datetime.sql", "unique_id": "macro.dbt_date.datetime", "macro_sql": "{% macro datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tz=None) %}\n    {% set tz = tz if tz else var(\"dbt_date:time_zone\") %}\n    {{ return(\n        modules.datetime.datetime(\n            year=year, month=month, day=day, hour=hour,\n            minute=minute, second=second, microsecond=microsecond,\n            tzinfo=modules.pytz.timezone(tz)\n        )\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5398583, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5404487, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5412397, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5415306, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"(row_number() over (order by 1) - 1)\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5419922, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5425127, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5431972, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5434895, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5443068, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.postgres__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.54602, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5465057, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5470676, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.547698, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5480776, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5484903, "supported_languages": null}, "macro.dbt_expectations.duckdb__regexp_instr": {"name": "duckdb__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.duckdb__regexp_instr", "macro_sql": "{% macro duckdb__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5489922, "supported_languages": null}, "macro.dbt_expectations.spark__regexp_instr": {"name": "spark__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nlength(regexp_extract({{ source_value }}, '{{ regexp }}', 0))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5493593, "supported_languages": null}, "macro.dbt_expectations.trino__regexp_instr": {"name": "trino__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.trino__regexp_instr", "macro_sql": "{% macro trino__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n    {% if flags %}\n        {{ dbt_expectations._validate_re2_flags(flags) }}\n        {# Trino prepends \"(?flags)\" to set flags for current group #}\n        {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n    {% endif %}\n    {% if is_raw %}\n        {{ exceptions.warn(\n                \"is_raw option is not supported for this adapter \"\n                ~ \"and is being ignored.\"\n        ) }}\n    {% endif %}\n    {%- set regexp_query = \"regexp_position(\" ~ source_value ~ \", '\" ~ regexp ~ \"', \" ~ position ~ \", \" ~ occurrence ~ \")\" -%}\n    {# Trino regexp_position returns -1 if not found. Change it to 0, to be consistent with other adapters #}\n    if({{ regexp_query}} = -1, 0, {{ regexp_query}})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.55012, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5505538, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\"\n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5511293, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.postgres__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5514567, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5515587, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5516896, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5518064, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5519032, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5519977, "supported_languages": null}, "macro.dbt_expectations.duckdb__rand": {"name": "duckdb__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.duckdb__rand", "macro_sql": "{% macro duckdb__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5520916, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5524273, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5525599, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5527573, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5528984, "supported_languages": null}, "macro.dbt_expectations.spark__log_natural": {"name": "spark__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.spark__log_natural", "macro_sql": "{% macro spark__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.553029, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5532784, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.553917, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.554249, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5545142, "supported_languages": null}, "macro.dbt_expectations.spark__quantile": {"name": "spark__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.spark__quantile", "macro_sql": "{% macro spark__quantile(field, quantile, partition) -%}\n    percentile({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5548162, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.postgres__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5552738, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5553756, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5554798, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5555742, "supported_languages": null}, "macro.dbt_expectations.trino__type_timestamp": {"name": "trino__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.trino__type_timestamp", "macro_sql": "{% macro trino__type_timestamp() -%}\n    timestamp(3)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.555705, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.postgres__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5560005, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5561018, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5561955, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5562873, "supported_languages": null}, "macro.dbt_expectations.duckdb__type_datetime": {"name": "duckdb__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.duckdb__type_datetime", "macro_sql": "{% macro duckdb__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.556378, "supported_languages": null}, "macro.dbt_expectations.spark__type_datetime": {"name": "spark__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.spark__type_datetime", "macro_sql": "{% macro spark__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5564678, "supported_languages": null}, "macro.dbt_expectations.trino__type_datetime": {"name": "trino__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.trino__type_datetime", "macro_sql": "{% macro trino__type_datetime() -%}\n    timestamp(3)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5565584, "supported_languages": null}, "macro.dbt_expectations.md5": {"name": "md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/md5.sql", "original_file_path": "macros/utils/md5.sql", "unique_id": "macro.dbt_expectations.md5", "macro_sql": "{%- macro md5(string_value) -%}\n    {{ return(adapter.dispatch('md5', 'dbt_expectations')(string_value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5569131, "supported_languages": null}, "macro.dbt_expectations.default__md5": {"name": "default__md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/md5.sql", "original_file_path": "macros/utils/md5.sql", "unique_id": "macro.dbt_expectations.default__md5", "macro_sql": "\n\n{%- macro default__md5(string_value) -%}\n\n  {{ dbt.hash(string_value) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5570738, "supported_languages": null}, "macro.dbt_expectations.trino__md5": {"name": "trino__md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/md5.sql", "original_file_path": "macros/utils/md5.sql", "unique_id": "macro.dbt_expectations.trino__md5", "macro_sql": "{%- macro trino__md5(string_value) -%}\n\n  md5(cast({{ string_value }} as varbinary))\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5572014, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5575154, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5578618, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5587513, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5595713, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5603917, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.561218, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5620117, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5628915, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncast(count(distinct {{ column_name }}) as {{ dbt.type_float() }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_float", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5637472, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5644672, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5653083, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5662172, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5674064, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.568251, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5690446, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5696528, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.570562, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5710957, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5720687, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5727854, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5735579, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.574266, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5751965, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5758371, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5762327, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5770164, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5773087, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5774424, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.577903, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5786233, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5795345, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5802438, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5810025, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.58252, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5831246, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5836792, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5840244, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5848086, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.585569, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5867267, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5876281, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5887353, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5896468, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.590392, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5911453, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.591561, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5927963, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5935833, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5941389, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.595285, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5958261, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.596491, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5969393, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5976298, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.5989826, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6002653, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6011262, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6015427, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6026785, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6039674, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6052835, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6061509, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.606887, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6075974, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6079912, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.608454, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.609821, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.610411, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6111646, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6116383, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6128309, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.613708, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.614225, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6146584, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6149642, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.616114, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.617322, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6186998, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6190548, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6196089, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6203332, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6215854, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6222684, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6240594, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min(cast({{ date_col }} as date)) as start_{{ date_part }},\n            max(cast({{ date_col }} as date)) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n\n    {%- set db_start_date = dr.columns[0].values()[0] -%}\n    {%- set db_end_date = dr.columns[1].values()[0] -%}\n\n    {% if db_start_date is not string %}\n        {%- set db_start_date = db_start_date.strftime('%Y-%m-%d') -%}\n        {%- set db_end_date = db_end_date.strftime('%Y-%m-%d') -%}\n    {% endif %}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\n\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6700025, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6708813, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by {{ columns|join(', ') }}) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ dbt_expectations.md5(column) }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression", "macro.dbt_expectations.md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.672412, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{# the if just allows for column names or literal numbers #}\n{% endfor %} = {% if sum_total is number %}{{sum_total}}{% else %}sum({{ sum_total }}){% endif %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6733704, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.673985, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }},\n        {%- endfor %}\n        count(*) as {{adapter.quote(\"n_records\")}}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6760676, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6772313, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.677926, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6786423, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6805613, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6813338, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6824613, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6829028, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6833901, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6839304, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6845562, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6850615, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6856606, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.686223, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6866617, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6872525, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6886675, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.689188, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.690229, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6907163, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6911378, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.691821, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6934679, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6939623, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6945038, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6951451, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6962276, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.696808, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6978025, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6982586, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.698666, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.699161, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.6999633, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7009244, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.702979, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.703428, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7036211, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7037978, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7039692, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7045581, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7051246, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.705496, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7067294, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7077756, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7081904, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7085242, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7089422, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7097502, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7105985, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7111168, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7120187, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7126749, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7131581, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.714114, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7145765, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7155519, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7162035, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7169616, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7172365, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7177076, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7182298, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.718592, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7194936, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7207317, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7210956, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.721545, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.722103, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.723122, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7237177, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7248085, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7257454, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7276173, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7281315, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7285106, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.728856, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7290602, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7296095, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.730138, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7303636, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7310793, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7315953, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7324584, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.732862, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7333705, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.733777, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7341022, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7349458, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.736827, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7374547, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.737763, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7380106, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7382674, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7384782, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7387297, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7391205, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.739823, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7406995, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7427838, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7431855, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7438774, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7450655, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7494872, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7498837, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7501326, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7510304, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7513423, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7515488, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7523165, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.752665, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7528808, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7533925, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.753778, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.754392, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7547965, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7552257, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7556555, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756221679.7564127, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.retail_dbt.tax_rules_silver": ["model.retail_dbt.stg_tax_rules"], "model.retail_dbt.campaigns_silver": ["model.retail_dbt.stg_campaigns"], "model.retail_dbt.suppliers_silver": ["model.retail_dbt.stg_suppliers"], "model.retail_dbt.shipments_silver": ["model.retail_dbt.stg_shipments"], "model.retail_dbt.pricing_history_silver": ["model.retail_dbt.stg_pricing_history"], "model.retail_dbt.purchase_orders_silver": ["model.retail_dbt.stg_purchase_orders"], "model.retail_dbt.products_silver": ["model.retail_dbt.stg_products"], "model.retail_dbt.inventory_silver": ["model.retail_dbt.stg_inventory"], "model.retail_dbt.customer_feedback_silver": ["model.retail_dbt.stg_customer_feedback"], "model.retail_dbt.sales_transactions_silver": ["model.retail_dbt.stg_sales_transactions"], "model.retail_dbt.stock_movements_silver": ["model.retail_dbt.stg_stock_movements"], "model.retail_dbt.employees_silver": ["model.retail_dbt.stg_employees"], "model.retail_dbt.brands_silver": ["model.retail_dbt.stg_brands"], "model.retail_dbt.loyalty_programs_silver": ["model.retail_dbt.stg_loyalty_programs"], "model.retail_dbt.customers_silver": ["model.retail_dbt.stg_customers"], "model.retail_dbt.payments_silver": ["model.retail_dbt.stg_payments"], "model.retail_dbt.promotions_silver": ["model.retail_dbt.stg_promotions"], "model.retail_dbt.sales_items_silver": ["model.retail_dbt.stg_sales_items"], "model.retail_dbt.discount_rules_silver": ["model.retail_dbt.stg_discount_rules"], "model.retail_dbt.returns_silver": ["model.retail_dbt.stg_returns"], "model.retail_dbt.stores_silver": ["model.retail_dbt.stg_stores"], "model.retail_dbt.store_visits_silver": ["model.retail_dbt.stg_store_visits"], "model.retail_dbt.categories_silver": ["model.retail_dbt.stg_categories"], "model.retail_dbt.stg_categories": ["source.retail_dbt.raw.categories"], "model.retail_dbt.stg_sales_items": ["source.retail_dbt.raw.sales_items"], "model.retail_dbt.stg_shipments": ["source.retail_dbt.raw.shipments"], "model.retail_dbt.stg_stores": [], "model.retail_dbt.stg_returns": ["source.retail_dbt.raw.returns"], "model.retail_dbt.stg_discount_rules": ["source.retail_dbt.raw.discount_rules"], "model.retail_dbt.stg_promotions": ["source.retail_dbt.raw.promotions"], "model.retail_dbt.stg_inventory": ["source.retail_dbt.raw.inventory"], "model.retail_dbt.stg_campaigns": ["source.retail_dbt.raw.campaigns"], "model.retail_dbt.stg_sales_transactions": ["source.retail_dbt.raw.sales_transactions"], "model.retail_dbt.stg_brands": ["source.retail_dbt.raw.brands"], "model.retail_dbt.stg_customer_feedback": ["source.retail_dbt.raw.customer_feedback"], "model.retail_dbt.stg_customers": ["source.retail_dbt.raw.customers"], "model.retail_dbt.stg_store_visits": ["source.retail_dbt.raw.store_visits"], "model.retail_dbt.stg_loyalty_programs": ["source.retail_dbt.raw.loyalty_programs"], "model.retail_dbt.stg_suppliers": [], "model.retail_dbt.stg_stock_movements": ["source.retail_dbt.raw.stock_movements"], "model.retail_dbt.stg_pricing_history": ["source.retail_dbt.raw.pricing_history"], "model.retail_dbt.stg_purchase_orders": ["source.retail_dbt.raw.purchase_orders"], "model.retail_dbt.stg_payments": ["source.retail_dbt.raw.payments"], "model.retail_dbt.stg_products": ["source.retail_dbt.raw.products"], "model.retail_dbt.stg_employees": ["source.retail_dbt.raw.employees"], "model.retail_dbt.stg_tax_rules": [], "model.retail_dbt.dim_products_scd": ["snapshot.retail_dbt.dim_products_snapshot"], "model.retail_dbt.fct_inventory": ["model.retail_dbt.inventory_silver", "model.retail_dbt.products_silver", "model.retail_dbt.stores_silver"], "model.retail_dbt.dim_categories_scd": ["snapshot.retail_dbt.dim_categories_snapshot"], "model.retail_dbt.dim_discount_rules": ["model.retail_dbt.discount_rules_silver"], "model.retail_dbt.dim_promotions_scd": ["snapshot.retail_dbt.dim_promotions_snapshot"], "model.retail_dbt.fct_store_visits": ["model.retail_dbt.customers_silver", "model.retail_dbt.store_visits_silver", "model.retail_dbt.stores_silver"], "model.retail_dbt.dim_customers_scd": ["snapshot.retail_dbt.dim_customers_snapshot"], "model.retail_dbt.dim_suppliers_scd": ["snapshot.retail_dbt.dim_suppliers_snapshot"], "model.retail_dbt.dim_campaigns": ["model.retail_dbt.campaigns_silver"], "model.retail_dbt.fct_purchase_orders": ["model.retail_dbt.purchase_orders_silver", "model.retail_dbt.suppliers_silver"], "model.retail_dbt.fct_payments": ["model.retail_dbt.customers_silver", "model.retail_dbt.employees_silver", "model.retail_dbt.payments_silver", "model.retail_dbt.sales_transactions_silver", "model.retail_dbt.stores_silver"], "model.retail_dbt.dim_loyalty_programs_scd": ["snapshot.retail_dbt.dim_loyalty_programs_snapshot"], "model.retail_dbt.dim_tax_rules": ["model.retail_dbt.tax_rules_silver"], "model.retail_dbt.fct_pricing_history": ["model.retail_dbt.brands_silver", "model.retail_dbt.categories_silver", "model.retail_dbt.pricing_history_silver", "model.retail_dbt.products_silver", "model.retail_dbt.suppliers_silver"], "model.retail_dbt.fct_sales_items": ["model.retail_dbt.categories_silver", "model.retail_dbt.products_silver", "model.retail_dbt.sales_items_silver", "model.retail_dbt.sales_transactions_silver", "model.retail_dbt.stores_silver"], "model.retail_dbt.fct_stock_movements": ["model.retail_dbt.products_silver", "model.retail_dbt.stock_movements_silver", "model.retail_dbt.stores_silver"], "model.retail_dbt.dim_brands_scd": ["snapshot.retail_dbt.dim_brands_snapshot"], "model.retail_dbt.fct_shipments": ["model.retail_dbt.purchase_orders_silver", "model.retail_dbt.shipments_silver", "model.retail_dbt.stores_silver", "model.retail_dbt.suppliers_silver"], "model.retail_dbt.fct_returns": ["model.retail_dbt.products_silver", "model.retail_dbt.returns_silver", "model.retail_dbt.sales_items_silver", "model.retail_dbt.sales_transactions_silver", "model.retail_dbt.stores_silver"], "model.retail_dbt.dim_stores_scd": ["snapshot.retail_dbt.dim_stores_snapshot"], "model.retail_dbt.dim_employees_scd": ["snapshot.retail_dbt.dim_employees_snapshot"], "model.retail_dbt.fct_sales_transactions": ["model.retail_dbt.customers_silver", "model.retail_dbt.employees_silver", "model.retail_dbt.payments_silver", "model.retail_dbt.sales_transactions_silver", "model.retail_dbt.stores_silver"], "model.retail_dbt.fct_customer_feedback": ["model.retail_dbt.customer_feedback_silver", "model.retail_dbt.customers_silver", "model.retail_dbt.products_silver", "model.retail_dbt.stores_silver"], "model.retail_dbt.products_invalid": ["source.retail_dbt.raw.products"], "model.retail_dbt.loyalty_programs_invalid": ["model.retail_dbt.stg_loyalty_programs"], "model.retail_dbt.inventory_invalid": ["source.retail_dbt.raw.inventory"], "model.retail_dbt.shipments_invalid": ["source.retail_dbt.raw.shipments"], "model.retail_dbt.sales_items_invalid": ["source.retail_dbt.raw.sales_items"], "model.retail_dbt.promotions_invalid": ["source.retail_dbt.raw.promotions"], "model.retail_dbt.campaign_invalid": ["source.retail_dbt.raw.campaigns"], "model.retail_dbt.tax_rules_invalid": [], "model.retail_dbt.employees_invalid": ["source.retail_dbt.raw.employees"], "model.retail_dbt.stock_movements_invalid": ["source.retail_dbt.raw.stock_movements"], "model.retail_dbt.sales_transactions_invalid": ["source.retail_dbt.raw.sales_transactions"], "model.retail_dbt.discount_rules_invalid": ["source.retail_dbt.raw.discount_rules"], "model.retail_dbt.returns_invalid": ["source.retail_dbt.raw.returns"], "model.retail_dbt.pricing_history_invalid": ["source.retail_dbt.raw.pricing_history"], "model.retail_dbt.customer_feedback_invalid": ["source.retail_dbt.raw.customer_feedback"], "model.retail_dbt.purchase_orders_invalid": ["source.retail_dbt.raw.purchase_orders"], "model.retail_dbt.store_visits_invalid": ["source.retail_dbt.raw.store_visits"], "model.retail_dbt.customer_invalid": ["source.retail_dbt.raw.customers"], "model.retail_dbt.payments_invalid": ["source.retail_dbt.raw.payments"], "snapshot.retail_dbt.dim_suppliers_snapshot": ["model.retail_dbt.suppliers_silver"], "snapshot.retail_dbt.dim_customers_snapshot": ["model.retail_dbt.customers_silver"], "snapshot.retail_dbt.dim_stores_snapshot": ["model.retail_dbt.stores_silver"], "snapshot.retail_dbt.dim_brands_snapshot": ["model.retail_dbt.brands_silver"], "snapshot.retail_dbt.dim_categories_snapshot": ["model.retail_dbt.categories_silver"], "snapshot.retail_dbt.dim_products_snapshot": ["model.retail_dbt.products_silver"], "snapshot.retail_dbt.dim_employees_snapshot": ["model.retail_dbt.employees_silver"], "snapshot.retail_dbt.dim_loyalty_programs_snapshot": ["model.retail_dbt.loyalty_programs_silver"], "snapshot.retail_dbt.dim_promotions_snapshot": ["model.retail_dbt.promotions_silver"], "test.retail_dbt.not_null_brands_silver_brand_id.e37c5b2859": ["model.retail_dbt.brands_silver"], "test.retail_dbt.not_null_brands_silver_name.cfe1fe35d4": ["model.retail_dbt.brands_silver"], "test.retail_dbt.not_null_brands_silver_staged_at.0c3bcd18b1": ["model.retail_dbt.brands_silver"], "test.retail_dbt.not_null_campaigns_silver_campaign_id.4bdea18142": ["model.retail_dbt.campaigns_silver"], "test.retail_dbt.not_null_campaigns_silver_name.599034b8a0": ["model.retail_dbt.campaigns_silver"], "test.retail_dbt.not_null_campaigns_silver_budget.69bfe9da3e": ["model.retail_dbt.campaigns_silver"], "test.retail_dbt.not_null_campaigns_silver_start_date.efe0421e5c": ["model.retail_dbt.campaigns_silver"], "test.retail_dbt.not_null_campaigns_silver_end_date.36ec8a11c0": ["model.retail_dbt.campaigns_silver"], "test.retail_dbt.not_null_campaigns_silver_staged_at.782d626fff": ["model.retail_dbt.campaigns_silver"], "test.retail_dbt.not_null_categories_silver_category_id.28d2833aa5": ["model.retail_dbt.categories_silver"], "test.retail_dbt.not_null_categories_silver_name.9b8db46a0d": ["model.retail_dbt.categories_silver"], "test.retail_dbt.not_null_categories_silver_staged_at.580eaf4605": ["model.retail_dbt.categories_silver"], "test.retail_dbt.not_null_customer_feedback_silver_feedback_id.3946bdc56e": ["model.retail_dbt.customer_feedback_silver"], "test.retail_dbt.not_null_customer_feedback_silver_customer_id.bed22c5c35": ["model.retail_dbt.customer_feedback_silver"], "test.retail_dbt.not_null_customer_feedback_silver_store_id.2d5e8f99b2": ["model.retail_dbt.customer_feedback_silver"], "test.retail_dbt.not_null_customer_feedback_silver_product_id.8fb9eeb315": ["model.retail_dbt.customer_feedback_silver"], "test.retail_dbt.not_null_customer_feedback_silver_rating.ab5a9630b5": ["model.retail_dbt.customer_feedback_silver"], "test.retail_dbt.not_null_customer_feedback_silver_comments.25e81fd4ae": ["model.retail_dbt.customer_feedback_silver"], "test.retail_dbt.not_null_customer_feedback_silver_feedback_date.7c4177c699": ["model.retail_dbt.customer_feedback_silver"], "test.retail_dbt.not_null_customers_silver_customer_id.754b05a681": ["model.retail_dbt.customers_silver"], "test.retail_dbt.not_null_customers_silver_name.864d7a97ce": ["model.retail_dbt.customers_silver"], "test.retail_dbt.not_null_customers_silver_email.6856528552": ["model.retail_dbt.customers_silver"], "test.retail_dbt.not_null_customers_silver_phone.ca7dddc621": ["model.retail_dbt.customers_silver"], "test.retail_dbt.not_null_customers_silver_loyalty_program_id.c42d2a00d8": ["model.retail_dbt.customers_silver"], "test.retail_dbt.not_null_customers_silver_created_at.f6eb18d9e4": ["model.retail_dbt.customers_silver"], "test.retail_dbt.not_null_discount_rules_silver_rule_id.3bd4495dec": ["model.retail_dbt.discount_rules_silver"], "test.retail_dbt.not_null_discount_rules_silver_product_id.81bef753f4": ["model.retail_dbt.discount_rules_silver"], "test.retail_dbt.not_null_discount_rules_silver_discount_type.508466577d": ["model.retail_dbt.discount_rules_silver"], "test.retail_dbt.not_null_discount_rules_silver_value.c62b860389": ["model.retail_dbt.discount_rules_silver"], "test.retail_dbt.not_null_discount_rules_silver_valid_from.8c61636ef6": ["model.retail_dbt.discount_rules_silver"], "test.retail_dbt.not_null_discount_rules_silver_valid_to.b846afb85a": ["model.retail_dbt.discount_rules_silver"], "test.retail_dbt.not_null_employees_silver_employee_id.c69a236ad3": ["model.retail_dbt.employees_silver"], "test.retail_dbt.not_null_employees_silver_name.3812e26daf": ["model.retail_dbt.employees_silver"], "test.retail_dbt.not_null_employees_silver_role.958be5c671": ["model.retail_dbt.employees_silver"], "test.retail_dbt.not_null_employees_silver_store_id.0e962c8015": ["model.retail_dbt.employees_silver"], "test.retail_dbt.not_null_inventory_silver_inventory_id.b8e25e2251": ["model.retail_dbt.inventory_silver"], "test.retail_dbt.not_null_inventory_silver_store_id.b0a34febbd": ["model.retail_dbt.inventory_silver"], "test.retail_dbt.not_null_inventory_silver_product_id.d0a7b9584f": ["model.retail_dbt.inventory_silver"], "test.retail_dbt.not_null_inventory_silver_quantity.ea309d107b": ["model.retail_dbt.inventory_silver"], "test.retail_dbt.not_null_inventory_silver_last_updated.0342be2bb9": ["model.retail_dbt.inventory_silver"], "test.retail_dbt.not_null_loyalty_programs_silver_loyalty_program_id.b5828a7162": ["model.retail_dbt.loyalty_programs_silver"], "test.retail_dbt.not_null_loyalty_programs_silver_name.89b9e901e2": ["model.retail_dbt.loyalty_programs_silver"], "test.retail_dbt.not_null_loyalty_programs_silver_points_per_dollar.b30f4d0a71": ["model.retail_dbt.loyalty_programs_silver"], "test.retail_dbt.not_null_payments_silver_payment_id.c1d20ab72b": ["model.retail_dbt.payments_silver"], "test.retail_dbt.not_null_payments_silver_method.de459907f5": ["model.retail_dbt.payments_silver"], "test.retail_dbt.not_null_payments_silver_status.c2c4b77279": ["model.retail_dbt.payments_silver"], "test.retail_dbt.not_null_payments_silver_paid_at.fb99aa72f2": ["model.retail_dbt.payments_silver"], "test.retail_dbt.not_null_pricing_history_silver_history_id.e867959250": ["model.retail_dbt.pricing_history_silver"], "test.retail_dbt.not_null_pricing_history_silver_product_id.35adcf9c8d": ["model.retail_dbt.pricing_history_silver"], "test.retail_dbt.not_null_pricing_history_silver_price.b1fde7cb52": ["model.retail_dbt.pricing_history_silver"], "test.retail_dbt.not_null_pricing_history_silver_effective_date.e4ecdc8dc4": ["model.retail_dbt.pricing_history_silver"], "test.retail_dbt.not_null_products_silver_product_id.ac9520ee8d": ["model.retail_dbt.products_silver"], "test.retail_dbt.not_null_products_silver_name.2eb427bac7": ["model.retail_dbt.products_silver"], "test.retail_dbt.not_null_products_silver_category_id.2a4206bc12": ["model.retail_dbt.products_silver"], "test.retail_dbt.not_null_products_silver_brand_id.e24a5ce560": ["model.retail_dbt.products_silver"], "test.retail_dbt.not_null_products_silver_supplier_id.f8bf6dd3c6": ["model.retail_dbt.products_silver"], "test.retail_dbt.not_null_products_silver_price.1d7617dbc8": ["model.retail_dbt.products_silver"], "test.retail_dbt.not_null_products_silver_created_at.f661bb341b": ["model.retail_dbt.products_silver"], "test.retail_dbt.not_null_products_silver_season.93161b0991": ["model.retail_dbt.products_silver"], "test.retail_dbt.not_null_promotions_silver_promotion_id.b988028c60": ["model.retail_dbt.promotions_silver"], "test.retail_dbt.not_null_promotions_silver_name.6337430c9c": ["model.retail_dbt.promotions_silver"], "test.retail_dbt.not_null_promotions_silver_start_date.9d08c0ea43": ["model.retail_dbt.promotions_silver"], "test.retail_dbt.not_null_promotions_silver_end_date.a8843536c8": ["model.retail_dbt.promotions_silver"], "test.retail_dbt.not_null_purchase_orders_silver_order_id.465030e034": ["model.retail_dbt.purchase_orders_silver"], "test.retail_dbt.not_null_purchase_orders_silver_supplier_id.ec936eb5b5": ["model.retail_dbt.purchase_orders_silver"], "test.retail_dbt.not_null_purchase_orders_silver_order_date.763925638d": ["model.retail_dbt.purchase_orders_silver"], "test.retail_dbt.not_null_purchase_orders_silver_status.c17b884943": ["model.retail_dbt.purchase_orders_silver"], "test.retail_dbt.not_null_returns_silver_return_id.5102a4a0a2": ["model.retail_dbt.returns_silver"], "test.retail_dbt.not_null_returns_silver_item_id.c11f187f38": ["model.retail_dbt.returns_silver"], "test.retail_dbt.not_null_returns_silver_reason.4566784310": ["model.retail_dbt.returns_silver"], "test.retail_dbt.not_null_returns_silver_return_date.d4c90371c5": ["model.retail_dbt.returns_silver"], "test.retail_dbt.not_null_sales_items_silver_item_id.db1727c955": ["model.retail_dbt.sales_items_silver"], "test.retail_dbt.not_null_sales_items_silver_transaction_id.47979a6b46": ["model.retail_dbt.sales_items_silver"], "test.retail_dbt.not_null_sales_items_silver_product_id.d90d226a0c": ["model.retail_dbt.sales_items_silver"], "test.retail_dbt.not_null_sales_items_silver_quantity.541fc853cd": ["model.retail_dbt.sales_items_silver"], "test.retail_dbt.not_null_sales_items_silver_unit_price.83bc8f6f4b": ["model.retail_dbt.sales_items_silver"], "test.retail_dbt.not_null_sales_items_silver_discount.7062a6a5ed": ["model.retail_dbt.sales_items_silver"], "test.retail_dbt.not_null_sales_items_silver_tax.d8eacf8588": ["model.retail_dbt.sales_items_silver"], "test.retail_dbt.not_null_sales_items_silver_gross_amount.a4eef2ff4d": ["model.retail_dbt.sales_items_silver"], "test.retail_dbt.not_null_sales_items_silver_net_amount.afde194730": ["model.retail_dbt.sales_items_silver"], "test.retail_dbt.not_null_sales_items_silver_business_validation_flag.fc94ea645a": ["model.retail_dbt.sales_items_silver"], "test.retail_dbt.not_null_sales_transactions_silver_transaction_id.736115426b": ["model.retail_dbt.sales_transactions_silver"], "test.retail_dbt.not_null_sales_transactions_silver_customer_id.0cba059371": ["model.retail_dbt.sales_transactions_silver"], "test.retail_dbt.not_null_sales_transactions_silver_store_id.3c2472f6c0": ["model.retail_dbt.sales_transactions_silver"], "test.retail_dbt.not_null_sales_transactions_silver_employee_id.088a404cad": ["model.retail_dbt.sales_transactions_silver"], "test.retail_dbt.not_null_sales_transactions_silver_transaction_date.59131f37e7": ["model.retail_dbt.sales_transactions_silver"], "test.retail_dbt.not_null_sales_transactions_silver_total_amount.6e07d2cc0f": ["model.retail_dbt.sales_transactions_silver"], "test.retail_dbt.not_null_sales_transactions_silver_payment_id.020fe22706": ["model.retail_dbt.sales_transactions_silver"], "test.retail_dbt.not_null_shipments_silver_shipment_id.ab52987a98": ["model.retail_dbt.shipments_silver"], "test.retail_dbt.not_null_shipments_silver_order_id.6b7ddbfc6b": ["model.retail_dbt.shipments_silver"], "test.retail_dbt.not_null_shipments_silver_store_id.cd277ca902": ["model.retail_dbt.shipments_silver"], "test.retail_dbt.not_null_shipments_silver_shipped_date.75a36020ee": ["model.retail_dbt.shipments_silver"], "test.retail_dbt.not_null_shipments_silver_received_date.a083993648": ["model.retail_dbt.shipments_silver"], "test.retail_dbt.not_null_stock_movements_silver_movement_id.9441e6c7bf": ["model.retail_dbt.stock_movements_silver"], "test.retail_dbt.not_null_stock_movements_silver_product_id.893e7e84b1": ["model.retail_dbt.stock_movements_silver"], "test.retail_dbt.not_null_stock_movements_silver_store_id.87dd62d582": ["model.retail_dbt.stock_movements_silver"], "test.retail_dbt.not_null_stock_movements_silver_movement_type.a5e3a59630": ["model.retail_dbt.stock_movements_silver"], "test.retail_dbt.not_null_stock_movements_silver_quantity.2ffe698ded": ["model.retail_dbt.stock_movements_silver"], "test.retail_dbt.not_null_stock_movements_silver_movement_date.efe72dd68d": ["model.retail_dbt.stock_movements_silver"], "test.retail_dbt.not_null_store_visits_silver_visit_id.04f76e4203": ["model.retail_dbt.store_visits_silver"], "test.retail_dbt.not_null_store_visits_silver_customer_id.57f338221d": ["model.retail_dbt.store_visits_silver"], "test.retail_dbt.not_null_store_visits_silver_store_id.4276ef5282": ["model.retail_dbt.store_visits_silver"], "test.retail_dbt.not_null_store_visits_silver_visit_date.adefa3499d": ["model.retail_dbt.store_visits_silver"], "test.retail_dbt.not_null_stores_silver_store_id.7b5b9ac097": ["model.retail_dbt.stores_silver"], "test.retail_dbt.not_null_stores_silver_name.c7d29b75c3": ["model.retail_dbt.stores_silver"], "test.retail_dbt.not_null_stores_silver_location.9e197b2d81": ["model.retail_dbt.stores_silver"], "test.retail_dbt.not_null_stores_silver_manager_id.c3c7ff2ffa": ["model.retail_dbt.stores_silver"], "test.retail_dbt.not_null_suppliers_silver_supplier_id.82e9077042": ["model.retail_dbt.suppliers_silver"], "test.retail_dbt.not_null_suppliers_silver_name.61cee018b3": ["model.retail_dbt.suppliers_silver"], "test.retail_dbt.not_null_suppliers_silver_contact_info.a90509e888": ["model.retail_dbt.suppliers_silver"], "test.retail_dbt.not_null_tax_rules_silver_tax_id.24ed2c7254": ["model.retail_dbt.tax_rules_silver"], "test.retail_dbt.not_null_tax_rules_silver_product_id.1223163e5d": ["model.retail_dbt.tax_rules_silver"], "test.retail_dbt.not_null_tax_rules_silver_tax_rate.8f3dac0898": ["model.retail_dbt.tax_rules_silver"], "test.retail_dbt.not_null_tax_rules_silver_region.c6687fdd21": ["model.retail_dbt.tax_rules_silver"], "test.retail_dbt.not_null_dim_brands_scd_brand_id.3b2e1b3772": ["model.retail_dbt.dim_brands_scd"], "test.retail_dbt.unique_dim_brands_scd_brand_id.559997024c": ["model.retail_dbt.dim_brands_scd"], "test.retail_dbt.not_null_dim_brands_scd_name.c6466cd9a4": ["model.retail_dbt.dim_brands_scd"], "test.retail_dbt.not_null_dim_brands_scd_staged_at.c1b687ebe5": ["model.retail_dbt.dim_brands_scd"], "test.retail_dbt.not_null_dim_brands_scd_dbt_scd_id.ad68bfdaf6": ["model.retail_dbt.dim_brands_scd"], "test.retail_dbt.not_null_dim_brands_scd_dbt_updated_at.909731b239": ["model.retail_dbt.dim_brands_scd"], "test.retail_dbt.not_null_dim_brands_scd_dbt_valid_from.3d7351d295": ["model.retail_dbt.dim_brands_scd"], "test.retail_dbt.not_null_dim_brands_scd_dbt_valid_to.dfae77005a": ["model.retail_dbt.dim_brands_scd"], "test.retail_dbt.not_null_dim_brands_scd_brand_sk.d9538046e5": ["model.retail_dbt.dim_brands_scd"], "test.retail_dbt.not_null_dim_brands_scd_valid_from.56ca0ccdfa": ["model.retail_dbt.dim_brands_scd"], "test.retail_dbt.not_null_dim_brands_scd_valid_to.c5332449c0": ["model.retail_dbt.dim_brands_scd"], "test.retail_dbt.not_null_dim_brands_scd_is_current.80ce1d1c55": ["model.retail_dbt.dim_brands_scd"], "test.retail_dbt.not_null_dim_campaigns_campaign_id.b113a46344": ["model.retail_dbt.dim_campaigns"], "test.retail_dbt.unique_dim_campaigns_campaign_id.efba50e300": ["model.retail_dbt.dim_campaigns"], "test.retail_dbt.not_null_dim_campaigns_name.96fa971944": ["model.retail_dbt.dim_campaigns"], "test.retail_dbt.not_null_dim_campaigns_budget.2df449c486": ["model.retail_dbt.dim_campaigns"], "test.retail_dbt.not_null_dim_campaigns_start_date.482b5b3761": ["model.retail_dbt.dim_campaigns"], "test.retail_dbt.not_null_dim_campaigns_end_date.1c340a76b4": ["model.retail_dbt.dim_campaigns"], "test.retail_dbt.not_null_dim_campaigns_staged_at.8cda809396": ["model.retail_dbt.dim_campaigns"], "test.retail_dbt.not_null_dim_categories_scd_category_id.d57e3f2fe4": ["model.retail_dbt.dim_categories_scd"], "test.retail_dbt.unique_dim_categories_scd_category_id.a547519caa": ["model.retail_dbt.dim_categories_scd"], "test.retail_dbt.not_null_dim_categories_scd_name.e1787b6126": ["model.retail_dbt.dim_categories_scd"], "test.retail_dbt.not_null_dim_categories_scd_staged_at.03ba82dab0": ["model.retail_dbt.dim_categories_scd"], "test.retail_dbt.not_null_dim_categories_scd_dbt_scd_id.dd413e98d8": ["model.retail_dbt.dim_categories_scd"], "test.retail_dbt.not_null_dim_categories_scd_dbt_updated_at.db8d94fc39": ["model.retail_dbt.dim_categories_scd"], "test.retail_dbt.not_null_dim_categories_scd_dbt_valid_from.f655d038ca": ["model.retail_dbt.dim_categories_scd"], "test.retail_dbt.not_null_dim_categories_scd_dbt_valid_to.997f516640": ["model.retail_dbt.dim_categories_scd"], "test.retail_dbt.not_null_dim_categories_scd_category_sk.96df2a66cf": ["model.retail_dbt.dim_categories_scd"], "test.retail_dbt.not_null_dim_categories_scd_valid_from.3f6c56d686": ["model.retail_dbt.dim_categories_scd"], "test.retail_dbt.not_null_dim_categories_scd_valid_to.39024b6046": ["model.retail_dbt.dim_categories_scd"], "test.retail_dbt.not_null_dim_categories_scd_is_current.e82f2605e7": ["model.retail_dbt.dim_categories_scd"], "test.retail_dbt.not_null_dim_customers_scd_customer_id.56933c880b": ["model.retail_dbt.dim_customers_scd"], "test.retail_dbt.unique_dim_customers_scd_customer_id.2b326f2086": ["model.retail_dbt.dim_customers_scd"], "test.retail_dbt.not_null_dim_customers_scd_name.26c4fede0b": ["model.retail_dbt.dim_customers_scd"], "test.retail_dbt.not_null_dim_customers_scd_email.dca7a01a3a": ["model.retail_dbt.dim_customers_scd"], "test.retail_dbt.not_null_dim_customers_scd_phone.eaebcaf4c2": ["model.retail_dbt.dim_customers_scd"], "test.retail_dbt.not_null_dim_customers_scd_loyalty_program_id.98d673395a": ["model.retail_dbt.dim_customers_scd"], "test.retail_dbt.not_null_dim_customers_scd_created_at.6b44bd0165": ["model.retail_dbt.dim_customers_scd"], "test.retail_dbt.not_null_dim_customers_scd_dbt_scd_id.793c4db6f3": ["model.retail_dbt.dim_customers_scd"], "test.retail_dbt.not_null_dim_customers_scd_dbt_updated_at.5585ab9cdd": ["model.retail_dbt.dim_customers_scd"], "test.retail_dbt.not_null_dim_customers_scd_dbt_valid_from.5ed37ae6c3": ["model.retail_dbt.dim_customers_scd"], "test.retail_dbt.not_null_dim_customers_scd_dbt_valid_to.ac2963c119": ["model.retail_dbt.dim_customers_scd"], "test.retail_dbt.not_null_dim_customers_scd_customer_sk.a516213f73": ["model.retail_dbt.dim_customers_scd"], "test.retail_dbt.not_null_dim_customers_scd_valid_from.d76146eb84": ["model.retail_dbt.dim_customers_scd"], "test.retail_dbt.not_null_dim_customers_scd_valid_to.6e22a57601": ["model.retail_dbt.dim_customers_scd"], "test.retail_dbt.not_null_dim_customers_scd_is_current.18e6f7ab8f": ["model.retail_dbt.dim_customers_scd"], "test.retail_dbt.not_null_dim_discount_rules_rule_id.bea823b062": ["model.retail_dbt.dim_discount_rules"], "test.retail_dbt.unique_dim_discount_rules_rule_id.2d4022ebb6": ["model.retail_dbt.dim_discount_rules"], "test.retail_dbt.not_null_dim_discount_rules_product_id.8ab02eea4b": ["model.retail_dbt.dim_discount_rules"], "test.retail_dbt.not_null_dim_discount_rules_discount_type.a759a6bff8": ["model.retail_dbt.dim_discount_rules"], "test.retail_dbt.not_null_dim_discount_rules_value.e6ec5427b6": ["model.retail_dbt.dim_discount_rules"], "test.retail_dbt.not_null_dim_discount_rules_valid_from.96af6b93c0": ["model.retail_dbt.dim_discount_rules"], "test.retail_dbt.not_null_dim_discount_rules_valid_to.42ac252875": ["model.retail_dbt.dim_discount_rules"], "test.retail_dbt.not_null_dim_employees_scd_employee_id.8522bc8cd3": ["model.retail_dbt.dim_employees_scd"], "test.retail_dbt.unique_dim_employees_scd_employee_id.60d37e9021": ["model.retail_dbt.dim_employees_scd"], "test.retail_dbt.not_null_dim_employees_scd_name.de3a965790": ["model.retail_dbt.dim_employees_scd"], "test.retail_dbt.not_null_dim_employees_scd_role.4466e0f8a7": ["model.retail_dbt.dim_employees_scd"], "test.retail_dbt.not_null_dim_employees_scd_store_id.8b22391c15": ["model.retail_dbt.dim_employees_scd"], "test.retail_dbt.not_null_dim_employees_scd_dbt_scd_id.f47f324dd6": ["model.retail_dbt.dim_employees_scd"], "test.retail_dbt.not_null_dim_employees_scd_dbt_updated_at.bcf03562d7": ["model.retail_dbt.dim_employees_scd"], "test.retail_dbt.not_null_dim_employees_scd_dbt_valid_from.a49438694c": ["model.retail_dbt.dim_employees_scd"], "test.retail_dbt.not_null_dim_employees_scd_dbt_valid_to.d1aead151a": ["model.retail_dbt.dim_employees_scd"], "test.retail_dbt.not_null_dim_employees_scd_employee_sk.46b10e0100": ["model.retail_dbt.dim_employees_scd"], "test.retail_dbt.not_null_dim_employees_scd_valid_from.18363deeac": ["model.retail_dbt.dim_employees_scd"], "test.retail_dbt.not_null_dim_employees_scd_valid_to.a3ee7e82d3": ["model.retail_dbt.dim_employees_scd"], "test.retail_dbt.not_null_dim_employees_scd_is_current.e8e5357df2": ["model.retail_dbt.dim_employees_scd"], "test.retail_dbt.not_null_dim_loyalty_programs_scd_loyalty_program_id.e84dfa91aa": ["model.retail_dbt.dim_loyalty_programs_scd"], "test.retail_dbt.unique_dim_loyalty_programs_scd_loyalty_program_id.3e227fa805": ["model.retail_dbt.dim_loyalty_programs_scd"], "test.retail_dbt.not_null_dim_loyalty_programs_scd_name.3db7e3f58a": ["model.retail_dbt.dim_loyalty_programs_scd"], "test.retail_dbt.not_null_dim_loyalty_programs_scd_points_per_dollar.efe31e239c": ["model.retail_dbt.dim_loyalty_programs_scd"], "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_scd_id.038f10ad7b": ["model.retail_dbt.dim_loyalty_programs_scd"], "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_updated_at.c9d70f49a2": ["model.retail_dbt.dim_loyalty_programs_scd"], "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_valid_from.7dac90a210": ["model.retail_dbt.dim_loyalty_programs_scd"], "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_valid_to.4c513e1ea4": ["model.retail_dbt.dim_loyalty_programs_scd"], "test.retail_dbt.not_null_dim_loyalty_programs_scd_loyalty_program_sk.84ba447ff4": ["model.retail_dbt.dim_loyalty_programs_scd"], "test.retail_dbt.not_null_dim_loyalty_programs_scd_valid_from.8260f64e1f": ["model.retail_dbt.dim_loyalty_programs_scd"], "test.retail_dbt.not_null_dim_loyalty_programs_scd_valid_to.e800634182": ["model.retail_dbt.dim_loyalty_programs_scd"], "test.retail_dbt.not_null_dim_loyalty_programs_scd_is_current.43f58f8f11": ["model.retail_dbt.dim_loyalty_programs_scd"], "test.retail_dbt.not_null_dim_products_scd_product_id.888f04d8f7": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.unique_dim_products_scd_product_id.87baa6b989": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_products_scd_name.2e07a01976": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_products_scd_category_id.525f0df4c5": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_products_scd_brand_id.c6bec72bb3": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_products_scd_supplier_id.a891d79aaf": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_products_scd_price.d616170fd5": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_products_scd_created_at.359e29dc39": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_products_scd_season.1a2da695e2": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_products_scd_dbt_scd_id.64fe98147e": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_products_scd_dbt_updated_at.ad195b0ea9": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_products_scd_dbt_valid_from.129e676468": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_products_scd_dbt_valid_to.06eb6909d3": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_products_scd_product_sk.08e66abbef": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_products_scd_valid_from.ff3104926b": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_products_scd_valid_to.07fb76bf34": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_products_scd_is_current.f1a053499d": ["model.retail_dbt.dim_products_scd"], "test.retail_dbt.not_null_dim_promotions_scd_promotion_id.68a043e3c4": ["model.retail_dbt.dim_promotions_scd"], "test.retail_dbt.unique_dim_promotions_scd_promotion_id.cd385201fe": ["model.retail_dbt.dim_promotions_scd"], "test.retail_dbt.not_null_dim_promotions_scd_name.eff08cd11a": ["model.retail_dbt.dim_promotions_scd"], "test.retail_dbt.not_null_dim_promotions_scd_start_date.da0735dcd5": ["model.retail_dbt.dim_promotions_scd"], "test.retail_dbt.not_null_dim_promotions_scd_end_date.fdca100ea5": ["model.retail_dbt.dim_promotions_scd"], "test.retail_dbt.not_null_dim_promotions_scd_dbt_scd_id.b1c88a581f": ["model.retail_dbt.dim_promotions_scd"], "test.retail_dbt.not_null_dim_promotions_scd_dbt_updated_at.f5373d9439": ["model.retail_dbt.dim_promotions_scd"], "test.retail_dbt.not_null_dim_promotions_scd_dbt_valid_from.f013709fc8": ["model.retail_dbt.dim_promotions_scd"], "test.retail_dbt.not_null_dim_promotions_scd_dbt_valid_to.dc9326ebd7": ["model.retail_dbt.dim_promotions_scd"], "test.retail_dbt.not_null_dim_promotions_scd_promotion_sk.bd7c176ae5": ["model.retail_dbt.dim_promotions_scd"], "test.retail_dbt.not_null_dim_promotions_scd_valid_from.e12b3e052f": ["model.retail_dbt.dim_promotions_scd"], "test.retail_dbt.not_null_dim_promotions_scd_valid_to.9419731417": ["model.retail_dbt.dim_promotions_scd"], "test.retail_dbt.not_null_dim_promotions_scd_is_current.c1c92cb247": ["model.retail_dbt.dim_promotions_scd"], "test.retail_dbt.not_null_dim_stores_scd_store_id.eb554c331f": ["model.retail_dbt.dim_stores_scd"], "test.retail_dbt.unique_dim_stores_scd_store_id.6625450729": ["model.retail_dbt.dim_stores_scd"], "test.retail_dbt.not_null_dim_stores_scd_name.57cf8fd999": ["model.retail_dbt.dim_stores_scd"], "test.retail_dbt.not_null_dim_stores_scd_location.0fb1fcff58": ["model.retail_dbt.dim_stores_scd"], "test.retail_dbt.not_null_dim_stores_scd_manager_id.38d4e973e8": ["model.retail_dbt.dim_stores_scd"], "test.retail_dbt.not_null_dim_stores_scd_dbt_scd_id.6c8439aad5": ["model.retail_dbt.dim_stores_scd"], "test.retail_dbt.not_null_dim_stores_scd_dbt_updated_at.e345a23f59": ["model.retail_dbt.dim_stores_scd"], "test.retail_dbt.not_null_dim_stores_scd_dbt_valid_from.d644927787": ["model.retail_dbt.dim_stores_scd"], "test.retail_dbt.not_null_dim_stores_scd_dbt_valid_to.a973a28dbc": ["model.retail_dbt.dim_stores_scd"], "test.retail_dbt.not_null_dim_stores_scd_store_sk.75a15a101c": ["model.retail_dbt.dim_stores_scd"], "test.retail_dbt.not_null_dim_stores_scd_valid_from.8b8490821f": ["model.retail_dbt.dim_stores_scd"], "test.retail_dbt.not_null_dim_stores_scd_valid_to.587d234d24": ["model.retail_dbt.dim_stores_scd"], "test.retail_dbt.not_null_dim_stores_scd_is_current.a5e5c85257": ["model.retail_dbt.dim_stores_scd"], "test.retail_dbt.not_null_dim_suppliers_scd_supplier_id.b2cfb6ed2a": ["model.retail_dbt.dim_suppliers_scd"], "test.retail_dbt.unique_dim_suppliers_scd_supplier_id.d042172574": ["model.retail_dbt.dim_suppliers_scd"], "test.retail_dbt.not_null_dim_suppliers_scd_name.11edeb06e1": ["model.retail_dbt.dim_suppliers_scd"], "test.retail_dbt.not_null_dim_suppliers_scd_contact_info.586f4ecbc6": ["model.retail_dbt.dim_suppliers_scd"], "test.retail_dbt.not_null_dim_suppliers_scd_dbt_scd_id.cd6b9cad0e": ["model.retail_dbt.dim_suppliers_scd"], "test.retail_dbt.not_null_dim_suppliers_scd_dbt_updated_at.e8aeeea372": ["model.retail_dbt.dim_suppliers_scd"], "test.retail_dbt.not_null_dim_suppliers_scd_dbt_valid_from.c8ab1f4710": ["model.retail_dbt.dim_suppliers_scd"], "test.retail_dbt.not_null_dim_suppliers_scd_dbt_valid_to.6c4f8f5e93": ["model.retail_dbt.dim_suppliers_scd"], "test.retail_dbt.not_null_dim_suppliers_scd_supplier_sk.3062b6e773": ["model.retail_dbt.dim_suppliers_scd"], "test.retail_dbt.not_null_dim_suppliers_scd_valid_from.ac87d1b209": ["model.retail_dbt.dim_suppliers_scd"], "test.retail_dbt.not_null_dim_suppliers_scd_valid_to.b898b9d917": ["model.retail_dbt.dim_suppliers_scd"], "test.retail_dbt.not_null_dim_suppliers_scd_is_current.a0ea2cb2e1": ["model.retail_dbt.dim_suppliers_scd"], "test.retail_dbt.not_null_dim_tax_rules_tax_id.149c22c98b": ["model.retail_dbt.dim_tax_rules"], "test.retail_dbt.unique_dim_tax_rules_tax_id.dc86f06360": ["model.retail_dbt.dim_tax_rules"], "test.retail_dbt.not_null_dim_tax_rules_product_id.9e61b95297": ["model.retail_dbt.dim_tax_rules"], "test.retail_dbt.not_null_dim_tax_rules_tax_rate.db33d03da1": ["model.retail_dbt.dim_tax_rules"], "test.retail_dbt.not_null_dim_tax_rules_region.0377b55149": ["model.retail_dbt.dim_tax_rules"], "test.retail_dbt.not_null_fct_customer_feedback_feedback_id.290ec7f6ca": ["model.retail_dbt.fct_customer_feedback"], "test.retail_dbt.unique_fct_customer_feedback_feedback_id.769d5be999": ["model.retail_dbt.fct_customer_feedback"], "test.retail_dbt.not_null_fct_customer_feedback_customer_id.f3a53e00a3": ["model.retail_dbt.fct_customer_feedback"], "test.retail_dbt.not_null_fct_customer_feedback_store_id.e4db9a27ee": ["model.retail_dbt.fct_customer_feedback"], "test.retail_dbt.not_null_fct_customer_feedback_product_id.fcca4d142d": ["model.retail_dbt.fct_customer_feedback"], "test.retail_dbt.not_null_fct_customer_feedback_rating.b81d0c4d8d": ["model.retail_dbt.fct_customer_feedback"], "test.retail_dbt.not_null_fct_customer_feedback_comments.f30943758d": ["model.retail_dbt.fct_customer_feedback"], "test.retail_dbt.not_null_fct_customer_feedback_feedback_date.5484fc0f41": ["model.retail_dbt.fct_customer_feedback"], "test.retail_dbt.not_null_fct_customer_feedback_customer_name.2c828aca63": ["model.retail_dbt.fct_customer_feedback"], "test.retail_dbt.not_null_fct_customer_feedback_store_name.a504fa53f8": ["model.retail_dbt.fct_customer_feedback"], "test.retail_dbt.not_null_fct_customer_feedback_product_name.27663ad7e1": ["model.retail_dbt.fct_customer_feedback"], "test.retail_dbt.not_null_fct_customer_feedback_feedback_year.72346da577": ["model.retail_dbt.fct_customer_feedback"], "test.retail_dbt.not_null_fct_customer_feedback_feedback_month.441da6ee87": ["model.retail_dbt.fct_customer_feedback"], "test.retail_dbt.not_null_fct_customer_feedback_feedback_day.40e1bb2f83": ["model.retail_dbt.fct_customer_feedback"], "test.retail_dbt.not_null_fct_inventory_inventory_id.c3674522ab": ["model.retail_dbt.fct_inventory"], "test.retail_dbt.unique_fct_inventory_inventory_id.1cf54f628e": ["model.retail_dbt.fct_inventory"], "test.retail_dbt.not_null_fct_inventory_store_id.0eb1c2b718": ["model.retail_dbt.fct_inventory"], "test.retail_dbt.not_null_fct_inventory_product_id.55271876bd": ["model.retail_dbt.fct_inventory"], "test.retail_dbt.not_null_fct_inventory_quantity.b01f0f5d7b": ["model.retail_dbt.fct_inventory"], "test.retail_dbt.not_null_fct_inventory_last_updated.dfe083d6e9": ["model.retail_dbt.fct_inventory"], "test.retail_dbt.not_null_fct_inventory_store_name.36742932e5": ["model.retail_dbt.fct_inventory"], "test.retail_dbt.not_null_fct_inventory_product_name.ef036593c6": ["model.retail_dbt.fct_inventory"], "test.retail_dbt.not_null_fct_inventory_last_updated_year.48cd555f65": ["model.retail_dbt.fct_inventory"], "test.retail_dbt.not_null_fct_inventory_last_updated_month.67a2657bfc": ["model.retail_dbt.fct_inventory"], "test.retail_dbt.not_null_fct_inventory_last_updated_day.3f95fafb5d": ["model.retail_dbt.fct_inventory"], "test.retail_dbt.not_null_fct_pricing_history_history_id.6fa60f1cbc": ["model.retail_dbt.fct_pricing_history"], "test.retail_dbt.unique_fct_pricing_history_history_id.99c76c96fe": ["model.retail_dbt.fct_pricing_history"], "test.retail_dbt.not_null_fct_pricing_history_product_id.af202ef865": ["model.retail_dbt.fct_pricing_history"], "test.retail_dbt.not_null_fct_pricing_history_price.91e1728b2b": ["model.retail_dbt.fct_pricing_history"], "test.retail_dbt.not_null_fct_pricing_history_effective_date.578e01ad9a": ["model.retail_dbt.fct_pricing_history"], "test.retail_dbt.not_null_fct_pricing_history_product_name.8632159ba6": ["model.retail_dbt.fct_pricing_history"], "test.retail_dbt.not_null_fct_pricing_history_effective_year.37172b90f8": ["model.retail_dbt.fct_pricing_history"], "test.retail_dbt.not_null_fct_pricing_history_effective_month.36473878ff": ["model.retail_dbt.fct_pricing_history"], "test.retail_dbt.not_null_fct_purchase_orders_order_id.985efd7afa": ["model.retail_dbt.fct_purchase_orders"], "test.retail_dbt.unique_fct_purchase_orders_order_id.9b983fae18": ["model.retail_dbt.fct_purchase_orders"], "test.retail_dbt.not_null_fct_purchase_orders_supplier_id.0ea61a31cb": ["model.retail_dbt.fct_purchase_orders"], "test.retail_dbt.not_null_fct_purchase_orders_order_date.d69ebd4960": ["model.retail_dbt.fct_purchase_orders"], "test.retail_dbt.not_null_fct_purchase_orders_status.0bda348636": ["model.retail_dbt.fct_purchase_orders"], "test.retail_dbt.not_null_fct_purchase_orders_supplier_name.672f54587e": ["model.retail_dbt.fct_purchase_orders"], "test.retail_dbt.not_null_fct_purchase_orders_order_year.5b7ecc0640": ["model.retail_dbt.fct_purchase_orders"], "test.retail_dbt.not_null_fct_purchase_orders_order_month.9ae7c12a3e": ["model.retail_dbt.fct_purchase_orders"], "test.retail_dbt.not_null_fct_purchase_orders_order_day.b3ecf021aa": ["model.retail_dbt.fct_purchase_orders"], "test.retail_dbt.not_null_fct_returns_return_id.f5e79b5df0": ["model.retail_dbt.fct_returns"], "test.retail_dbt.unique_fct_returns_return_id.d461048e81": ["model.retail_dbt.fct_returns"], "test.retail_dbt.not_null_fct_returns_item_id.b07181f0c9": ["model.retail_dbt.fct_returns"], "test.retail_dbt.not_null_fct_returns_reason.cfc2bc25cf": ["model.retail_dbt.fct_returns"], "test.retail_dbt.not_null_fct_returns_return_date.68cf4a5dd2": ["model.retail_dbt.fct_returns"], "test.retail_dbt.not_null_fct_returns_product_id.eac7c2e9a8": ["model.retail_dbt.fct_returns"], "test.retail_dbt.not_null_fct_returns_returned_quantity.7832676150": ["model.retail_dbt.fct_returns"], "test.retail_dbt.not_null_fct_returns_product_name.a9969e8f2c": ["model.retail_dbt.fct_returns"], "test.retail_dbt.not_null_fct_returns_customer_id.0b988c1fc5": ["model.retail_dbt.fct_returns"], "test.retail_dbt.not_null_fct_returns_store_name.ff87589dc0": ["model.retail_dbt.fct_returns"], "test.retail_dbt.not_null_fct_returns_return_year.3559dc73d8": ["model.retail_dbt.fct_returns"], "test.retail_dbt.not_null_fct_returns_return_month.db1bccbc54": ["model.retail_dbt.fct_returns"], "test.retail_dbt.not_null_fct_returns_return_day.04a48b9b1e": ["model.retail_dbt.fct_returns"], "test.retail_dbt.not_null_fct_sales_items_item_id.4222fa4674": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.unique_fct_sales_items_item_id.5a55da8b8b": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_items_transaction_id.64d2810d05": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_items_product_id.994a6131e6": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_items_quantity.8ac109260f": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_items_unit_price.70dbf3e9ee": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_items_discount.e0ac2718d6": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_items_tax.80bf57b12a": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_items_gross_amount.5819b82261": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_items_net_amount.e75e88a87c": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_items_business_validation_flag.b7cc4d94b6": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_items_product_name.c2ed25d3d1": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_items_category_name.3951967161": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_items_customer_id.ee86af3d0d": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_items_store_name.e8d3862422": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_items_transaction_year.25032ec5f5": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_items_transaction_month.24b38791d4": ["model.retail_dbt.fct_sales_items"], "test.retail_dbt.not_null_fct_sales_transactions_transaction_id.6aa0a0732d": ["model.retail_dbt.fct_sales_transactions"], "test.retail_dbt.unique_fct_sales_transactions_transaction_id.dc29ee08f1": ["model.retail_dbt.fct_sales_transactions"], "test.retail_dbt.not_null_fct_sales_transactions_customer_id.a59585ae63": ["model.retail_dbt.fct_sales_transactions"], "test.retail_dbt.not_null_fct_sales_transactions_store_id.f1d1131dbb": ["model.retail_dbt.fct_sales_transactions"], "test.retail_dbt.not_null_fct_sales_transactions_employee_id.e803488ec0": ["model.retail_dbt.fct_sales_transactions"], "test.retail_dbt.not_null_fct_sales_transactions_transaction_date.14a9e3ac61": ["model.retail_dbt.fct_sales_transactions"], "test.retail_dbt.not_null_fct_sales_transactions_total_amount.d6bfe3802b": ["model.retail_dbt.fct_sales_transactions"], "test.retail_dbt.not_null_fct_sales_transactions_payment_id.f38f7868b8": ["model.retail_dbt.fct_sales_transactions"], "test.retail_dbt.not_null_fct_sales_transactions_customer_name.41e94942fa": ["model.retail_dbt.fct_sales_transactions"], "test.retail_dbt.not_null_fct_sales_transactions_store_name.e14a622f9b": ["model.retail_dbt.fct_sales_transactions"], "test.retail_dbt.not_null_fct_sales_transactions_employee_name.48c171139a": ["model.retail_dbt.fct_sales_transactions"], "test.retail_dbt.not_null_fct_sales_transactions_payment_method.65924986c5": ["model.retail_dbt.fct_sales_transactions"], "test.retail_dbt.not_null_fct_sales_transactions_transaction_year.14b2ae0c7e": ["model.retail_dbt.fct_sales_transactions"], "test.retail_dbt.not_null_fct_sales_transactions_transaction_month.50cb49dcc6": ["model.retail_dbt.fct_sales_transactions"], "test.retail_dbt.not_null_fct_sales_transactions_transaction_day.ff2426df86": ["model.retail_dbt.fct_sales_transactions"], "test.retail_dbt.not_null_fct_shipments_shipment_id.7b472eaf5b": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.unique_fct_shipments_shipment_id.c7c159f82c": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.not_null_fct_shipments_order_id.31824196fb": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.not_null_fct_shipments_store_id.cbaa0193f1": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.not_null_fct_shipments_shipped_date.a55e53121a": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.not_null_fct_shipments_received_date.a1d7a60517": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.not_null_fct_shipments_supplier_id.6a9b9eadca": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.not_null_fct_shipments_supplier_name.db948b952f": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.not_null_fct_shipments_store_name.99e48f1e8d": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.not_null_fct_shipments_shipped_year.23a61ed5d5": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.not_null_fct_shipments_shipped_month.17477a85cc": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.not_null_fct_shipments_shipped_day.3e35b68843": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.not_null_fct_shipments_received_year.10db577f8f": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.not_null_fct_shipments_received_month.3a25060656": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.not_null_fct_shipments_received_day.e3c9436f10": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.not_null_fct_shipments_shipment_duration_days.5f1f9fe2d0": ["model.retail_dbt.fct_shipments"], "test.retail_dbt.not_null_fct_stock_movements_movement_id.5325f52ab6": ["model.retail_dbt.fct_stock_movements"], "test.retail_dbt.unique_fct_stock_movements_movement_id.4f94955333": ["model.retail_dbt.fct_stock_movements"], "test.retail_dbt.not_null_fct_stock_movements_product_id.ed24f6fe8a": ["model.retail_dbt.fct_stock_movements"], "test.retail_dbt.not_null_fct_stock_movements_store_id.43d1e01385": ["model.retail_dbt.fct_stock_movements"], "test.retail_dbt.not_null_fct_stock_movements_movement_type.2f78394096": ["model.retail_dbt.fct_stock_movements"], "test.retail_dbt.not_null_fct_stock_movements_quantity.ed8ca7eb3a": ["model.retail_dbt.fct_stock_movements"], "test.retail_dbt.not_null_fct_stock_movements_movement_date.af4682980f": ["model.retail_dbt.fct_stock_movements"], "test.retail_dbt.not_null_fct_stock_movements_product_name.f6fcc3190b": ["model.retail_dbt.fct_stock_movements"], "test.retail_dbt.not_null_fct_stock_movements_store_name.3dba1692e7": ["model.retail_dbt.fct_stock_movements"], "test.retail_dbt.not_null_fct_stock_movements_movement_year.d2b6fa2c13": ["model.retail_dbt.fct_stock_movements"], "test.retail_dbt.not_null_fct_stock_movements_movement_month.ce0c4afedd": ["model.retail_dbt.fct_stock_movements"], "test.retail_dbt.not_null_fct_store_visits_visit_id.b04eec3a54": ["model.retail_dbt.fct_store_visits"], "test.retail_dbt.unique_fct_store_visits_visit_id.182732ac28": ["model.retail_dbt.fct_store_visits"], "test.retail_dbt.not_null_fct_store_visits_customer_id.a7afd7afb0": ["model.retail_dbt.fct_store_visits"], "test.retail_dbt.not_null_fct_store_visits_store_id.7967e95abb": ["model.retail_dbt.fct_store_visits"], "test.retail_dbt.not_null_fct_store_visits_visit_date.888b3ee58a": ["model.retail_dbt.fct_store_visits"], "test.retail_dbt.not_null_fct_store_visits_customer_name.210deecb76": ["model.retail_dbt.fct_store_visits"], "test.retail_dbt.not_null_fct_store_visits_store_name.68be67ae31": ["model.retail_dbt.fct_store_visits"], "test.retail_dbt.not_null_fct_store_visits_visit_year.a29b118227": ["model.retail_dbt.fct_store_visits"], "test.retail_dbt.not_null_fct_store_visits_visit_month.64aa632157": ["model.retail_dbt.fct_store_visits"], "test.retail_dbt.not_null_fct_store_visits_visit_day.6e9b93eb48": ["model.retail_dbt.fct_store_visits"], "source.retail_dbt.raw.brands": [], "source.retail_dbt.raw.campaigns": [], "source.retail_dbt.raw.categories": [], "source.retail_dbt.raw.customer_feedback": [], "source.retail_dbt.raw.customers": [], "source.retail_dbt.raw.discount_rules": [], "source.retail_dbt.raw.employees": [], "source.retail_dbt.raw.inventory": [], "source.retail_dbt.raw.loyalty_programs": [], "source.retail_dbt.raw.payments": [], "source.retail_dbt.raw.pricing_history": [], "source.retail_dbt.raw.products": [], "source.retail_dbt.raw.promotions": [], "source.retail_dbt.raw.purchase_orders": [], "source.retail_dbt.raw.returns": [], "source.retail_dbt.raw.sales_items": [], "source.retail_dbt.raw.sales_transactions": [], "source.retail_dbt.raw.shipments": [], "source.retail_dbt.raw.stock_movements": [], "source.retail_dbt.raw.store_visits": [], "source.retail_dbt.raw.stores": [], "source.retail_dbt.raw.suppliers": [], "source.retail_dbt.raw.tax_rules": []}, "child_map": {"model.retail_dbt.tax_rules_silver": ["model.retail_dbt.dim_tax_rules", "test.retail_dbt.not_null_tax_rules_silver_product_id.1223163e5d", "test.retail_dbt.not_null_tax_rules_silver_region.c6687fdd21", "test.retail_dbt.not_null_tax_rules_silver_tax_id.24ed2c7254", "test.retail_dbt.not_null_tax_rules_silver_tax_rate.8f3dac0898"], "model.retail_dbt.campaigns_silver": ["model.retail_dbt.dim_campaigns", "test.retail_dbt.not_null_campaigns_silver_budget.69bfe9da3e", "test.retail_dbt.not_null_campaigns_silver_campaign_id.4bdea18142", "test.retail_dbt.not_null_campaigns_silver_end_date.36ec8a11c0", "test.retail_dbt.not_null_campaigns_silver_name.599034b8a0", "test.retail_dbt.not_null_campaigns_silver_staged_at.782d626fff", "test.retail_dbt.not_null_campaigns_silver_start_date.efe0421e5c"], "model.retail_dbt.suppliers_silver": ["model.retail_dbt.fct_pricing_history", "model.retail_dbt.fct_purchase_orders", "model.retail_dbt.fct_shipments", "snapshot.retail_dbt.dim_suppliers_snapshot", "test.retail_dbt.not_null_suppliers_silver_contact_info.a90509e888", "test.retail_dbt.not_null_suppliers_silver_name.61cee018b3", "test.retail_dbt.not_null_suppliers_silver_supplier_id.82e9077042"], "model.retail_dbt.shipments_silver": ["model.retail_dbt.fct_shipments", "test.retail_dbt.not_null_shipments_silver_order_id.6b7ddbfc6b", "test.retail_dbt.not_null_shipments_silver_received_date.a083993648", "test.retail_dbt.not_null_shipments_silver_shipment_id.ab52987a98", "test.retail_dbt.not_null_shipments_silver_shipped_date.75a36020ee", "test.retail_dbt.not_null_shipments_silver_store_id.cd277ca902"], "model.retail_dbt.pricing_history_silver": ["model.retail_dbt.fct_pricing_history", "test.retail_dbt.not_null_pricing_history_silver_effective_date.e4ecdc8dc4", "test.retail_dbt.not_null_pricing_history_silver_history_id.e867959250", "test.retail_dbt.not_null_pricing_history_silver_price.b1fde7cb52", "test.retail_dbt.not_null_pricing_history_silver_product_id.35adcf9c8d"], "model.retail_dbt.purchase_orders_silver": ["model.retail_dbt.fct_purchase_orders", "model.retail_dbt.fct_shipments", "test.retail_dbt.not_null_purchase_orders_silver_order_date.763925638d", "test.retail_dbt.not_null_purchase_orders_silver_order_id.465030e034", "test.retail_dbt.not_null_purchase_orders_silver_status.c17b884943", "test.retail_dbt.not_null_purchase_orders_silver_supplier_id.ec936eb5b5"], "model.retail_dbt.products_silver": ["model.retail_dbt.fct_customer_feedback", "model.retail_dbt.fct_inventory", "model.retail_dbt.fct_pricing_history", "model.retail_dbt.fct_returns", "model.retail_dbt.fct_sales_items", "model.retail_dbt.fct_stock_movements", "snapshot.retail_dbt.dim_products_snapshot", "test.retail_dbt.not_null_products_silver_brand_id.e24a5ce560", "test.retail_dbt.not_null_products_silver_category_id.2a4206bc12", "test.retail_dbt.not_null_products_silver_created_at.f661bb341b", "test.retail_dbt.not_null_products_silver_name.2eb427bac7", "test.retail_dbt.not_null_products_silver_price.1d7617dbc8", "test.retail_dbt.not_null_products_silver_product_id.ac9520ee8d", "test.retail_dbt.not_null_products_silver_season.93161b0991", "test.retail_dbt.not_null_products_silver_supplier_id.f8bf6dd3c6"], "model.retail_dbt.inventory_silver": ["model.retail_dbt.fct_inventory", "test.retail_dbt.not_null_inventory_silver_inventory_id.b8e25e2251", "test.retail_dbt.not_null_inventory_silver_last_updated.0342be2bb9", "test.retail_dbt.not_null_inventory_silver_product_id.d0a7b9584f", "test.retail_dbt.not_null_inventory_silver_quantity.ea309d107b", "test.retail_dbt.not_null_inventory_silver_store_id.b0a34febbd"], "model.retail_dbt.customer_feedback_silver": ["model.retail_dbt.fct_customer_feedback", "test.retail_dbt.not_null_customer_feedback_silver_comments.25e81fd4ae", "test.retail_dbt.not_null_customer_feedback_silver_customer_id.bed22c5c35", "test.retail_dbt.not_null_customer_feedback_silver_feedback_date.7c4177c699", "test.retail_dbt.not_null_customer_feedback_silver_feedback_id.3946bdc56e", "test.retail_dbt.not_null_customer_feedback_silver_product_id.8fb9eeb315", "test.retail_dbt.not_null_customer_feedback_silver_rating.ab5a9630b5", "test.retail_dbt.not_null_customer_feedback_silver_store_id.2d5e8f99b2"], "model.retail_dbt.sales_transactions_silver": ["model.retail_dbt.fct_payments", "model.retail_dbt.fct_returns", "model.retail_dbt.fct_sales_items", "model.retail_dbt.fct_sales_transactions", "test.retail_dbt.not_null_sales_transactions_silver_customer_id.0cba059371", "test.retail_dbt.not_null_sales_transactions_silver_employee_id.088a404cad", "test.retail_dbt.not_null_sales_transactions_silver_payment_id.020fe22706", "test.retail_dbt.not_null_sales_transactions_silver_store_id.3c2472f6c0", "test.retail_dbt.not_null_sales_transactions_silver_total_amount.6e07d2cc0f", "test.retail_dbt.not_null_sales_transactions_silver_transaction_date.59131f37e7", "test.retail_dbt.not_null_sales_transactions_silver_transaction_id.736115426b"], "model.retail_dbt.stock_movements_silver": ["model.retail_dbt.fct_stock_movements", "test.retail_dbt.not_null_stock_movements_silver_movement_date.efe72dd68d", "test.retail_dbt.not_null_stock_movements_silver_movement_id.9441e6c7bf", "test.retail_dbt.not_null_stock_movements_silver_movement_type.a5e3a59630", "test.retail_dbt.not_null_stock_movements_silver_product_id.893e7e84b1", "test.retail_dbt.not_null_stock_movements_silver_quantity.2ffe698ded", "test.retail_dbt.not_null_stock_movements_silver_store_id.87dd62d582"], "model.retail_dbt.employees_silver": ["model.retail_dbt.fct_payments", "model.retail_dbt.fct_sales_transactions", "snapshot.retail_dbt.dim_employees_snapshot", "test.retail_dbt.not_null_employees_silver_employee_id.c69a236ad3", "test.retail_dbt.not_null_employees_silver_name.3812e26daf", "test.retail_dbt.not_null_employees_silver_role.958be5c671", "test.retail_dbt.not_null_employees_silver_store_id.0e962c8015"], "model.retail_dbt.brands_silver": ["model.retail_dbt.fct_pricing_history", "snapshot.retail_dbt.dim_brands_snapshot", "test.retail_dbt.not_null_brands_silver_brand_id.e37c5b2859", "test.retail_dbt.not_null_brands_silver_name.cfe1fe35d4", "test.retail_dbt.not_null_brands_silver_staged_at.0c3bcd18b1"], "model.retail_dbt.loyalty_programs_silver": ["snapshot.retail_dbt.dim_loyalty_programs_snapshot", "test.retail_dbt.not_null_loyalty_programs_silver_loyalty_program_id.b5828a7162", "test.retail_dbt.not_null_loyalty_programs_silver_name.89b9e901e2", "test.retail_dbt.not_null_loyalty_programs_silver_points_per_dollar.b30f4d0a71"], "model.retail_dbt.customers_silver": ["model.retail_dbt.fct_customer_feedback", "model.retail_dbt.fct_payments", "model.retail_dbt.fct_sales_transactions", "model.retail_dbt.fct_store_visits", "snapshot.retail_dbt.dim_customers_snapshot", "test.retail_dbt.not_null_customers_silver_created_at.f6eb18d9e4", "test.retail_dbt.not_null_customers_silver_customer_id.754b05a681", "test.retail_dbt.not_null_customers_silver_email.6856528552", "test.retail_dbt.not_null_customers_silver_loyalty_program_id.c42d2a00d8", "test.retail_dbt.not_null_customers_silver_name.864d7a97ce", "test.retail_dbt.not_null_customers_silver_phone.ca7dddc621"], "model.retail_dbt.payments_silver": ["model.retail_dbt.fct_payments", "model.retail_dbt.fct_sales_transactions", "test.retail_dbt.not_null_payments_silver_method.de459907f5", "test.retail_dbt.not_null_payments_silver_paid_at.fb99aa72f2", "test.retail_dbt.not_null_payments_silver_payment_id.c1d20ab72b", "test.retail_dbt.not_null_payments_silver_status.c2c4b77279"], "model.retail_dbt.promotions_silver": ["snapshot.retail_dbt.dim_promotions_snapshot", "test.retail_dbt.not_null_promotions_silver_end_date.a8843536c8", "test.retail_dbt.not_null_promotions_silver_name.6337430c9c", "test.retail_dbt.not_null_promotions_silver_promotion_id.b988028c60", "test.retail_dbt.not_null_promotions_silver_start_date.9d08c0ea43"], "model.retail_dbt.sales_items_silver": ["model.retail_dbt.fct_returns", "model.retail_dbt.fct_sales_items", "test.retail_dbt.not_null_sales_items_silver_business_validation_flag.fc94ea645a", "test.retail_dbt.not_null_sales_items_silver_discount.7062a6a5ed", "test.retail_dbt.not_null_sales_items_silver_gross_amount.a4eef2ff4d", "test.retail_dbt.not_null_sales_items_silver_item_id.db1727c955", "test.retail_dbt.not_null_sales_items_silver_net_amount.afde194730", "test.retail_dbt.not_null_sales_items_silver_product_id.d90d226a0c", "test.retail_dbt.not_null_sales_items_silver_quantity.541fc853cd", "test.retail_dbt.not_null_sales_items_silver_tax.d8eacf8588", "test.retail_dbt.not_null_sales_items_silver_transaction_id.47979a6b46", "test.retail_dbt.not_null_sales_items_silver_unit_price.83bc8f6f4b"], "model.retail_dbt.discount_rules_silver": ["model.retail_dbt.dim_discount_rules", "test.retail_dbt.not_null_discount_rules_silver_discount_type.508466577d", "test.retail_dbt.not_null_discount_rules_silver_product_id.81bef753f4", "test.retail_dbt.not_null_discount_rules_silver_rule_id.3bd4495dec", "test.retail_dbt.not_null_discount_rules_silver_valid_from.8c61636ef6", "test.retail_dbt.not_null_discount_rules_silver_valid_to.b846afb85a", "test.retail_dbt.not_null_discount_rules_silver_value.c62b860389"], "model.retail_dbt.returns_silver": ["model.retail_dbt.fct_returns", "test.retail_dbt.not_null_returns_silver_item_id.c11f187f38", "test.retail_dbt.not_null_returns_silver_reason.4566784310", "test.retail_dbt.not_null_returns_silver_return_date.d4c90371c5", "test.retail_dbt.not_null_returns_silver_return_id.5102a4a0a2"], "model.retail_dbt.stores_silver": ["model.retail_dbt.fct_customer_feedback", "model.retail_dbt.fct_inventory", "model.retail_dbt.fct_payments", "model.retail_dbt.fct_returns", "model.retail_dbt.fct_sales_items", "model.retail_dbt.fct_sales_transactions", "model.retail_dbt.fct_shipments", "model.retail_dbt.fct_stock_movements", "model.retail_dbt.fct_store_visits", "snapshot.retail_dbt.dim_stores_snapshot", "test.retail_dbt.not_null_stores_silver_location.9e197b2d81", "test.retail_dbt.not_null_stores_silver_manager_id.c3c7ff2ffa", "test.retail_dbt.not_null_stores_silver_name.c7d29b75c3", "test.retail_dbt.not_null_stores_silver_store_id.7b5b9ac097"], "model.retail_dbt.store_visits_silver": ["model.retail_dbt.fct_store_visits", "test.retail_dbt.not_null_store_visits_silver_customer_id.57f338221d", "test.retail_dbt.not_null_store_visits_silver_store_id.4276ef5282", "test.retail_dbt.not_null_store_visits_silver_visit_date.adefa3499d", "test.retail_dbt.not_null_store_visits_silver_visit_id.04f76e4203"], "model.retail_dbt.categories_silver": ["model.retail_dbt.fct_pricing_history", "model.retail_dbt.fct_sales_items", "snapshot.retail_dbt.dim_categories_snapshot", "test.retail_dbt.not_null_categories_silver_category_id.28d2833aa5", "test.retail_dbt.not_null_categories_silver_name.9b8db46a0d", "test.retail_dbt.not_null_categories_silver_staged_at.580eaf4605"], "model.retail_dbt.stg_categories": ["model.retail_dbt.categories_silver"], "model.retail_dbt.stg_sales_items": ["model.retail_dbt.sales_items_silver"], "model.retail_dbt.stg_shipments": ["model.retail_dbt.shipments_silver"], "model.retail_dbt.stg_stores": ["model.retail_dbt.stores_silver"], "model.retail_dbt.stg_returns": ["model.retail_dbt.returns_silver"], "model.retail_dbt.stg_discount_rules": ["model.retail_dbt.discount_rules_silver"], "model.retail_dbt.stg_promotions": ["model.retail_dbt.promotions_silver"], "model.retail_dbt.stg_inventory": ["model.retail_dbt.inventory_silver"], "model.retail_dbt.stg_campaigns": ["model.retail_dbt.campaigns_silver"], "model.retail_dbt.stg_sales_transactions": ["model.retail_dbt.sales_transactions_silver"], "model.retail_dbt.stg_brands": ["model.retail_dbt.brands_silver"], "model.retail_dbt.stg_customer_feedback": ["model.retail_dbt.customer_feedback_silver"], "model.retail_dbt.stg_customers": ["model.retail_dbt.customers_silver"], "model.retail_dbt.stg_store_visits": ["model.retail_dbt.store_visits_silver"], "model.retail_dbt.stg_loyalty_programs": ["model.retail_dbt.loyalty_programs_invalid", "model.retail_dbt.loyalty_programs_silver"], "model.retail_dbt.stg_suppliers": ["model.retail_dbt.suppliers_silver"], "model.retail_dbt.stg_stock_movements": ["model.retail_dbt.stock_movements_silver"], "model.retail_dbt.stg_pricing_history": ["model.retail_dbt.pricing_history_silver"], "model.retail_dbt.stg_purchase_orders": ["model.retail_dbt.purchase_orders_silver"], "model.retail_dbt.stg_payments": ["model.retail_dbt.payments_silver"], "model.retail_dbt.stg_products": ["model.retail_dbt.products_silver"], "model.retail_dbt.stg_employees": ["model.retail_dbt.employees_silver"], "model.retail_dbt.stg_tax_rules": ["model.retail_dbt.tax_rules_silver"], "model.retail_dbt.dim_products_scd": ["test.retail_dbt.not_null_dim_products_scd_brand_id.c6bec72bb3", "test.retail_dbt.not_null_dim_products_scd_category_id.525f0df4c5", "test.retail_dbt.not_null_dim_products_scd_created_at.359e29dc39", "test.retail_dbt.not_null_dim_products_scd_dbt_scd_id.64fe98147e", "test.retail_dbt.not_null_dim_products_scd_dbt_updated_at.ad195b0ea9", "test.retail_dbt.not_null_dim_products_scd_dbt_valid_from.129e676468", "test.retail_dbt.not_null_dim_products_scd_dbt_valid_to.06eb6909d3", "test.retail_dbt.not_null_dim_products_scd_is_current.f1a053499d", "test.retail_dbt.not_null_dim_products_scd_name.2e07a01976", "test.retail_dbt.not_null_dim_products_scd_price.d616170fd5", "test.retail_dbt.not_null_dim_products_scd_product_id.888f04d8f7", "test.retail_dbt.not_null_dim_products_scd_product_sk.08e66abbef", "test.retail_dbt.not_null_dim_products_scd_season.1a2da695e2", "test.retail_dbt.not_null_dim_products_scd_supplier_id.a891d79aaf", "test.retail_dbt.not_null_dim_products_scd_valid_from.ff3104926b", "test.retail_dbt.not_null_dim_products_scd_valid_to.07fb76bf34", "test.retail_dbt.unique_dim_products_scd_product_id.87baa6b989"], "model.retail_dbt.fct_inventory": ["test.retail_dbt.not_null_fct_inventory_inventory_id.c3674522ab", "test.retail_dbt.not_null_fct_inventory_last_updated.dfe083d6e9", "test.retail_dbt.not_null_fct_inventory_last_updated_day.3f95fafb5d", "test.retail_dbt.not_null_fct_inventory_last_updated_month.67a2657bfc", "test.retail_dbt.not_null_fct_inventory_last_updated_year.48cd555f65", "test.retail_dbt.not_null_fct_inventory_product_id.55271876bd", "test.retail_dbt.not_null_fct_inventory_product_name.ef036593c6", "test.retail_dbt.not_null_fct_inventory_quantity.b01f0f5d7b", "test.retail_dbt.not_null_fct_inventory_store_id.0eb1c2b718", "test.retail_dbt.not_null_fct_inventory_store_name.36742932e5", "test.retail_dbt.unique_fct_inventory_inventory_id.1cf54f628e"], "model.retail_dbt.dim_categories_scd": ["test.retail_dbt.not_null_dim_categories_scd_category_id.d57e3f2fe4", "test.retail_dbt.not_null_dim_categories_scd_category_sk.96df2a66cf", "test.retail_dbt.not_null_dim_categories_scd_dbt_scd_id.dd413e98d8", "test.retail_dbt.not_null_dim_categories_scd_dbt_updated_at.db8d94fc39", "test.retail_dbt.not_null_dim_categories_scd_dbt_valid_from.f655d038ca", "test.retail_dbt.not_null_dim_categories_scd_dbt_valid_to.997f516640", "test.retail_dbt.not_null_dim_categories_scd_is_current.e82f2605e7", "test.retail_dbt.not_null_dim_categories_scd_name.e1787b6126", "test.retail_dbt.not_null_dim_categories_scd_staged_at.03ba82dab0", "test.retail_dbt.not_null_dim_categories_scd_valid_from.3f6c56d686", "test.retail_dbt.not_null_dim_categories_scd_valid_to.39024b6046", "test.retail_dbt.unique_dim_categories_scd_category_id.a547519caa"], "model.retail_dbt.dim_discount_rules": ["test.retail_dbt.not_null_dim_discount_rules_discount_type.a759a6bff8", "test.retail_dbt.not_null_dim_discount_rules_product_id.8ab02eea4b", "test.retail_dbt.not_null_dim_discount_rules_rule_id.bea823b062", "test.retail_dbt.not_null_dim_discount_rules_valid_from.96af6b93c0", "test.retail_dbt.not_null_dim_discount_rules_valid_to.42ac252875", "test.retail_dbt.not_null_dim_discount_rules_value.e6ec5427b6", "test.retail_dbt.unique_dim_discount_rules_rule_id.2d4022ebb6"], "model.retail_dbt.dim_promotions_scd": ["test.retail_dbt.not_null_dim_promotions_scd_dbt_scd_id.b1c88a581f", "test.retail_dbt.not_null_dim_promotions_scd_dbt_updated_at.f5373d9439", "test.retail_dbt.not_null_dim_promotions_scd_dbt_valid_from.f013709fc8", "test.retail_dbt.not_null_dim_promotions_scd_dbt_valid_to.dc9326ebd7", "test.retail_dbt.not_null_dim_promotions_scd_end_date.fdca100ea5", "test.retail_dbt.not_null_dim_promotions_scd_is_current.c1c92cb247", "test.retail_dbt.not_null_dim_promotions_scd_name.eff08cd11a", "test.retail_dbt.not_null_dim_promotions_scd_promotion_id.68a043e3c4", "test.retail_dbt.not_null_dim_promotions_scd_promotion_sk.bd7c176ae5", "test.retail_dbt.not_null_dim_promotions_scd_start_date.da0735dcd5", "test.retail_dbt.not_null_dim_promotions_scd_valid_from.e12b3e052f", "test.retail_dbt.not_null_dim_promotions_scd_valid_to.9419731417", "test.retail_dbt.unique_dim_promotions_scd_promotion_id.cd385201fe"], "model.retail_dbt.fct_store_visits": ["test.retail_dbt.not_null_fct_store_visits_customer_id.a7afd7afb0", "test.retail_dbt.not_null_fct_store_visits_customer_name.210deecb76", "test.retail_dbt.not_null_fct_store_visits_store_id.7967e95abb", "test.retail_dbt.not_null_fct_store_visits_store_name.68be67ae31", "test.retail_dbt.not_null_fct_store_visits_visit_date.888b3ee58a", "test.retail_dbt.not_null_fct_store_visits_visit_day.6e9b93eb48", "test.retail_dbt.not_null_fct_store_visits_visit_id.b04eec3a54", "test.retail_dbt.not_null_fct_store_visits_visit_month.64aa632157", "test.retail_dbt.not_null_fct_store_visits_visit_year.a29b118227", "test.retail_dbt.unique_fct_store_visits_visit_id.182732ac28"], "model.retail_dbt.dim_customers_scd": ["test.retail_dbt.not_null_dim_customers_scd_created_at.6b44bd0165", "test.retail_dbt.not_null_dim_customers_scd_customer_id.56933c880b", "test.retail_dbt.not_null_dim_customers_scd_customer_sk.a516213f73", "test.retail_dbt.not_null_dim_customers_scd_dbt_scd_id.793c4db6f3", "test.retail_dbt.not_null_dim_customers_scd_dbt_updated_at.5585ab9cdd", "test.retail_dbt.not_null_dim_customers_scd_dbt_valid_from.5ed37ae6c3", "test.retail_dbt.not_null_dim_customers_scd_dbt_valid_to.ac2963c119", "test.retail_dbt.not_null_dim_customers_scd_email.dca7a01a3a", "test.retail_dbt.not_null_dim_customers_scd_is_current.18e6f7ab8f", "test.retail_dbt.not_null_dim_customers_scd_loyalty_program_id.98d673395a", "test.retail_dbt.not_null_dim_customers_scd_name.26c4fede0b", "test.retail_dbt.not_null_dim_customers_scd_phone.eaebcaf4c2", "test.retail_dbt.not_null_dim_customers_scd_valid_from.d76146eb84", "test.retail_dbt.not_null_dim_customers_scd_valid_to.6e22a57601", "test.retail_dbt.unique_dim_customers_scd_customer_id.2b326f2086"], "model.retail_dbt.dim_suppliers_scd": ["test.retail_dbt.not_null_dim_suppliers_scd_contact_info.586f4ecbc6", "test.retail_dbt.not_null_dim_suppliers_scd_dbt_scd_id.cd6b9cad0e", "test.retail_dbt.not_null_dim_suppliers_scd_dbt_updated_at.e8aeeea372", "test.retail_dbt.not_null_dim_suppliers_scd_dbt_valid_from.c8ab1f4710", "test.retail_dbt.not_null_dim_suppliers_scd_dbt_valid_to.6c4f8f5e93", "test.retail_dbt.not_null_dim_suppliers_scd_is_current.a0ea2cb2e1", "test.retail_dbt.not_null_dim_suppliers_scd_name.11edeb06e1", "test.retail_dbt.not_null_dim_suppliers_scd_supplier_id.b2cfb6ed2a", "test.retail_dbt.not_null_dim_suppliers_scd_supplier_sk.3062b6e773", "test.retail_dbt.not_null_dim_suppliers_scd_valid_from.ac87d1b209", "test.retail_dbt.not_null_dim_suppliers_scd_valid_to.b898b9d917", "test.retail_dbt.unique_dim_suppliers_scd_supplier_id.d042172574"], "model.retail_dbt.dim_campaigns": ["test.retail_dbt.not_null_dim_campaigns_budget.2df449c486", "test.retail_dbt.not_null_dim_campaigns_campaign_id.b113a46344", "test.retail_dbt.not_null_dim_campaigns_end_date.1c340a76b4", "test.retail_dbt.not_null_dim_campaigns_name.96fa971944", "test.retail_dbt.not_null_dim_campaigns_staged_at.8cda809396", "test.retail_dbt.not_null_dim_campaigns_start_date.482b5b3761", "test.retail_dbt.unique_dim_campaigns_campaign_id.efba50e300"], "model.retail_dbt.fct_purchase_orders": ["test.retail_dbt.not_null_fct_purchase_orders_order_date.d69ebd4960", "test.retail_dbt.not_null_fct_purchase_orders_order_day.b3ecf021aa", "test.retail_dbt.not_null_fct_purchase_orders_order_id.985efd7afa", "test.retail_dbt.not_null_fct_purchase_orders_order_month.9ae7c12a3e", "test.retail_dbt.not_null_fct_purchase_orders_order_year.5b7ecc0640", "test.retail_dbt.not_null_fct_purchase_orders_status.0bda348636", "test.retail_dbt.not_null_fct_purchase_orders_supplier_id.0ea61a31cb", "test.retail_dbt.not_null_fct_purchase_orders_supplier_name.672f54587e", "test.retail_dbt.unique_fct_purchase_orders_order_id.9b983fae18"], "model.retail_dbt.fct_payments": [], "model.retail_dbt.dim_loyalty_programs_scd": ["test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_scd_id.038f10ad7b", "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_updated_at.c9d70f49a2", "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_valid_from.7dac90a210", "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_valid_to.4c513e1ea4", "test.retail_dbt.not_null_dim_loyalty_programs_scd_is_current.43f58f8f11", "test.retail_dbt.not_null_dim_loyalty_programs_scd_loyalty_program_id.e84dfa91aa", "test.retail_dbt.not_null_dim_loyalty_programs_scd_loyalty_program_sk.84ba447ff4", "test.retail_dbt.not_null_dim_loyalty_programs_scd_name.3db7e3f58a", "test.retail_dbt.not_null_dim_loyalty_programs_scd_points_per_dollar.efe31e239c", "test.retail_dbt.not_null_dim_loyalty_programs_scd_valid_from.8260f64e1f", "test.retail_dbt.not_null_dim_loyalty_programs_scd_valid_to.e800634182", "test.retail_dbt.unique_dim_loyalty_programs_scd_loyalty_program_id.3e227fa805"], "model.retail_dbt.dim_tax_rules": ["test.retail_dbt.not_null_dim_tax_rules_product_id.9e61b95297", "test.retail_dbt.not_null_dim_tax_rules_region.0377b55149", "test.retail_dbt.not_null_dim_tax_rules_tax_id.149c22c98b", "test.retail_dbt.not_null_dim_tax_rules_tax_rate.db33d03da1", "test.retail_dbt.unique_dim_tax_rules_tax_id.dc86f06360"], "model.retail_dbt.fct_pricing_history": ["test.retail_dbt.not_null_fct_pricing_history_effective_date.578e01ad9a", "test.retail_dbt.not_null_fct_pricing_history_effective_month.36473878ff", "test.retail_dbt.not_null_fct_pricing_history_effective_year.37172b90f8", "test.retail_dbt.not_null_fct_pricing_history_history_id.6fa60f1cbc", "test.retail_dbt.not_null_fct_pricing_history_price.91e1728b2b", "test.retail_dbt.not_null_fct_pricing_history_product_id.af202ef865", "test.retail_dbt.not_null_fct_pricing_history_product_name.8632159ba6", "test.retail_dbt.unique_fct_pricing_history_history_id.99c76c96fe"], "model.retail_dbt.fct_sales_items": ["test.retail_dbt.not_null_fct_sales_items_business_validation_flag.b7cc4d94b6", "test.retail_dbt.not_null_fct_sales_items_category_name.3951967161", "test.retail_dbt.not_null_fct_sales_items_customer_id.ee86af3d0d", "test.retail_dbt.not_null_fct_sales_items_discount.e0ac2718d6", "test.retail_dbt.not_null_fct_sales_items_gross_amount.5819b82261", "test.retail_dbt.not_null_fct_sales_items_item_id.4222fa4674", "test.retail_dbt.not_null_fct_sales_items_net_amount.e75e88a87c", "test.retail_dbt.not_null_fct_sales_items_product_id.994a6131e6", "test.retail_dbt.not_null_fct_sales_items_product_name.c2ed25d3d1", "test.retail_dbt.not_null_fct_sales_items_quantity.8ac109260f", "test.retail_dbt.not_null_fct_sales_items_store_name.e8d3862422", "test.retail_dbt.not_null_fct_sales_items_tax.80bf57b12a", "test.retail_dbt.not_null_fct_sales_items_transaction_id.64d2810d05", "test.retail_dbt.not_null_fct_sales_items_transaction_month.24b38791d4", "test.retail_dbt.not_null_fct_sales_items_transaction_year.25032ec5f5", "test.retail_dbt.not_null_fct_sales_items_unit_price.70dbf3e9ee", "test.retail_dbt.unique_fct_sales_items_item_id.5a55da8b8b"], "model.retail_dbt.fct_stock_movements": ["test.retail_dbt.not_null_fct_stock_movements_movement_date.af4682980f", "test.retail_dbt.not_null_fct_stock_movements_movement_id.5325f52ab6", "test.retail_dbt.not_null_fct_stock_movements_movement_month.ce0c4afedd", "test.retail_dbt.not_null_fct_stock_movements_movement_type.2f78394096", "test.retail_dbt.not_null_fct_stock_movements_movement_year.d2b6fa2c13", "test.retail_dbt.not_null_fct_stock_movements_product_id.ed24f6fe8a", "test.retail_dbt.not_null_fct_stock_movements_product_name.f6fcc3190b", "test.retail_dbt.not_null_fct_stock_movements_quantity.ed8ca7eb3a", "test.retail_dbt.not_null_fct_stock_movements_store_id.43d1e01385", "test.retail_dbt.not_null_fct_stock_movements_store_name.3dba1692e7", "test.retail_dbt.unique_fct_stock_movements_movement_id.4f94955333"], "model.retail_dbt.dim_brands_scd": ["test.retail_dbt.not_null_dim_brands_scd_brand_id.3b2e1b3772", "test.retail_dbt.not_null_dim_brands_scd_brand_sk.d9538046e5", "test.retail_dbt.not_null_dim_brands_scd_dbt_scd_id.ad68bfdaf6", "test.retail_dbt.not_null_dim_brands_scd_dbt_updated_at.909731b239", "test.retail_dbt.not_null_dim_brands_scd_dbt_valid_from.3d7351d295", "test.retail_dbt.not_null_dim_brands_scd_dbt_valid_to.dfae77005a", "test.retail_dbt.not_null_dim_brands_scd_is_current.80ce1d1c55", "test.retail_dbt.not_null_dim_brands_scd_name.c6466cd9a4", "test.retail_dbt.not_null_dim_brands_scd_staged_at.c1b687ebe5", "test.retail_dbt.not_null_dim_brands_scd_valid_from.56ca0ccdfa", "test.retail_dbt.not_null_dim_brands_scd_valid_to.c5332449c0", "test.retail_dbt.unique_dim_brands_scd_brand_id.559997024c"], "model.retail_dbt.fct_shipments": ["test.retail_dbt.not_null_fct_shipments_order_id.31824196fb", "test.retail_dbt.not_null_fct_shipments_received_date.a1d7a60517", "test.retail_dbt.not_null_fct_shipments_received_day.e3c9436f10", "test.retail_dbt.not_null_fct_shipments_received_month.3a25060656", "test.retail_dbt.not_null_fct_shipments_received_year.10db577f8f", "test.retail_dbt.not_null_fct_shipments_shipment_duration_days.5f1f9fe2d0", "test.retail_dbt.not_null_fct_shipments_shipment_id.7b472eaf5b", "test.retail_dbt.not_null_fct_shipments_shipped_date.a55e53121a", "test.retail_dbt.not_null_fct_shipments_shipped_day.3e35b68843", "test.retail_dbt.not_null_fct_shipments_shipped_month.17477a85cc", "test.retail_dbt.not_null_fct_shipments_shipped_year.23a61ed5d5", "test.retail_dbt.not_null_fct_shipments_store_id.cbaa0193f1", "test.retail_dbt.not_null_fct_shipments_store_name.99e48f1e8d", "test.retail_dbt.not_null_fct_shipments_supplier_id.6a9b9eadca", "test.retail_dbt.not_null_fct_shipments_supplier_name.db948b952f", "test.retail_dbt.unique_fct_shipments_shipment_id.c7c159f82c"], "model.retail_dbt.fct_returns": ["test.retail_dbt.not_null_fct_returns_customer_id.0b988c1fc5", "test.retail_dbt.not_null_fct_returns_item_id.b07181f0c9", "test.retail_dbt.not_null_fct_returns_product_id.eac7c2e9a8", "test.retail_dbt.not_null_fct_returns_product_name.a9969e8f2c", "test.retail_dbt.not_null_fct_returns_reason.cfc2bc25cf", "test.retail_dbt.not_null_fct_returns_return_date.68cf4a5dd2", "test.retail_dbt.not_null_fct_returns_return_day.04a48b9b1e", "test.retail_dbt.not_null_fct_returns_return_id.f5e79b5df0", "test.retail_dbt.not_null_fct_returns_return_month.db1bccbc54", "test.retail_dbt.not_null_fct_returns_return_year.3559dc73d8", "test.retail_dbt.not_null_fct_returns_returned_quantity.7832676150", "test.retail_dbt.not_null_fct_returns_store_name.ff87589dc0", "test.retail_dbt.unique_fct_returns_return_id.d461048e81"], "model.retail_dbt.dim_stores_scd": ["test.retail_dbt.not_null_dim_stores_scd_dbt_scd_id.6c8439aad5", "test.retail_dbt.not_null_dim_stores_scd_dbt_updated_at.e345a23f59", "test.retail_dbt.not_null_dim_stores_scd_dbt_valid_from.d644927787", "test.retail_dbt.not_null_dim_stores_scd_dbt_valid_to.a973a28dbc", "test.retail_dbt.not_null_dim_stores_scd_is_current.a5e5c85257", "test.retail_dbt.not_null_dim_stores_scd_location.0fb1fcff58", "test.retail_dbt.not_null_dim_stores_scd_manager_id.38d4e973e8", "test.retail_dbt.not_null_dim_stores_scd_name.57cf8fd999", "test.retail_dbt.not_null_dim_stores_scd_store_id.eb554c331f", "test.retail_dbt.not_null_dim_stores_scd_store_sk.75a15a101c", "test.retail_dbt.not_null_dim_stores_scd_valid_from.8b8490821f", "test.retail_dbt.not_null_dim_stores_scd_valid_to.587d234d24", "test.retail_dbt.unique_dim_stores_scd_store_id.6625450729"], "model.retail_dbt.dim_employees_scd": ["test.retail_dbt.not_null_dim_employees_scd_dbt_scd_id.f47f324dd6", "test.retail_dbt.not_null_dim_employees_scd_dbt_updated_at.bcf03562d7", "test.retail_dbt.not_null_dim_employees_scd_dbt_valid_from.a49438694c", "test.retail_dbt.not_null_dim_employees_scd_dbt_valid_to.d1aead151a", "test.retail_dbt.not_null_dim_employees_scd_employee_id.8522bc8cd3", "test.retail_dbt.not_null_dim_employees_scd_employee_sk.46b10e0100", "test.retail_dbt.not_null_dim_employees_scd_is_current.e8e5357df2", "test.retail_dbt.not_null_dim_employees_scd_name.de3a965790", "test.retail_dbt.not_null_dim_employees_scd_role.4466e0f8a7", "test.retail_dbt.not_null_dim_employees_scd_store_id.8b22391c15", "test.retail_dbt.not_null_dim_employees_scd_valid_from.18363deeac", "test.retail_dbt.not_null_dim_employees_scd_valid_to.a3ee7e82d3", "test.retail_dbt.unique_dim_employees_scd_employee_id.60d37e9021"], "model.retail_dbt.fct_sales_transactions": ["test.retail_dbt.not_null_fct_sales_transactions_customer_id.a59585ae63", "test.retail_dbt.not_null_fct_sales_transactions_customer_name.41e94942fa", "test.retail_dbt.not_null_fct_sales_transactions_employee_id.e803488ec0", "test.retail_dbt.not_null_fct_sales_transactions_employee_name.48c171139a", "test.retail_dbt.not_null_fct_sales_transactions_payment_id.f38f7868b8", "test.retail_dbt.not_null_fct_sales_transactions_payment_method.65924986c5", "test.retail_dbt.not_null_fct_sales_transactions_store_id.f1d1131dbb", "test.retail_dbt.not_null_fct_sales_transactions_store_name.e14a622f9b", "test.retail_dbt.not_null_fct_sales_transactions_total_amount.d6bfe3802b", "test.retail_dbt.not_null_fct_sales_transactions_transaction_date.14a9e3ac61", "test.retail_dbt.not_null_fct_sales_transactions_transaction_day.ff2426df86", "test.retail_dbt.not_null_fct_sales_transactions_transaction_id.6aa0a0732d", "test.retail_dbt.not_null_fct_sales_transactions_transaction_month.50cb49dcc6", "test.retail_dbt.not_null_fct_sales_transactions_transaction_year.14b2ae0c7e", "test.retail_dbt.unique_fct_sales_transactions_transaction_id.dc29ee08f1"], "model.retail_dbt.fct_customer_feedback": ["test.retail_dbt.not_null_fct_customer_feedback_comments.f30943758d", "test.retail_dbt.not_null_fct_customer_feedback_customer_id.f3a53e00a3", "test.retail_dbt.not_null_fct_customer_feedback_customer_name.2c828aca63", "test.retail_dbt.not_null_fct_customer_feedback_feedback_date.5484fc0f41", "test.retail_dbt.not_null_fct_customer_feedback_feedback_day.40e1bb2f83", "test.retail_dbt.not_null_fct_customer_feedback_feedback_id.290ec7f6ca", "test.retail_dbt.not_null_fct_customer_feedback_feedback_month.441da6ee87", "test.retail_dbt.not_null_fct_customer_feedback_feedback_year.72346da577", "test.retail_dbt.not_null_fct_customer_feedback_product_id.fcca4d142d", "test.retail_dbt.not_null_fct_customer_feedback_product_name.27663ad7e1", "test.retail_dbt.not_null_fct_customer_feedback_rating.b81d0c4d8d", "test.retail_dbt.not_null_fct_customer_feedback_store_id.e4db9a27ee", "test.retail_dbt.not_null_fct_customer_feedback_store_name.a504fa53f8", "test.retail_dbt.unique_fct_customer_feedback_feedback_id.769d5be999"], "model.retail_dbt.products_invalid": [], "model.retail_dbt.loyalty_programs_invalid": [], "model.retail_dbt.inventory_invalid": [], "model.retail_dbt.shipments_invalid": [], "model.retail_dbt.sales_items_invalid": [], "model.retail_dbt.promotions_invalid": [], "model.retail_dbt.campaign_invalid": [], "model.retail_dbt.tax_rules_invalid": [], "model.retail_dbt.employees_invalid": [], "model.retail_dbt.stock_movements_invalid": [], "model.retail_dbt.sales_transactions_invalid": [], "model.retail_dbt.discount_rules_invalid": [], "model.retail_dbt.returns_invalid": [], "model.retail_dbt.pricing_history_invalid": [], "model.retail_dbt.customer_feedback_invalid": [], "model.retail_dbt.purchase_orders_invalid": [], "model.retail_dbt.store_visits_invalid": [], "model.retail_dbt.customer_invalid": [], "model.retail_dbt.payments_invalid": [], "snapshot.retail_dbt.dim_suppliers_snapshot": ["model.retail_dbt.dim_suppliers_scd"], "snapshot.retail_dbt.dim_customers_snapshot": ["model.retail_dbt.dim_customers_scd"], "snapshot.retail_dbt.dim_stores_snapshot": ["model.retail_dbt.dim_stores_scd"], "snapshot.retail_dbt.dim_brands_snapshot": ["model.retail_dbt.dim_brands_scd"], "snapshot.retail_dbt.dim_categories_snapshot": ["model.retail_dbt.dim_categories_scd"], "snapshot.retail_dbt.dim_products_snapshot": ["model.retail_dbt.dim_products_scd"], "snapshot.retail_dbt.dim_employees_snapshot": ["model.retail_dbt.dim_employees_scd"], "snapshot.retail_dbt.dim_loyalty_programs_snapshot": ["model.retail_dbt.dim_loyalty_programs_scd"], "snapshot.retail_dbt.dim_promotions_snapshot": ["model.retail_dbt.dim_promotions_scd"], "test.retail_dbt.not_null_brands_silver_brand_id.e37c5b2859": [], "test.retail_dbt.not_null_brands_silver_name.cfe1fe35d4": [], "test.retail_dbt.not_null_brands_silver_staged_at.0c3bcd18b1": [], "test.retail_dbt.not_null_campaigns_silver_campaign_id.4bdea18142": [], "test.retail_dbt.not_null_campaigns_silver_name.599034b8a0": [], "test.retail_dbt.not_null_campaigns_silver_budget.69bfe9da3e": [], "test.retail_dbt.not_null_campaigns_silver_start_date.efe0421e5c": [], "test.retail_dbt.not_null_campaigns_silver_end_date.36ec8a11c0": [], "test.retail_dbt.not_null_campaigns_silver_staged_at.782d626fff": [], "test.retail_dbt.not_null_categories_silver_category_id.28d2833aa5": [], "test.retail_dbt.not_null_categories_silver_name.9b8db46a0d": [], "test.retail_dbt.not_null_categories_silver_staged_at.580eaf4605": [], "test.retail_dbt.not_null_customer_feedback_silver_feedback_id.3946bdc56e": [], "test.retail_dbt.not_null_customer_feedback_silver_customer_id.bed22c5c35": [], "test.retail_dbt.not_null_customer_feedback_silver_store_id.2d5e8f99b2": [], "test.retail_dbt.not_null_customer_feedback_silver_product_id.8fb9eeb315": [], "test.retail_dbt.not_null_customer_feedback_silver_rating.ab5a9630b5": [], "test.retail_dbt.not_null_customer_feedback_silver_comments.25e81fd4ae": [], "test.retail_dbt.not_null_customer_feedback_silver_feedback_date.7c4177c699": [], "test.retail_dbt.not_null_customers_silver_customer_id.754b05a681": [], "test.retail_dbt.not_null_customers_silver_name.864d7a97ce": [], "test.retail_dbt.not_null_customers_silver_email.6856528552": [], "test.retail_dbt.not_null_customers_silver_phone.ca7dddc621": [], "test.retail_dbt.not_null_customers_silver_loyalty_program_id.c42d2a00d8": [], "test.retail_dbt.not_null_customers_silver_created_at.f6eb18d9e4": [], "test.retail_dbt.not_null_discount_rules_silver_rule_id.3bd4495dec": [], "test.retail_dbt.not_null_discount_rules_silver_product_id.81bef753f4": [], "test.retail_dbt.not_null_discount_rules_silver_discount_type.508466577d": [], "test.retail_dbt.not_null_discount_rules_silver_value.c62b860389": [], "test.retail_dbt.not_null_discount_rules_silver_valid_from.8c61636ef6": [], "test.retail_dbt.not_null_discount_rules_silver_valid_to.b846afb85a": [], "test.retail_dbt.not_null_employees_silver_employee_id.c69a236ad3": [], "test.retail_dbt.not_null_employees_silver_name.3812e26daf": [], "test.retail_dbt.not_null_employees_silver_role.958be5c671": [], "test.retail_dbt.not_null_employees_silver_store_id.0e962c8015": [], "test.retail_dbt.not_null_inventory_silver_inventory_id.b8e25e2251": [], "test.retail_dbt.not_null_inventory_silver_store_id.b0a34febbd": [], "test.retail_dbt.not_null_inventory_silver_product_id.d0a7b9584f": [], "test.retail_dbt.not_null_inventory_silver_quantity.ea309d107b": [], "test.retail_dbt.not_null_inventory_silver_last_updated.0342be2bb9": [], "test.retail_dbt.not_null_loyalty_programs_silver_loyalty_program_id.b5828a7162": [], "test.retail_dbt.not_null_loyalty_programs_silver_name.89b9e901e2": [], "test.retail_dbt.not_null_loyalty_programs_silver_points_per_dollar.b30f4d0a71": [], "test.retail_dbt.not_null_payments_silver_payment_id.c1d20ab72b": [], "test.retail_dbt.not_null_payments_silver_method.de459907f5": [], "test.retail_dbt.not_null_payments_silver_status.c2c4b77279": [], "test.retail_dbt.not_null_payments_silver_paid_at.fb99aa72f2": [], "test.retail_dbt.not_null_pricing_history_silver_history_id.e867959250": [], "test.retail_dbt.not_null_pricing_history_silver_product_id.35adcf9c8d": [], "test.retail_dbt.not_null_pricing_history_silver_price.b1fde7cb52": [], "test.retail_dbt.not_null_pricing_history_silver_effective_date.e4ecdc8dc4": [], "test.retail_dbt.not_null_products_silver_product_id.ac9520ee8d": [], "test.retail_dbt.not_null_products_silver_name.2eb427bac7": [], "test.retail_dbt.not_null_products_silver_category_id.2a4206bc12": [], "test.retail_dbt.not_null_products_silver_brand_id.e24a5ce560": [], "test.retail_dbt.not_null_products_silver_supplier_id.f8bf6dd3c6": [], "test.retail_dbt.not_null_products_silver_price.1d7617dbc8": [], "test.retail_dbt.not_null_products_silver_created_at.f661bb341b": [], "test.retail_dbt.not_null_products_silver_season.93161b0991": [], "test.retail_dbt.not_null_promotions_silver_promotion_id.b988028c60": [], "test.retail_dbt.not_null_promotions_silver_name.6337430c9c": [], "test.retail_dbt.not_null_promotions_silver_start_date.9d08c0ea43": [], "test.retail_dbt.not_null_promotions_silver_end_date.a8843536c8": [], "test.retail_dbt.not_null_purchase_orders_silver_order_id.465030e034": [], "test.retail_dbt.not_null_purchase_orders_silver_supplier_id.ec936eb5b5": [], "test.retail_dbt.not_null_purchase_orders_silver_order_date.763925638d": [], "test.retail_dbt.not_null_purchase_orders_silver_status.c17b884943": [], "test.retail_dbt.not_null_returns_silver_return_id.5102a4a0a2": [], "test.retail_dbt.not_null_returns_silver_item_id.c11f187f38": [], "test.retail_dbt.not_null_returns_silver_reason.4566784310": [], "test.retail_dbt.not_null_returns_silver_return_date.d4c90371c5": [], "test.retail_dbt.not_null_sales_items_silver_item_id.db1727c955": [], "test.retail_dbt.not_null_sales_items_silver_transaction_id.47979a6b46": [], "test.retail_dbt.not_null_sales_items_silver_product_id.d90d226a0c": [], "test.retail_dbt.not_null_sales_items_silver_quantity.541fc853cd": [], "test.retail_dbt.not_null_sales_items_silver_unit_price.83bc8f6f4b": [], "test.retail_dbt.not_null_sales_items_silver_discount.7062a6a5ed": [], "test.retail_dbt.not_null_sales_items_silver_tax.d8eacf8588": [], "test.retail_dbt.not_null_sales_items_silver_gross_amount.a4eef2ff4d": [], "test.retail_dbt.not_null_sales_items_silver_net_amount.afde194730": [], "test.retail_dbt.not_null_sales_items_silver_business_validation_flag.fc94ea645a": [], "test.retail_dbt.not_null_sales_transactions_silver_transaction_id.736115426b": [], "test.retail_dbt.not_null_sales_transactions_silver_customer_id.0cba059371": [], "test.retail_dbt.not_null_sales_transactions_silver_store_id.3c2472f6c0": [], "test.retail_dbt.not_null_sales_transactions_silver_employee_id.088a404cad": [], "test.retail_dbt.not_null_sales_transactions_silver_transaction_date.59131f37e7": [], "test.retail_dbt.not_null_sales_transactions_silver_total_amount.6e07d2cc0f": [], "test.retail_dbt.not_null_sales_transactions_silver_payment_id.020fe22706": [], "test.retail_dbt.not_null_shipments_silver_shipment_id.ab52987a98": [], "test.retail_dbt.not_null_shipments_silver_order_id.6b7ddbfc6b": [], "test.retail_dbt.not_null_shipments_silver_store_id.cd277ca902": [], "test.retail_dbt.not_null_shipments_silver_shipped_date.75a36020ee": [], "test.retail_dbt.not_null_shipments_silver_received_date.a083993648": [], "test.retail_dbt.not_null_stock_movements_silver_movement_id.9441e6c7bf": [], "test.retail_dbt.not_null_stock_movements_silver_product_id.893e7e84b1": [], "test.retail_dbt.not_null_stock_movements_silver_store_id.87dd62d582": [], "test.retail_dbt.not_null_stock_movements_silver_movement_type.a5e3a59630": [], "test.retail_dbt.not_null_stock_movements_silver_quantity.2ffe698ded": [], "test.retail_dbt.not_null_stock_movements_silver_movement_date.efe72dd68d": [], "test.retail_dbt.not_null_store_visits_silver_visit_id.04f76e4203": [], "test.retail_dbt.not_null_store_visits_silver_customer_id.57f338221d": [], "test.retail_dbt.not_null_store_visits_silver_store_id.4276ef5282": [], "test.retail_dbt.not_null_store_visits_silver_visit_date.adefa3499d": [], "test.retail_dbt.not_null_stores_silver_store_id.7b5b9ac097": [], "test.retail_dbt.not_null_stores_silver_name.c7d29b75c3": [], "test.retail_dbt.not_null_stores_silver_location.9e197b2d81": [], "test.retail_dbt.not_null_stores_silver_manager_id.c3c7ff2ffa": [], "test.retail_dbt.not_null_suppliers_silver_supplier_id.82e9077042": [], "test.retail_dbt.not_null_suppliers_silver_name.61cee018b3": [], "test.retail_dbt.not_null_suppliers_silver_contact_info.a90509e888": [], "test.retail_dbt.not_null_tax_rules_silver_tax_id.24ed2c7254": [], "test.retail_dbt.not_null_tax_rules_silver_product_id.1223163e5d": [], "test.retail_dbt.not_null_tax_rules_silver_tax_rate.8f3dac0898": [], "test.retail_dbt.not_null_tax_rules_silver_region.c6687fdd21": [], "test.retail_dbt.not_null_dim_brands_scd_brand_id.3b2e1b3772": [], "test.retail_dbt.unique_dim_brands_scd_brand_id.559997024c": [], "test.retail_dbt.not_null_dim_brands_scd_name.c6466cd9a4": [], "test.retail_dbt.not_null_dim_brands_scd_staged_at.c1b687ebe5": [], "test.retail_dbt.not_null_dim_brands_scd_dbt_scd_id.ad68bfdaf6": [], "test.retail_dbt.not_null_dim_brands_scd_dbt_updated_at.909731b239": [], "test.retail_dbt.not_null_dim_brands_scd_dbt_valid_from.3d7351d295": [], "test.retail_dbt.not_null_dim_brands_scd_dbt_valid_to.dfae77005a": [], "test.retail_dbt.not_null_dim_brands_scd_brand_sk.d9538046e5": [], "test.retail_dbt.not_null_dim_brands_scd_valid_from.56ca0ccdfa": [], "test.retail_dbt.not_null_dim_brands_scd_valid_to.c5332449c0": [], "test.retail_dbt.not_null_dim_brands_scd_is_current.80ce1d1c55": [], "test.retail_dbt.not_null_dim_campaigns_campaign_id.b113a46344": [], "test.retail_dbt.unique_dim_campaigns_campaign_id.efba50e300": [], "test.retail_dbt.not_null_dim_campaigns_name.96fa971944": [], "test.retail_dbt.not_null_dim_campaigns_budget.2df449c486": [], "test.retail_dbt.not_null_dim_campaigns_start_date.482b5b3761": [], "test.retail_dbt.not_null_dim_campaigns_end_date.1c340a76b4": [], "test.retail_dbt.not_null_dim_campaigns_staged_at.8cda809396": [], "test.retail_dbt.not_null_dim_categories_scd_category_id.d57e3f2fe4": [], "test.retail_dbt.unique_dim_categories_scd_category_id.a547519caa": [], "test.retail_dbt.not_null_dim_categories_scd_name.e1787b6126": [], "test.retail_dbt.not_null_dim_categories_scd_staged_at.03ba82dab0": [], "test.retail_dbt.not_null_dim_categories_scd_dbt_scd_id.dd413e98d8": [], "test.retail_dbt.not_null_dim_categories_scd_dbt_updated_at.db8d94fc39": [], "test.retail_dbt.not_null_dim_categories_scd_dbt_valid_from.f655d038ca": [], "test.retail_dbt.not_null_dim_categories_scd_dbt_valid_to.997f516640": [], "test.retail_dbt.not_null_dim_categories_scd_category_sk.96df2a66cf": [], "test.retail_dbt.not_null_dim_categories_scd_valid_from.3f6c56d686": [], "test.retail_dbt.not_null_dim_categories_scd_valid_to.39024b6046": [], "test.retail_dbt.not_null_dim_categories_scd_is_current.e82f2605e7": [], "test.retail_dbt.not_null_dim_customers_scd_customer_id.56933c880b": [], "test.retail_dbt.unique_dim_customers_scd_customer_id.2b326f2086": [], "test.retail_dbt.not_null_dim_customers_scd_name.26c4fede0b": [], "test.retail_dbt.not_null_dim_customers_scd_email.dca7a01a3a": [], "test.retail_dbt.not_null_dim_customers_scd_phone.eaebcaf4c2": [], "test.retail_dbt.not_null_dim_customers_scd_loyalty_program_id.98d673395a": [], "test.retail_dbt.not_null_dim_customers_scd_created_at.6b44bd0165": [], "test.retail_dbt.not_null_dim_customers_scd_dbt_scd_id.793c4db6f3": [], "test.retail_dbt.not_null_dim_customers_scd_dbt_updated_at.5585ab9cdd": [], "test.retail_dbt.not_null_dim_customers_scd_dbt_valid_from.5ed37ae6c3": [], "test.retail_dbt.not_null_dim_customers_scd_dbt_valid_to.ac2963c119": [], "test.retail_dbt.not_null_dim_customers_scd_customer_sk.a516213f73": [], "test.retail_dbt.not_null_dim_customers_scd_valid_from.d76146eb84": [], "test.retail_dbt.not_null_dim_customers_scd_valid_to.6e22a57601": [], "test.retail_dbt.not_null_dim_customers_scd_is_current.18e6f7ab8f": [], "test.retail_dbt.not_null_dim_discount_rules_rule_id.bea823b062": [], "test.retail_dbt.unique_dim_discount_rules_rule_id.2d4022ebb6": [], "test.retail_dbt.not_null_dim_discount_rules_product_id.8ab02eea4b": [], "test.retail_dbt.not_null_dim_discount_rules_discount_type.a759a6bff8": [], "test.retail_dbt.not_null_dim_discount_rules_value.e6ec5427b6": [], "test.retail_dbt.not_null_dim_discount_rules_valid_from.96af6b93c0": [], "test.retail_dbt.not_null_dim_discount_rules_valid_to.42ac252875": [], "test.retail_dbt.not_null_dim_employees_scd_employee_id.8522bc8cd3": [], "test.retail_dbt.unique_dim_employees_scd_employee_id.60d37e9021": [], "test.retail_dbt.not_null_dim_employees_scd_name.de3a965790": [], "test.retail_dbt.not_null_dim_employees_scd_role.4466e0f8a7": [], "test.retail_dbt.not_null_dim_employees_scd_store_id.8b22391c15": [], "test.retail_dbt.not_null_dim_employees_scd_dbt_scd_id.f47f324dd6": [], "test.retail_dbt.not_null_dim_employees_scd_dbt_updated_at.bcf03562d7": [], "test.retail_dbt.not_null_dim_employees_scd_dbt_valid_from.a49438694c": [], "test.retail_dbt.not_null_dim_employees_scd_dbt_valid_to.d1aead151a": [], "test.retail_dbt.not_null_dim_employees_scd_employee_sk.46b10e0100": [], "test.retail_dbt.not_null_dim_employees_scd_valid_from.18363deeac": [], "test.retail_dbt.not_null_dim_employees_scd_valid_to.a3ee7e82d3": [], "test.retail_dbt.not_null_dim_employees_scd_is_current.e8e5357df2": [], "test.retail_dbt.not_null_dim_loyalty_programs_scd_loyalty_program_id.e84dfa91aa": [], "test.retail_dbt.unique_dim_loyalty_programs_scd_loyalty_program_id.3e227fa805": [], "test.retail_dbt.not_null_dim_loyalty_programs_scd_name.3db7e3f58a": [], "test.retail_dbt.not_null_dim_loyalty_programs_scd_points_per_dollar.efe31e239c": [], "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_scd_id.038f10ad7b": [], "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_updated_at.c9d70f49a2": [], "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_valid_from.7dac90a210": [], "test.retail_dbt.not_null_dim_loyalty_programs_scd_dbt_valid_to.4c513e1ea4": [], "test.retail_dbt.not_null_dim_loyalty_programs_scd_loyalty_program_sk.84ba447ff4": [], "test.retail_dbt.not_null_dim_loyalty_programs_scd_valid_from.8260f64e1f": [], "test.retail_dbt.not_null_dim_loyalty_programs_scd_valid_to.e800634182": [], "test.retail_dbt.not_null_dim_loyalty_programs_scd_is_current.43f58f8f11": [], "test.retail_dbt.not_null_dim_products_scd_product_id.888f04d8f7": [], "test.retail_dbt.unique_dim_products_scd_product_id.87baa6b989": [], "test.retail_dbt.not_null_dim_products_scd_name.2e07a01976": [], "test.retail_dbt.not_null_dim_products_scd_category_id.525f0df4c5": [], "test.retail_dbt.not_null_dim_products_scd_brand_id.c6bec72bb3": [], "test.retail_dbt.not_null_dim_products_scd_supplier_id.a891d79aaf": [], "test.retail_dbt.not_null_dim_products_scd_price.d616170fd5": [], "test.retail_dbt.not_null_dim_products_scd_created_at.359e29dc39": [], "test.retail_dbt.not_null_dim_products_scd_season.1a2da695e2": [], "test.retail_dbt.not_null_dim_products_scd_dbt_scd_id.64fe98147e": [], "test.retail_dbt.not_null_dim_products_scd_dbt_updated_at.ad195b0ea9": [], "test.retail_dbt.not_null_dim_products_scd_dbt_valid_from.129e676468": [], "test.retail_dbt.not_null_dim_products_scd_dbt_valid_to.06eb6909d3": [], "test.retail_dbt.not_null_dim_products_scd_product_sk.08e66abbef": [], "test.retail_dbt.not_null_dim_products_scd_valid_from.ff3104926b": [], "test.retail_dbt.not_null_dim_products_scd_valid_to.07fb76bf34": [], "test.retail_dbt.not_null_dim_products_scd_is_current.f1a053499d": [], "test.retail_dbt.not_null_dim_promotions_scd_promotion_id.68a043e3c4": [], "test.retail_dbt.unique_dim_promotions_scd_promotion_id.cd385201fe": [], "test.retail_dbt.not_null_dim_promotions_scd_name.eff08cd11a": [], "test.retail_dbt.not_null_dim_promotions_scd_start_date.da0735dcd5": [], "test.retail_dbt.not_null_dim_promotions_scd_end_date.fdca100ea5": [], "test.retail_dbt.not_null_dim_promotions_scd_dbt_scd_id.b1c88a581f": [], "test.retail_dbt.not_null_dim_promotions_scd_dbt_updated_at.f5373d9439": [], "test.retail_dbt.not_null_dim_promotions_scd_dbt_valid_from.f013709fc8": [], "test.retail_dbt.not_null_dim_promotions_scd_dbt_valid_to.dc9326ebd7": [], "test.retail_dbt.not_null_dim_promotions_scd_promotion_sk.bd7c176ae5": [], "test.retail_dbt.not_null_dim_promotions_scd_valid_from.e12b3e052f": [], "test.retail_dbt.not_null_dim_promotions_scd_valid_to.9419731417": [], "test.retail_dbt.not_null_dim_promotions_scd_is_current.c1c92cb247": [], "test.retail_dbt.not_null_dim_stores_scd_store_id.eb554c331f": [], "test.retail_dbt.unique_dim_stores_scd_store_id.6625450729": [], "test.retail_dbt.not_null_dim_stores_scd_name.57cf8fd999": [], "test.retail_dbt.not_null_dim_stores_scd_location.0fb1fcff58": [], "test.retail_dbt.not_null_dim_stores_scd_manager_id.38d4e973e8": [], "test.retail_dbt.not_null_dim_stores_scd_dbt_scd_id.6c8439aad5": [], "test.retail_dbt.not_null_dim_stores_scd_dbt_updated_at.e345a23f59": [], "test.retail_dbt.not_null_dim_stores_scd_dbt_valid_from.d644927787": [], "test.retail_dbt.not_null_dim_stores_scd_dbt_valid_to.a973a28dbc": [], "test.retail_dbt.not_null_dim_stores_scd_store_sk.75a15a101c": [], "test.retail_dbt.not_null_dim_stores_scd_valid_from.8b8490821f": [], "test.retail_dbt.not_null_dim_stores_scd_valid_to.587d234d24": [], "test.retail_dbt.not_null_dim_stores_scd_is_current.a5e5c85257": [], "test.retail_dbt.not_null_dim_suppliers_scd_supplier_id.b2cfb6ed2a": [], "test.retail_dbt.unique_dim_suppliers_scd_supplier_id.d042172574": [], "test.retail_dbt.not_null_dim_suppliers_scd_name.11edeb06e1": [], "test.retail_dbt.not_null_dim_suppliers_scd_contact_info.586f4ecbc6": [], "test.retail_dbt.not_null_dim_suppliers_scd_dbt_scd_id.cd6b9cad0e": [], "test.retail_dbt.not_null_dim_suppliers_scd_dbt_updated_at.e8aeeea372": [], "test.retail_dbt.not_null_dim_suppliers_scd_dbt_valid_from.c8ab1f4710": [], "test.retail_dbt.not_null_dim_suppliers_scd_dbt_valid_to.6c4f8f5e93": [], "test.retail_dbt.not_null_dim_suppliers_scd_supplier_sk.3062b6e773": [], "test.retail_dbt.not_null_dim_suppliers_scd_valid_from.ac87d1b209": [], "test.retail_dbt.not_null_dim_suppliers_scd_valid_to.b898b9d917": [], "test.retail_dbt.not_null_dim_suppliers_scd_is_current.a0ea2cb2e1": [], "test.retail_dbt.not_null_dim_tax_rules_tax_id.149c22c98b": [], "test.retail_dbt.unique_dim_tax_rules_tax_id.dc86f06360": [], "test.retail_dbt.not_null_dim_tax_rules_product_id.9e61b95297": [], "test.retail_dbt.not_null_dim_tax_rules_tax_rate.db33d03da1": [], "test.retail_dbt.not_null_dim_tax_rules_region.0377b55149": [], "test.retail_dbt.not_null_fct_customer_feedback_feedback_id.290ec7f6ca": [], "test.retail_dbt.unique_fct_customer_feedback_feedback_id.769d5be999": [], "test.retail_dbt.not_null_fct_customer_feedback_customer_id.f3a53e00a3": [], "test.retail_dbt.not_null_fct_customer_feedback_store_id.e4db9a27ee": [], "test.retail_dbt.not_null_fct_customer_feedback_product_id.fcca4d142d": [], "test.retail_dbt.not_null_fct_customer_feedback_rating.b81d0c4d8d": [], "test.retail_dbt.not_null_fct_customer_feedback_comments.f30943758d": [], "test.retail_dbt.not_null_fct_customer_feedback_feedback_date.5484fc0f41": [], "test.retail_dbt.not_null_fct_customer_feedback_customer_name.2c828aca63": [], "test.retail_dbt.not_null_fct_customer_feedback_store_name.a504fa53f8": [], "test.retail_dbt.not_null_fct_customer_feedback_product_name.27663ad7e1": [], "test.retail_dbt.not_null_fct_customer_feedback_feedback_year.72346da577": [], "test.retail_dbt.not_null_fct_customer_feedback_feedback_month.441da6ee87": [], "test.retail_dbt.not_null_fct_customer_feedback_feedback_day.40e1bb2f83": [], "test.retail_dbt.not_null_fct_inventory_inventory_id.c3674522ab": [], "test.retail_dbt.unique_fct_inventory_inventory_id.1cf54f628e": [], "test.retail_dbt.not_null_fct_inventory_store_id.0eb1c2b718": [], "test.retail_dbt.not_null_fct_inventory_product_id.55271876bd": [], "test.retail_dbt.not_null_fct_inventory_quantity.b01f0f5d7b": [], "test.retail_dbt.not_null_fct_inventory_last_updated.dfe083d6e9": [], "test.retail_dbt.not_null_fct_inventory_store_name.36742932e5": [], "test.retail_dbt.not_null_fct_inventory_product_name.ef036593c6": [], "test.retail_dbt.not_null_fct_inventory_last_updated_year.48cd555f65": [], "test.retail_dbt.not_null_fct_inventory_last_updated_month.67a2657bfc": [], "test.retail_dbt.not_null_fct_inventory_last_updated_day.3f95fafb5d": [], "test.retail_dbt.not_null_fct_pricing_history_history_id.6fa60f1cbc": [], "test.retail_dbt.unique_fct_pricing_history_history_id.99c76c96fe": [], "test.retail_dbt.not_null_fct_pricing_history_product_id.af202ef865": [], "test.retail_dbt.not_null_fct_pricing_history_price.91e1728b2b": [], "test.retail_dbt.not_null_fct_pricing_history_effective_date.578e01ad9a": [], "test.retail_dbt.not_null_fct_pricing_history_product_name.8632159ba6": [], "test.retail_dbt.not_null_fct_pricing_history_effective_year.37172b90f8": [], "test.retail_dbt.not_null_fct_pricing_history_effective_month.36473878ff": [], "test.retail_dbt.not_null_fct_purchase_orders_order_id.985efd7afa": [], "test.retail_dbt.unique_fct_purchase_orders_order_id.9b983fae18": [], "test.retail_dbt.not_null_fct_purchase_orders_supplier_id.0ea61a31cb": [], "test.retail_dbt.not_null_fct_purchase_orders_order_date.d69ebd4960": [], "test.retail_dbt.not_null_fct_purchase_orders_status.0bda348636": [], "test.retail_dbt.not_null_fct_purchase_orders_supplier_name.672f54587e": [], "test.retail_dbt.not_null_fct_purchase_orders_order_year.5b7ecc0640": [], "test.retail_dbt.not_null_fct_purchase_orders_order_month.9ae7c12a3e": [], "test.retail_dbt.not_null_fct_purchase_orders_order_day.b3ecf021aa": [], "test.retail_dbt.not_null_fct_returns_return_id.f5e79b5df0": [], "test.retail_dbt.unique_fct_returns_return_id.d461048e81": [], "test.retail_dbt.not_null_fct_returns_item_id.b07181f0c9": [], "test.retail_dbt.not_null_fct_returns_reason.cfc2bc25cf": [], "test.retail_dbt.not_null_fct_returns_return_date.68cf4a5dd2": [], "test.retail_dbt.not_null_fct_returns_product_id.eac7c2e9a8": [], "test.retail_dbt.not_null_fct_returns_returned_quantity.7832676150": [], "test.retail_dbt.not_null_fct_returns_product_name.a9969e8f2c": [], "test.retail_dbt.not_null_fct_returns_customer_id.0b988c1fc5": [], "test.retail_dbt.not_null_fct_returns_store_name.ff87589dc0": [], "test.retail_dbt.not_null_fct_returns_return_year.3559dc73d8": [], "test.retail_dbt.not_null_fct_returns_return_month.db1bccbc54": [], "test.retail_dbt.not_null_fct_returns_return_day.04a48b9b1e": [], "test.retail_dbt.not_null_fct_sales_items_item_id.4222fa4674": [], "test.retail_dbt.unique_fct_sales_items_item_id.5a55da8b8b": [], "test.retail_dbt.not_null_fct_sales_items_transaction_id.64d2810d05": [], "test.retail_dbt.not_null_fct_sales_items_product_id.994a6131e6": [], "test.retail_dbt.not_null_fct_sales_items_quantity.8ac109260f": [], "test.retail_dbt.not_null_fct_sales_items_unit_price.70dbf3e9ee": [], "test.retail_dbt.not_null_fct_sales_items_discount.e0ac2718d6": [], "test.retail_dbt.not_null_fct_sales_items_tax.80bf57b12a": [], "test.retail_dbt.not_null_fct_sales_items_gross_amount.5819b82261": [], "test.retail_dbt.not_null_fct_sales_items_net_amount.e75e88a87c": [], "test.retail_dbt.not_null_fct_sales_items_business_validation_flag.b7cc4d94b6": [], "test.retail_dbt.not_null_fct_sales_items_product_name.c2ed25d3d1": [], "test.retail_dbt.not_null_fct_sales_items_category_name.3951967161": [], "test.retail_dbt.not_null_fct_sales_items_customer_id.ee86af3d0d": [], "test.retail_dbt.not_null_fct_sales_items_store_name.e8d3862422": [], "test.retail_dbt.not_null_fct_sales_items_transaction_year.25032ec5f5": [], "test.retail_dbt.not_null_fct_sales_items_transaction_month.24b38791d4": [], "test.retail_dbt.not_null_fct_sales_transactions_transaction_id.6aa0a0732d": [], "test.retail_dbt.unique_fct_sales_transactions_transaction_id.dc29ee08f1": [], "test.retail_dbt.not_null_fct_sales_transactions_customer_id.a59585ae63": [], "test.retail_dbt.not_null_fct_sales_transactions_store_id.f1d1131dbb": [], "test.retail_dbt.not_null_fct_sales_transactions_employee_id.e803488ec0": [], "test.retail_dbt.not_null_fct_sales_transactions_transaction_date.14a9e3ac61": [], "test.retail_dbt.not_null_fct_sales_transactions_total_amount.d6bfe3802b": [], "test.retail_dbt.not_null_fct_sales_transactions_payment_id.f38f7868b8": [], "test.retail_dbt.not_null_fct_sales_transactions_customer_name.41e94942fa": [], "test.retail_dbt.not_null_fct_sales_transactions_store_name.e14a622f9b": [], "test.retail_dbt.not_null_fct_sales_transactions_employee_name.48c171139a": [], "test.retail_dbt.not_null_fct_sales_transactions_payment_method.65924986c5": [], "test.retail_dbt.not_null_fct_sales_transactions_transaction_year.14b2ae0c7e": [], "test.retail_dbt.not_null_fct_sales_transactions_transaction_month.50cb49dcc6": [], "test.retail_dbt.not_null_fct_sales_transactions_transaction_day.ff2426df86": [], "test.retail_dbt.not_null_fct_shipments_shipment_id.7b472eaf5b": [], "test.retail_dbt.unique_fct_shipments_shipment_id.c7c159f82c": [], "test.retail_dbt.not_null_fct_shipments_order_id.31824196fb": [], "test.retail_dbt.not_null_fct_shipments_store_id.cbaa0193f1": [], "test.retail_dbt.not_null_fct_shipments_shipped_date.a55e53121a": [], "test.retail_dbt.not_null_fct_shipments_received_date.a1d7a60517": [], "test.retail_dbt.not_null_fct_shipments_supplier_id.6a9b9eadca": [], "test.retail_dbt.not_null_fct_shipments_supplier_name.db948b952f": [], "test.retail_dbt.not_null_fct_shipments_store_name.99e48f1e8d": [], "test.retail_dbt.not_null_fct_shipments_shipped_year.23a61ed5d5": [], "test.retail_dbt.not_null_fct_shipments_shipped_month.17477a85cc": [], "test.retail_dbt.not_null_fct_shipments_shipped_day.3e35b68843": [], "test.retail_dbt.not_null_fct_shipments_received_year.10db577f8f": [], "test.retail_dbt.not_null_fct_shipments_received_month.3a25060656": [], "test.retail_dbt.not_null_fct_shipments_received_day.e3c9436f10": [], "test.retail_dbt.not_null_fct_shipments_shipment_duration_days.5f1f9fe2d0": [], "test.retail_dbt.not_null_fct_stock_movements_movement_id.5325f52ab6": [], "test.retail_dbt.unique_fct_stock_movements_movement_id.4f94955333": [], "test.retail_dbt.not_null_fct_stock_movements_product_id.ed24f6fe8a": [], "test.retail_dbt.not_null_fct_stock_movements_store_id.43d1e01385": [], "test.retail_dbt.not_null_fct_stock_movements_movement_type.2f78394096": [], "test.retail_dbt.not_null_fct_stock_movements_quantity.ed8ca7eb3a": [], "test.retail_dbt.not_null_fct_stock_movements_movement_date.af4682980f": [], "test.retail_dbt.not_null_fct_stock_movements_product_name.f6fcc3190b": [], "test.retail_dbt.not_null_fct_stock_movements_store_name.3dba1692e7": [], "test.retail_dbt.not_null_fct_stock_movements_movement_year.d2b6fa2c13": [], "test.retail_dbt.not_null_fct_stock_movements_movement_month.ce0c4afedd": [], "test.retail_dbt.not_null_fct_store_visits_visit_id.b04eec3a54": [], "test.retail_dbt.unique_fct_store_visits_visit_id.182732ac28": [], "test.retail_dbt.not_null_fct_store_visits_customer_id.a7afd7afb0": [], "test.retail_dbt.not_null_fct_store_visits_store_id.7967e95abb": [], "test.retail_dbt.not_null_fct_store_visits_visit_date.888b3ee58a": [], "test.retail_dbt.not_null_fct_store_visits_customer_name.210deecb76": [], "test.retail_dbt.not_null_fct_store_visits_store_name.68be67ae31": [], "test.retail_dbt.not_null_fct_store_visits_visit_year.a29b118227": [], "test.retail_dbt.not_null_fct_store_visits_visit_month.64aa632157": [], "test.retail_dbt.not_null_fct_store_visits_visit_day.6e9b93eb48": [], "source.retail_dbt.raw.brands": ["model.retail_dbt.stg_brands"], "source.retail_dbt.raw.campaigns": ["model.retail_dbt.campaign_invalid", "model.retail_dbt.stg_campaigns"], "source.retail_dbt.raw.categories": ["model.retail_dbt.stg_categories"], "source.retail_dbt.raw.customer_feedback": ["model.retail_dbt.customer_feedback_invalid", "model.retail_dbt.stg_customer_feedback"], "source.retail_dbt.raw.customers": ["model.retail_dbt.customer_invalid", "model.retail_dbt.stg_customers"], "source.retail_dbt.raw.discount_rules": ["model.retail_dbt.discount_rules_invalid", "model.retail_dbt.stg_discount_rules"], "source.retail_dbt.raw.employees": ["model.retail_dbt.employees_invalid", "model.retail_dbt.stg_employees"], "source.retail_dbt.raw.inventory": ["model.retail_dbt.inventory_invalid", "model.retail_dbt.stg_inventory"], "source.retail_dbt.raw.loyalty_programs": ["model.retail_dbt.stg_loyalty_programs"], "source.retail_dbt.raw.payments": ["model.retail_dbt.payments_invalid", "model.retail_dbt.stg_payments"], "source.retail_dbt.raw.pricing_history": ["model.retail_dbt.pricing_history_invalid", "model.retail_dbt.stg_pricing_history"], "source.retail_dbt.raw.products": ["model.retail_dbt.products_invalid", "model.retail_dbt.stg_products"], "source.retail_dbt.raw.promotions": ["model.retail_dbt.promotions_invalid", "model.retail_dbt.stg_promotions"], "source.retail_dbt.raw.purchase_orders": ["model.retail_dbt.purchase_orders_invalid", "model.retail_dbt.stg_purchase_orders"], "source.retail_dbt.raw.returns": ["model.retail_dbt.returns_invalid", "model.retail_dbt.stg_returns"], "source.retail_dbt.raw.sales_items": ["model.retail_dbt.sales_items_invalid", "model.retail_dbt.stg_sales_items"], "source.retail_dbt.raw.sales_transactions": ["model.retail_dbt.sales_transactions_invalid", "model.retail_dbt.stg_sales_transactions"], "source.retail_dbt.raw.shipments": ["model.retail_dbt.shipments_invalid", "model.retail_dbt.stg_shipments"], "source.retail_dbt.raw.stock_movements": ["model.retail_dbt.stg_stock_movements", "model.retail_dbt.stock_movements_invalid"], "source.retail_dbt.raw.store_visits": ["model.retail_dbt.stg_store_visits", "model.retail_dbt.store_visits_invalid"], "source.retail_dbt.raw.stores": [], "source.retail_dbt.raw.suppliers": [], "source.retail_dbt.raw.tax_rules": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}