{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.9", "generated_at": "2025-08-28T03:15:37.867959Z", "invocation_id": "1587cc2f-8876-4c13-8c77-a78e6f6aa2cb", "invocation_started_at": "2025-08-28T03:15:02.372017Z", "env": {}}, "results": [{"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:14.433662Z", "completed_at": "2025-08-28T03:15:14.448166Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:14.453772Z", "completed_at": "2025-08-28T03:15:19.724382Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 5.302485227584839, "adapter_response": {}, "message": "Database Error in model stg_campaigns (models/staging/stg_campaigns.sql)\n  relation \"raw.campaigns\" does not exist\n  LINE 8:     select * from \"postgres\".\"raw\".\"campaigns\"\n                            ^\n  compiled code at target/run/retail_dbt/models/staging/stg_campaigns.sql", "failures": null, "unique_id": "model.retail_dbt.stg_campaigns", "compiled": true, "compiled_code": "with source as (\n    select * from \"postgres\".\"raw\".\"campaigns\"\n),\n\ncleaned as (\n    select\n        case \n            when campaign_id is null then null\n            when trim(campaign_id) = '' then null\n            when lower(trim(campaign_id)) in ('null','na','n/a','none') then null\n            -- lo\u1ea1i b\u1ecf k\u00fd t\u1ef1 kh\u00f4ng ph\u1ea3i s\u1ed1 r\u1ed3i cast sang int\n            else cast(regexp_replace(trim(campaign_id), '[^0-9]', '', 'g') as int)\n        end as campaign_id,\n\n        case \n            when name is null then null\n            when trim(name) = '' then null\n            when lower(trim(name)) in ('null','na','n/a','none') then null\n            else trim(name)\n        end as name,\n\n        case\n            when budget is null then null\n            when trim(budget::text) = '' then null\n            when lower(trim(budget::text)) in ('null','na','n/a','none') then null\n            else nullif(regexp_replace(trim(budget::text), '[^0-9.\\-]', '', 'g'), '')\n        end as budget_str,\n\n        nullif(trim(start_date::text), '') as start_date_raw,\n        nullif(trim(end_date::text), '') as end_date_raw,\n\n        current_timestamp as staged_at\n    from source\n),\n\ntyped as (\n    select\n        campaign_id,\n        name,\n        case\n            when budget_str ~ '^-?\\d+(\\.\\d+)?$' then budget_str::numeric\n            else null\n        end as budget,\n\n        /* Chu\u1ea9n ho\u00e1 d\u1ea5u ph\u00e2n c\u00e1ch ng\u00e0y v\u1ec1 '-' \u0111\u1ec3 d\u1ec5 regex */\n        case when start_date_raw is null then null\n             else regexp_replace(lower(start_date_raw), '[./]', '-', 'g') end as start_norm,\n        case when end_date_raw   is null then null\n             else regexp_replace(lower(end_date_raw),   '[./]', '-', 'g') end as end_norm,\n\n        staged_at\n    from cleaned\n),\n\nparsed as (\n    select\n        campaign_id,\n        name,\n        budget,\n\n        /* START_DATE */\n        case\n            /* YYYY-MM-DD [optional time] */\n            when start_norm ~ '^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])(\\s.*)?$'\n                then to_date(split_part(start_norm, ' ', 1), 'YYYY-MM-DD')\n            /* DD-MM-YYYY [optional time] */\n            when start_norm ~ '^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(start_norm, ' ', 1), 'DD-MM-YYYY')\n            /* MM-DD-YYYY [optional time] */\n            when start_norm ~ '^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(start_norm, ' ', 1), 'MM-DD-YYYY')\n            else null\n        end as start_date,\n\n        /* END_DATE */\n        case\n            when end_norm ~ '^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])(\\s.*)?$'\n                then to_date(split_part(end_norm, ' ', 1), 'YYYY-MM-DD')\n            when end_norm ~ '^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(end_norm, ' ', 1), 'DD-MM-YYYY')\n            when end_norm ~ '^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-\\d{4}(\\s.*)?$'\n                then to_date(split_part(end_norm, ' ', 1), 'MM-DD-YYYY')\n            else null\n        end as end_date,\n\n        staged_at\n    from typed\n),\n\nfiltered as (\n    select *\n    from parsed\n    where start_date is not null\n      and end_date is not null\n      and start_date < end_date\n      and start_date < date '2025-08-22'\n      and end_date < date '2025-08-22'\n      -- Th\u00eam \u0111i\u1ec1u ki\u1ec7n lo\u1ea1i b\u1ecf t\u1ea5t c\u1ea3 c\u00e1c h\u00e0ng c\u00f3 gi\u00e1 tr\u1ecb null \u1edf b\u1ea5t k\u1ef3 c\u1ed9t n\u00e0o\n      and campaign_id is not null\n      and name is not null\n      and budget is not null\n      and staged_at is not null\n)\n\nselect\n    campaign_id,\n    name,\n    budget,\n    start_date,\n    end_date,\n    staged_at\nfrom filtered", "relation_name": "\"postgres\".\"silver_staging\".\"stg_campaigns\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:14.439883Z", "completed_at": "2025-08-28T03:15:14.477662Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:14.479804Z", "completed_at": "2025-08-28T03:15:19.732227Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 5.312073469161987, "adapter_response": {}, "message": "Database Error in model stg_customer_feedback (models/staging/stg_customer_feedback.sql)\n  relation \"raw.customer_feedback\" does not exist\n  LINE 55:     FROM \"postgres\".\"raw\".\"customer_feedback\"\n                    ^\n  compiled code at target/run/retail_dbt/models/staging/stg_customer_feedback.sql", "failures": null, "unique_id": "model.retail_dbt.stg_customer_feedback", "compiled": true, "compiled_code": "\n\nWITH source_data AS (\n    SELECT\n        -- cast c\u00e1c ID v\u1ec1 int\n        CASE\n            WHEN feedback_id IS NULL OR TRIM(feedback_id::text) = '' \n                 OR LOWER(TRIM(feedback_id::text)) IN ('na','null','n/a') \n            THEN NULL\n            ELSE CAST(regexp_replace(TRIM(feedback_id::text), '[^0-9]', '', 'g') AS int)\n        END AS feedback_id,\n\n        CASE\n            WHEN customer_id IS NULL OR TRIM(customer_id::text) = '' \n                 OR LOWER(TRIM(customer_id::text)) IN ('na','null','n/a') \n            THEN NULL\n            ELSE CAST(regexp_replace(TRIM(customer_id::text), '[^0-9]', '', 'g') AS int)\n        END AS customer_id,\n\n        CASE\n            WHEN store_id IS NULL OR TRIM(store_id::text) = '' \n                 OR LOWER(TRIM(store_id::text)) IN ('na','null','n/a') \n            THEN NULL\n            ELSE CAST(regexp_replace(TRIM(store_id::text), '[^0-9]', '', 'g') AS int)\n        END AS store_id,\n\n        CASE\n            WHEN product_id IS NULL OR TRIM(product_id::text) = '' \n                 OR LOWER(TRIM(product_id::text)) IN ('na','null','n/a') \n            THEN NULL\n            ELSE CAST(regexp_replace(TRIM(product_id::text), '[^0-9]', '', 'g') AS int)\n        END AS product_id,\n\n        CASE\n            WHEN rating IS NULL THEN NULL\n            WHEN TRIM(LOWER(CAST(rating AS text))) IN ('na', '') THEN NULL\n            WHEN TRIM(CAST(rating AS text)) ~ '^[0-9]+$' \n            THEN CAST(TRIM(CAST(rating AS text)) AS integer)\n            ELSE NULL\n        END AS rating,\n\n        TRIM(CAST(comments AS text)) AS comments,\n\n        CASE\n            WHEN feedback_date IS NULL THEN NULL\n            WHEN TRIM(LOWER(CAST(feedback_date AS text))) IN ('na', '') THEN NULL\n            ELSE TRIM(REPLACE(CAST(feedback_date AS text), E'\\r', ''))\n        END AS feedback_date_text\n    FROM \"postgres\".\"raw\".\"customer_feedback\"\n),\n\ndated AS (\n    SELECT\n        feedback_id,\n        customer_id,\n        store_id,\n        product_id,\n        rating,\n        comments,\n        feedback_date_text,\n\n        (\n            feedback_date_text ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n        ) AS is_valid_date_text,\n\n        CASE\n            WHEN feedback_date_text IS NOT NULL\n             AND feedback_date_text ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n            THEN to_timestamp(replace(feedback_date_text, '-', '/'), 'YYYY/FMMM/FMDD')\n            ELSE NULL\n        END AS feedback_date_ts\n    FROM source_data\n),\n\nstaging_data AS (\n    SELECT\n        feedback_id::int      AS feedback_id,\n        customer_id::int      AS customer_id,\n        store_id::int         AS store_id,\n        product_id::int       AS product_id,\n        rating::integer       AS rating,\n        comments::text        AS comments,\n        feedback_date_ts      AS feedback_date\n    FROM dated\n    WHERE\n        feedback_id IS NOT NULL\n        AND customer_id IS NOT NULL\n        AND store_id   IS NOT NULL\n        AND product_id IS NOT NULL\n        AND rating BETWEEN 1 AND 5\n        AND is_valid_date_text\n        AND feedback_date_ts IS NOT NULL\n        AND feedback_date_ts <= to_timestamp('2025/08/22', 'YYYY/MM/DD')\n)\n\nSELECT\n    feedback_id,\n    customer_id,\n    store_id,\n    product_id,\n    rating,\n    comments,\n    feedback_date\nFROM staging_data", "relation_name": "\"postgres\".\"silver_staging\".\"stg_customer_feedback\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:14.437657Z", "completed_at": "2025-08-28T03:15:14.479409Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:14.482437Z", "completed_at": "2025-08-28T03:15:19.972527Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 5.548895835876465, "adapter_response": {}, "message": "Database Error in model stg_categories (models/staging/stg_categories.sql)\n  relation \"raw.categories\" does not exist\n  LINE 10:     select * from \"postgres\".\"raw\".\"categories\"\n                             ^\n  compiled code at target/run/retail_dbt/models/staging/stg_categories.sql", "failures": null, "unique_id": "model.retail_dbt.stg_categories", "compiled": true, "compiled_code": "\n\nwith source as (\n    select * from \"postgres\".\"raw\".\"categories\"\n),\n\ncleaned as (\n    select\n        case \n            when trim(category_id) = '' then null\n            when lower(trim(category_id)) in ('null', 'na', 'n/a') then null\n            -- lo\u1ea1i b\u1ecf k\u00fd t\u1ef1 kh\u00f4ng ph\u1ea3i s\u1ed1 tr\u01b0\u1edbc khi cast\n            else cast(regexp_replace(trim(category_id), '[^0-9]', '', 'g') as int)\n        end as category_id,\n        \n        case \n            when trim(name) = '' then null\n            when lower(trim(name)) in ('null', 'na', 'n/a', 'none', 'unknown') then null\n            else trim(name)\n        end as name,\n        \n        current_timestamp as staged_at\n    from source\n)\n\nselect * from cleaned", "relation_name": "\"postgres\".\"silver_staging\".\"stg_categories\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:14.427078Z", "completed_at": "2025-08-28T03:15:14.442312Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:14.443101Z", "completed_at": "2025-08-28T03:15:20.088210Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 5.666555166244507, "adapter_response": {}, "message": "Database Error in model stg_brands (models/staging/stg_brands.sql)\n  relation \"raw.brands\" does not exist\n  LINE 10:     select * from \"postgres\".\"raw\".\"brands\"\n                             ^\n  compiled code at target/run/retail_dbt/models/staging/stg_brands.sql", "failures": null, "unique_id": "model.retail_dbt.stg_brands", "compiled": true, "compiled_code": "\n\nwith source as (\n    select * from \"postgres\".\"raw\".\"brands\"\n),\n\ncleaned as (\n    select\n        case \n            when trim(brand_id) = '' then null\n            when lower(trim(brand_id)) in ('null', 'na', 'n/a') then null\n            -- lo\u1ea1i b\u1ecf k\u00fd t\u1ef1 kh\u00f4ng ph\u1ea3i s\u1ed1 tr\u01b0\u1edbc khi cast\n            else cast(regexp_replace(trim(brand_id), '[^0-9]', '', 'g') as int)\n        end as brand_id,\n        \n        case \n            when trim(name) = '' then null\n            when lower(trim(name)) in ('null', 'na', 'n/a', 'none', 'unknown') then null\n            else trim(name)\n        end as name,\n        \n        current_timestamp as staged_at\n    from source\n)\n\nselect * from cleaned", "relation_name": "\"postgres\".\"silver_staging\".\"stg_brands\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:19.734046Z", "completed_at": "2025-08-28T03:15:19.739188Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:19.739729Z", "completed_at": "2025-08-28T03:15:22.222347Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.4921419620513916, "adapter_response": {}, "message": "Database Error in model stg_customers (models/staging/stg_customers.sql)\n  relation \"raw.customers\" does not exist\n  LINE 17:     FROM \"postgres\".\"raw\".\"customers\"\n                    ^\n  compiled code at target/run/retail_dbt/models/staging/stg_customers.sql", "failures": null, "unique_id": "model.retail_dbt.stg_customers", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(customer_id AS text))                        AS customer_id_text,\n        TRIM(CAST(name        AS text))                        AS name,\n        LOWER(TRIM(CAST(email AS text)))                       AS email,\n        TRIM(CAST(phone       AS text))                        AS phone_text,\n        TRIM(CAST(loyalty_program_id AS text))                 AS loyalty_program_id_text,\n        TRIM(REPLACE(CAST(created_at AS text), E'\\r',''))      AS created_at_text\n    FROM \"postgres\".\"raw\".\"customers\"\n),\ntyped AS (\n    SELECT\n        CASE WHEN customer_id_text ~ '^[0-9]+$'\n             THEN customer_id_text::integer END                AS customer_id,\n        name,\n        email,\n        phone_text                                             AS phone,\n        CASE WHEN loyalty_program_id_text ~ '^[0-9]+$'\n             THEN loyalty_program_id_text::integer END         AS loyalty_program_id,\n\n        CASE\n            WHEN created_at_text ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n            THEN to_timestamp(replace(created_at_text,'-','/'),'YYYY/FMMM/FMDD')\n            ELSE NULL\n        END                                                    AS created_at\n    FROM src\n)\nSELECT\n    customer_id, name, email, phone, loyalty_program_id, created_at\nFROM typed\nWHERE created_at IS NOT NULL\n  AND created_at <= to_timestamp('2025/08/22','YYYY/MM/DD')", "relation_name": "\"postgres\".\"silver_staging\".\"stg_customers\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:19.747078Z", "completed_at": "2025-08-28T03:15:19.752616Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:19.753021Z", "completed_at": "2025-08-28T03:15:22.271059Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.5277435779571533, "adapter_response": {}, "message": "Database Error in model stg_discount_rules (models/staging/stg_discount_rules.sql)\n  relation \"raw.discount_rules\" does not exist\n  LINE 17:     FROM \"postgres\".\"raw\".\"discount_rules\"\n                    ^\n  compiled code at target/run/retail_dbt/models/staging/stg_discount_rules.sql", "failures": null, "unique_id": "model.retail_dbt.stg_discount_rules", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(rule_id AS text))          AS rule_id_txt,\n        TRIM(CAST(product_id AS text))       AS product_id_txt,\n        TRIM(CAST(discount_type AS text))    AS discount_type_txt,\n        TRIM(CAST(value AS text))            AS value_txt,\n        TRIM(REPLACE(CAST(valid_from AS text), E'\\r','')) AS valid_from_txt,\n        TRIM(REPLACE(CAST(valid_to   AS text), E'\\r','')) AS valid_to_txt\n    FROM \"postgres\".\"raw\".\"discount_rules\"\n),\nnorm AS (\n    SELECT\n        NULLIF(rule_id_txt, '')          AS rule_id_clean,\n        NULLIF(product_id_txt, '')       AS product_id_clean,\n        NULLIF(discount_type_txt, '')    AS discount_type_clean,\n        NULLIF(value_txt, '')            AS value_clean,\n        NULLIF(valid_from_txt, '')       AS valid_from_clean,\n        NULLIF(valid_to_txt, '')         AS valid_to_clean\n    FROM src\n),\ntyped AS (\n    SELECT\n        CASE WHEN rule_id_clean    ~ '^[0-9]+$'               THEN rule_id_clean::integer END          AS rule_id,\n        CASE WHEN product_id_clean ~ '^[0-9]+$'               THEN product_id_clean::integer END       AS product_id,\n\n        -- b\u1ecf (?i) -> d\u00f9ng ~* \u0111\u1ec3 so kh\u1edbp kh\u00f4ng ph\u00e2n bi\u1ec7t hoa th\u01b0\u1eddng\n        CASE WHEN discount_type_clean ~* '^(na|n/a)$' THEN NULL\n             ELSE lower(discount_type_clean) END                                                            AS discount_type,\n\n        CASE WHEN value_clean ~* '^(na|n/a)$' THEN NULL\n             WHEN value_clean ~ '^[0-9]+(\\.[0-9]+)?$' THEN value_clean::numeric\n             ELSE NULL END                                                                                  AS value,\n\n        CASE WHEN valid_from_clean ~* '^(na|n/a)$' THEN NULL\n             WHEN valid_from_clean ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n                  THEN to_timestamp(replace(valid_from_clean,'-','/'),'YYYY/FMMM/FMDD')\n             ELSE NULL END                                                                                  AS valid_from,\n\n        CASE WHEN valid_to_clean ~* '^(na|n/a)$' THEN NULL\n             WHEN valid_to_clean ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n                  THEN to_timestamp(replace(valid_to_clean,'-','/'),'YYYY/FMMM/FMDD')\n             ELSE NULL END                                                                                  AS valid_to\n    FROM norm\n),\nstaging_data AS (\n    SELECT rule_id, product_id, discount_type, value, valid_from, valid_to\n    FROM typed\n    WHERE rule_id IS NOT NULL\n      AND product_id IS NOT NULL\n      AND discount_type IS NOT NULL\n      AND value IS NOT NULL\n      AND valid_from IS NOT NULL\n      AND valid_to   IS NOT NULL\n      AND valid_from < valid_to\n)\nSELECT * FROM staging_data", "relation_name": "\"postgres\".\"silver_staging\".\"stg_discount_rules\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:19.978513Z", "completed_at": "2025-08-28T03:15:19.981380Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:19.981783Z", "completed_at": "2025-08-28T03:15:22.462696Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.487356185913086, "adapter_response": {}, "message": "Database Error in model stg_employees (models/staging/stg_employees.sql)\n  relation \"raw.employees\" does not exist\n  LINE 15:     FROM \"postgres\".\"raw\".\"employees\"\n                    ^\n  compiled code at target/run/retail_dbt/models/staging/stg_employees.sql", "failures": null, "unique_id": "model.retail_dbt.stg_employees", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(employee_id AS text)) AS employee_id_txt,\n        TRIM(CAST(name        AS text)) AS name_txt,\n        TRIM(CAST(role        AS text)) AS role_txt,\n        TRIM(CAST(store_id    AS text)) AS store_id_txt\n    FROM \"postgres\".\"raw\".\"employees\"\n),\n\nfiltered AS (\n    SELECT *\n    FROM src\n    WHERE employee_id_txt IS NOT NULL AND employee_id_txt <> '' AND lower(employee_id_txt) NOT IN ('na','n/a')\n      AND name_txt        IS NOT NULL AND name_txt <> ''        AND lower(name_txt)        NOT IN ('na','n/a')\n      AND role_txt        IS NOT NULL AND role_txt <> ''        AND lower(role_txt)        NOT IN ('na','n/a')\n      AND store_id_txt    IS NOT NULL AND store_id_txt <> ''    AND lower(store_id_txt)    NOT IN ('na','n/a')\n),\n\ntyped AS (\n    SELECT\n        CAST(employee_id_txt AS integer) AS employee_id,\n        name_txt  AS name,\n        role_txt  AS role,\n        CAST(store_id_txt AS integer)    AS store_id\n    FROM filtered\n)\n\nSELECT *\nFROM typed", "relation_name": "\"postgres\".\"silver_staging\".\"stg_employees\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:20.094513Z", "completed_at": "2025-08-28T03:15:20.151446Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:20.151847Z", "completed_at": "2025-08-28T03:15:23.294546Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.2033531665802, "adapter_response": {}, "message": "Database Error in model stg_inventory (models/staging/stg_inventory.sql)\n  relation \"raw.inventory\" does not exist\n  LINE 11:     from \"postgres\".\"raw\".\"inventory\"\n                    ^\n  compiled code at target/run/retail_dbt/models/staging/stg_inventory.sql", "failures": null, "unique_id": "model.retail_dbt.stg_inventory", "compiled": true, "compiled_code": "\n\nwith source as (\n    select * \n    from \"postgres\".\"raw\".\"inventory\"\n),\n\ncleaned as (\n    select\n        case \n            when inventory_id is null or trim(lower(inventory_id)) in ('', 'null', 'na', 'n/a', 'none') \n            then null else cast(inventory_id as integer) \n        end as inventory_id,\n\n        case \n            when store_id is null or trim(lower(store_id)) in ('', 'null', 'na', 'n/a', 'none') \n            then null else cast(store_id as integer) \n        end as store_id,\n\n        case \n            when product_id is null or trim(lower(product_id)) in ('', 'null', 'na', 'n/a', 'none') \n            then null else cast(product_id as integer) \n        end as product_id,\n\n        case \n            when quantity is null or trim(lower(quantity)) in ('', 'null', 'na', 'n/a', 'none') \n            then null else cast(quantity as integer) \n        end as quantity,\n\n        case \n            when last_updated is null or trim(lower(last_updated)) in ('', 'null', 'na', 'n/a', 'none') \n            then null else cast(last_updated as timestamp) \n        end as last_updated\n    from source\n),\n\nfiltered as (\n    select *\n    from cleaned\n    where \n        inventory_id is not null\n        and store_id is not null\n        and product_id is not null\n        and quantity is not null\n        and last_updated is not null\n        and quantity <> 0\n        and cast(last_updated as date) <= date('2025-08-22')\n)\n\nselect * from filtered", "relation_name": "\"postgres\".\"silver_staging\".\"stg_inventory\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:22.228500Z", "completed_at": "2025-08-28T03:15:22.231523Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:22.231860Z", "completed_at": "2025-08-28T03:15:25.261232Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.036555290222168, "adapter_response": {}, "message": "Database Error in model stg_loyalty_programs (models/staging/stg_loyalty_programs.sql)\n  relation \"raw.loyalty_programs\" does not exist\n  LINE 14:     FROM \"postgres\".\"raw\".\"loyalty_programs\"\n                    ^\n  compiled code at target/run/retail_dbt/models/staging/stg_loyalty_programs.sql", "failures": null, "unique_id": "model.retail_dbt.stg_loyalty_programs", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(loyalty_program_id AS text)) AS loyalty_program_id_txt,\n        TRIM(CAST(name               AS text)) AS name_txt,\n        TRIM(CAST(points_per_dollar  AS text)) AS points_per_dollar_txt\n    FROM \"postgres\".\"raw\".\"loyalty_programs\"\n),\n\n\nfiltered AS (\n    SELECT *\n    FROM src\n    WHERE loyalty_program_id_txt IS NOT NULL AND loyalty_program_id_txt <> '' AND lower(loyalty_program_id_txt) NOT IN ('na','n/a')\n      AND name_txt               IS NOT NULL AND name_txt               <> '' AND lower(name_txt)               NOT IN ('na','n/a')\n      AND points_per_dollar_txt  IS NOT NULL AND points_per_dollar_txt  <> '' AND lower(points_per_dollar_txt)  NOT IN ('na','n/a')\n),\n\ntyped AS (\n    SELECT\n        \n        CASE\n          WHEN loyalty_program_id_txt ~ '^\\s*\\d+\\s*$' THEN loyalty_program_id_txt::integer\n        END AS loyalty_program_id,\n\n        name_txt AS name,\n\n        CASE\n          WHEN points_per_dollar_txt ~ '^\\s*\\d+\\s*$' THEN points_per_dollar_txt::integer\n        END AS points_per_dollar\n    FROM filtered\n)\n\nSELECT loyalty_program_id, name, points_per_dollar\nFROM typed\nWHERE loyalty_program_id IS NOT NULL\n  AND name IS NOT NULL\n  AND points_per_dollar IS NOT NULL", "relation_name": "\"postgres\".\"silver_staging\".\"stg_loyalty_programs\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:22.468803Z", "completed_at": "2025-08-28T03:15:22.471696Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:22.471994Z", "completed_at": "2025-08-28T03:15:25.292110Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.826385021209717, "adapter_response": {}, "message": "Database Error in model stg_pricing_history (models/staging/stg_pricing_history.sql)\n  relation \"raw.pricing_history\" does not exist\n  LINE 15:     FROM \"postgres\".\"raw\".\"pricing_history\"\n                    ^\n  compiled code at target/run/retail_dbt/models/staging/stg_pricing_history.sql", "failures": null, "unique_id": "model.retail_dbt.stg_pricing_history", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(history_id     AS text)) AS history_id_txt,\n        TRIM(CAST(product_id     AS text)) AS product_id_txt,\n        TRIM(CAST(price          AS text)) AS price_txt,\n        TRIM(REPLACE(CAST(effective_date AS text), E'\\r','')) AS effective_date_txt\n    FROM \"postgres\".\"raw\".\"pricing_history\"\n),\n\ntyped AS (\n    SELECT\n        \n        CASE WHEN history_id_txt ~ '^\\d+$'  THEN history_id_txt::integer  END AS history_id,\n        CASE WHEN product_id_txt ~ '^\\d+$'  THEN product_id_txt::integer  END AS product_id,\n\n        \n        CASE WHEN price_txt ~ '^-?\\d+(\\.\\d+)?$' THEN price_txt::numeric END AS price,\n\n        \n        CASE\n          WHEN effective_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(effective_date_txt, '-', '/'),'YYYY/FMMM/FMDD')::date\n          ELSE NULL\n        END AS effective_date\n    FROM src\n)\n\nSELECT\n    history_id,\n    product_id,\n    price,\n    effective_date\nFROM typed\nWHERE price IS NOT NULL\n  AND price > 0\n  AND effective_date IS NOT NULL\n  AND effective_date <= CURRENT_DATE", "relation_name": "\"postgres\".\"silver_staging\".\"stg_pricing_history\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:22.277700Z", "completed_at": "2025-08-28T03:15:22.280721Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:22.281073Z", "completed_at": "2025-08-28T03:15:25.310050Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.0360090732574463, "adapter_response": {}, "message": "Database Error in model stg_payments (models/staging/stg_payments.sql)\n  relation \"raw.payments\" does not exist\n  LINE 15:     FROM \"postgres\".\"raw\".\"payments\"\n                    ^\n  compiled code at target/run/retail_dbt/models/staging/stg_payments.sql", "failures": null, "unique_id": "model.retail_dbt.stg_payments", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(payment_id AS text))                 AS payment_id_txt,\n        TRIM(CAST(method     AS text))                 AS method,\n        TRIM(CAST(status     AS text))                 AS status,\n        TRIM(REPLACE(CAST(paid_at AS text), E'\\r','')) AS paid_at_txt\n    FROM \"postgres\".\"raw\".\"payments\"\n),\n\ntyped AS (\n    SELECT\n        \n        CASE WHEN payment_id_txt ~ '^\\s*\\d+\\s*$' THEN payment_id_txt::integer END AS payment_id,\n        method,\n        status,\n\n        \n        CASE\n          WHEN paid_at_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(paid_at_txt,'-','/'),'YYYY/FMMM/FMDD')\n          ELSE NULL\n        END AS paid_at\n    FROM src\n)\n\nSELECT\n    payment_id,\n    method,\n    status,\n    paid_at\nFROM typed\nWHERE paid_at IS NOT NULL\n  AND paid_at <= to_timestamp('2025/08/22','YYYY/MM/DD')", "relation_name": "\"postgres\".\"silver_staging\".\"stg_payments\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:23.301198Z", "completed_at": "2025-08-28T03:15:23.304458Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:23.304783Z", "completed_at": "2025-08-28T03:15:26.226977Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.929154396057129, "adapter_response": {}, "message": "Database Error in model stg_products (models/staging/stg_products.sql)\n  relation \"raw.products\" does not exist\n  LINE 20:   FROM \"postgres\".\"raw\".\"products\"\n                  ^\n  compiled code at target/run/retail_dbt/models/staging/stg_products.sql", "failures": null, "unique_id": "model.retail_dbt.stg_products", "compiled": true, "compiled_code": "\n\nWITH src AS (\n  SELECT\n    TRIM(CAST(product_id  AS text)) AS product_id_txt,\n    TRIM(CAST(name        AS text)) AS name_txt,\n    TRIM(CAST(category_id AS text)) AS category_id_txt,\n    TRIM(CAST(brand_id    AS text)) AS brand_id_txt,\n    TRIM(CAST(supplier_id AS text)) AS supplier_id_txt,\n    TRIM(CAST(price       AS text)) AS price_txt,\n    TRIM(REPLACE(CAST(created_at AS text), E'\\r','')) AS created_at_txt,\n    -- \ud83d\udc47 lo\u1ea1i \\r,\\n,\\t v\u00e0 collapse space cho season\n    TRIM(REGEXP_REPLACE(REPLACE(CAST(season AS text), E'\\r',''), '\\s+', ' ', 'g')) AS season_txt\n  FROM \"postgres\".\"raw\".\"products\"\n),\n\ntyped AS (\n  SELECT\n    CASE WHEN product_id_txt  ~ '^\\d+$'          THEN product_id_txt::integer  END AS product_id,\n    NULLIF(name_txt,'')                                 AS name,\n    CASE WHEN category_id_txt ~ '^\\d+$'          THEN category_id_txt::integer END AS category_id,\n    CASE WHEN brand_id_txt    ~ '^\\d+$'          THEN brand_id_txt::integer    END AS brand_id,\n    CASE WHEN supplier_id_txt ~ '^\\d+$'          THEN supplier_id_txt::integer END AS supplier_id,\n    CASE WHEN price_txt       ~ '^\\d+(\\.\\d+)?$'  THEN price_txt::numeric       END AS price,\n    CASE\n      WHEN created_at_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n      THEN to_timestamp(replace(created_at_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n    END AS created_at,\n\n    \n    CASE\n      WHEN lower(season_txt) ~ '^spring$'                    THEN 'Spring'\n      WHEN lower(season_txt) ~ '^summer$'                    THEN 'Summer'\n      WHEN lower(season_txt) ~ '^(fall|autumn)$'             THEN 'Fall'\n      WHEN lower(season_txt) ~ '^winter$'                    THEN 'Winter'\n      WHEN lower(season_txt) ~ '^all[ _-]?year$'             THEN 'All Year'\n      ELSE NULL\n    END AS season\n  FROM src\n)\n\nSELECT product_id, name, category_id, brand_id, supplier_id, price, created_at, season\nFROM typed\nWHERE price IS NOT NULL\n  AND created_at IS NOT NULL\n  AND created_at < '2025-08-22'", "relation_name": "\"postgres\".\"silver_staging\".\"stg_products\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:25.298016Z", "completed_at": "2025-08-28T03:15:25.301271Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:25.301708Z", "completed_at": "2025-08-28T03:15:27.841435Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.5467658042907715, "adapter_response": {}, "message": "Database Error in model stg_purchase_orders (models/staging/stg_purchase_orders.sql)\n  relation \"raw.purchase_orders\" does not exist\n  LINE 15:     FROM \"postgres\".\"raw\".\"purchase_orders\"\n                    ^\n  compiled code at target/run/retail_dbt/models/staging/stg_purchase_orders.sql", "failures": null, "unique_id": "model.retail_dbt.stg_purchase_orders", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(order_id AS text))       AS order_id_txt,\n        TRIM(CAST(supplier_id AS text))    AS supplier_id_txt,\n        TRIM(CAST(order_date AS text))     AS order_date_txt,\n        TRIM(CAST(status AS text))         AS status_txt\n    FROM \"postgres\".\"raw\".\"purchase_orders\"\n),\n\ntyped AS (\n    SELECT\n        CASE WHEN order_id_txt ~ '^\\d+$' THEN order_id_txt::int END        AS order_id,\n        CASE WHEN supplier_id_txt ~ '^\\d+$' THEN supplier_id_txt::int END  AS supplier_id,\n\n        CASE\n          WHEN order_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(order_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS order_date,\n\n        NULLIF(NULLIF(lower(status_txt),'na'),'') AS status_clean\n    FROM src\n)\n\nSELECT\n    order_id,\n    supplier_id,\n    order_date,\n    initcap(status_clean) AS status\nFROM typed\nWHERE order_id IS NOT NULL\n  AND supplier_id IS NOT NULL\n  AND order_date IS NOT NULL\n  AND status_clean IS NOT NULL\n  AND order_date <= DATE '2025-08-22'", "relation_name": "\"postgres\".\"silver_staging\".\"stg_purchase_orders\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:25.317084Z", "completed_at": "2025-08-28T03:15:25.321426Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:25.321891Z", "completed_at": "2025-08-28T03:15:28.236357Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.922659397125244, "adapter_response": {}, "message": "Database Error in model stg_returns (models/staging/stg_returns.sql)\n  relation \"raw.returns\" does not exist\n  LINE 17:     FROM \"postgres\".\"raw\".\"returns\"\n                    ^\n  compiled code at target/run/retail_dbt/models/staging/stg_returns.sql", "failures": null, "unique_id": "model.retail_dbt.stg_returns", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(return_id   AS text))                               AS return_id_txt,\n        TRIM(CAST(item_id     AS text))                               AS item_id_txt,\n    \n        TRIM(REGEXP_REPLACE(REPLACE(CAST(reason AS text), E'\\r',''), '\\s+', ' ', 'g')) AS reason_txt,\n        \n        TRIM(REPLACE(CAST(return_date AS text), E'\\r',''))            AS return_date_txt\n    FROM \"postgres\".\"raw\".\"returns\"\n),\n\ntyped AS (\n    SELECT\n        CASE WHEN return_id_txt ~ '^\\d+$' THEN return_id_txt::int END AS return_id,\n        CASE WHEN item_id_txt   ~ '^\\d+$' THEN item_id_txt::int   END AS item_id,\n\n        CASE\n          WHEN reason_txt IS NULL OR reason_txt = '' THEN NULL\n          WHEN lower(reason_txt) IN ('na','n/a') THEN NULL\n          ELSE reason_txt\n        END AS reason,\n\n        CASE\n          WHEN return_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(return_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS return_date\n    FROM src\n)\n\nSELECT\n    return_id,\n    item_id,\n    reason,\n    return_date\nFROM typed\nWHERE return_id   IS NOT NULL\n  AND item_id     IS NOT NULL\n  AND reason      IS NOT NULL\n  AND return_date IS NOT NULL\n  AND return_date <= DATE '2025-08-22'", "relation_name": "\"postgres\".\"silver_staging\".\"stg_returns\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:25.268558Z", "completed_at": "2025-08-28T03:15:25.272168Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:25.272489Z", "completed_at": "2025-08-28T03:15:28.246382Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.9851908683776855, "adapter_response": {}, "message": "Database Error in model stg_promotions (models/staging/stg_promotions.sql)\n  relation \"raw.promotions\" does not exist\n  LINE 15:     FROM \"postgres\".\"raw\".\"promotions\"\n                    ^\n  compiled code at target/run/retail_dbt/models/staging/stg_promotions.sql", "failures": null, "unique_id": "model.retail_dbt.stg_promotions", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        TRIM(CAST(promotion_id AS text))                       AS promotion_id_txt,\n        TRIM(CAST(name AS text))                               AS name_txt,\n        TRIM(REPLACE(CAST(start_date AS text), E'\\r',''))      AS start_date_txt,\n        TRIM(REPLACE(CAST(end_date   AS text), E'\\r',''))      AS end_date_txt\n    FROM \"postgres\".\"raw\".\"promotions\"\n),\n\ntyped AS (\n    SELECT\n        \n        CASE WHEN promotion_id_txt ~ '^\\d+$' THEN promotion_id_txt::int END AS promotion_id,\n\n        \n        NULLIF(NULLIF(lower(name_txt),'na'),'') AS name_clean,\n\n        \n        CASE\n          WHEN start_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(start_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS start_date,\n\n        CASE\n          WHEN end_date_txt ~ '^[0-9]{4}[-/](0?[1-9]|1[0-2])[-/](0?[1-9]|[12][0-9]|3[01])$'\n          THEN to_timestamp(replace(end_date_txt,'-','/'),'YYYY/FMMM/FMDD')::date\n        END AS end_date\n    FROM src\n)\n\nSELECT\n    promotion_id,\n    initcap(name_clean) AS name,\n    start_date,\n    end_date\nFROM typed\nWHERE promotion_id IS NOT NULL\n  AND name_clean  IS NOT NULL\n  AND start_date  IS NOT NULL\n  AND end_date    IS NOT NULL\n  AND start_date  < end_date", "relation_name": "\"postgres\".\"silver_staging\".\"stg_promotions\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:26.233316Z", "completed_at": "2025-08-28T03:15:26.236277Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:26.236604Z", "completed_at": "2025-08-28T03:15:28.821518Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.591578245162964, "adapter_response": {}, "message": "Database Error in model stg_sales_items (models/staging/stg_sales_items.sql)\n  relation \"raw.sales_items\" does not exist\n  LINE 10:     select * from \"postgres\".\"raw\".\"sales_items\"\n                             ^\n  compiled code at target/run/retail_dbt/models/staging/stg_sales_items.sql", "failures": null, "unique_id": "model.retail_dbt.stg_sales_items", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * from \"postgres\".\"raw\".\"sales_items\"\n),\n\nfinal as (\n    select\n        \n        cast(item_id as int) as item_id,\n        cast(transaction_id as int) as transaction_id,\n        cast(product_id as int) as product_id,\n        \n\n        cast(quantity as int) as quantity,\n        \n        cast(unit_price as decimal(10,2)) as unit_price,\n        cast(discount as decimal(10,2)) as discount,\n        cast(tax as decimal(10,2)) as tax,\n        \n        cast(unit_price as decimal(10,2)) * cast(quantity as int) as gross_amount,\n        (cast(unit_price as decimal(10,2)) * cast(quantity as int)) - \n         cast(discount as decimal(10,2)) + \n         cast(tax as decimal(10,2)) as net_amount,\n        \n        case \n            when cast(quantity as int) > 0 and cast(unit_price as decimal(10,2)) < 0 then 'invalid_positive_qty_negative_price'\n            when cast(discount as decimal(10,2)) > cast(unit_price as decimal(10,2)) * cast(quantity as int) then 'discount_exceeds_gross'\n            when cast(discount as decimal(10,2)) < 0 then 'negative_discount'\n            when cast(tax as decimal(10,2)) < 0 then 'negative_tax'\n            when cast(quantity as int) < 0 then 'negative_quantity'\n            else 'valid'\n        end as business_validation_flag\n        \n    from source_data\n    \n    -- Basic validation + Business logic validation\n    where item_id is not null\n        and transaction_id is not null  \n        and product_id is not null\n        and quantity is not null\n        and unit_price is not null\n        and discount is not null\n        and tax is not null\n        -- Business rules\n        and cast(quantity as int) >= 0  -- No negative quantities\n        and cast(discount as decimal(10,2)) >= 0  -- No negative discounts\n        and cast(tax as decimal(10,2)) >= 0  -- No negative tax\n        and cast(discount as decimal(10,2)) <= cast(unit_price as decimal(10,2)) * cast(quantity as int)  -- Discount can't exceed gross amount\n        -- Allow unit_price = 0 for free items/samples\n        and not (cast(quantity as int) > 0 and cast(unit_price as decimal(10,2)) < 0)  -- If quantity > 0, price can't be negative\n)\n\nselect * from final", "relation_name": "\"postgres\".\"silver_staging\".\"stg_sales_items\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:27.847972Z", "completed_at": "2025-08-28T03:15:27.851138Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:27.851431Z", "completed_at": "2025-08-28T03:15:30.345925Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.5017268657684326, "adapter_response": {}, "message": "Database Error in model stg_sales_transactions (models/staging/stg_sales_transactions.sql)\n  relation \"raw.sales_transactions\" does not exist\n  LINE 10:     select * from \"postgres\".\"raw\".\"sales_transactions\"\n                             ^\n  compiled code at target/run/retail_dbt/models/staging/stg_sales_transactions.sql", "failures": null, "unique_id": "model.retail_dbt.stg_sales_transactions", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * from \"postgres\".\"raw\".\"sales_transactions\"\n),\n\nfinal as (\n    select\n        cast(transaction_id as int) as transaction_id,\n        cast(customer_id as int) as customer_id,\n        cast(store_id as int) as store_id,\n        cast(employee_id as int) as employee_id,\n        cast(transaction_date as timestamp) as transaction_date,\n        case\n            when trim(upper(total_amount)) = 'N/A' then null\n            else cast(total_amount as decimal(15,2))\n        end as total_amount,\n        cast(payment_id as int) as payment_id\n    from source_data\n    where transaction_id is not null\n        and customer_id is not null\n        and store_id is not null\n        and employee_id is not null\n        and transaction_date is not null\n        and case\n            when trim(upper(total_amount)) = 'N/A' then null\n            else cast(total_amount as decimal(15,2))\n        end is not null\n        and payment_id is not null\n        and case\n            when trim(upper(total_amount)) = 'N/A' then null\n            else cast(total_amount as decimal(15,2))\n        end != 0\n        and transaction_id != 'N/A'\n        and customer_id != 'N/A'\n        and store_id != 'N/A'\n        and employee_id != 'N/A'\n        and payment_id != 'N/A'\n)\n\nselect * from final", "relation_name": "\"postgres\".\"silver_staging\".\"stg_sales_transactions\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:28.257489Z", "completed_at": "2025-08-28T03:15:28.260561Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:28.260850Z", "completed_at": "2025-08-28T03:15:30.679878Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.42563533782959, "adapter_response": {}, "message": "Database Error in model stg_stock_movements (models/staging/stg_stock_movements.sql)\n  relation \"raw.stock_movements\" does not exist\n  LINE 18:   FROM \"postgres\".\"raw\".\"stock_movements\"\n                  ^\n  compiled code at target/run/retail_dbt/models/staging/stg_stock_movements.sql", "failures": null, "unique_id": "model.retail_dbt.stg_stock_movements", "compiled": true, "compiled_code": "\n\n\nWITH src AS (\n  SELECT\n    TRIM(CAST(movement_id   AS text)) AS movement_id_txt,\n    TRIM(CAST(product_id    AS text)) AS product_id_txt,\n    TRIM(CAST(store_id      AS text)) AS store_id_txt,\n    TRIM(CAST(movement_type AS text)) AS movement_type_txt,\n    TRIM(CAST(quantity      AS text)) AS quantity_txt,\n    TRIM(REPLACE(CAST(movement_date AS text), E'\\r','')) AS movement_date_txt\n  FROM \"postgres\".\"raw\".\"stock_movements\"\n),\n\n\ntyped AS (\n  SELECT\n    CASE WHEN movement_id_txt  ~ '^\\d+$' THEN movement_id_txt::int  END AS movement_id,\n    CASE WHEN product_id_txt   ~ '^\\d+$' THEN product_id_txt::int   END AS product_id,\n    CASE WHEN store_id_txt     ~ '^\\d+$' THEN store_id_txt::int     END AS store_id,\n\n    CASE\n      WHEN upper(TRIM(movement_type_txt)) IN ('IN','OUT','TRANSFER')\n      THEN upper(TRIM(movement_type_txt))\n      ELSE NULL\n    END AS movement_type,\n\n    CASE\n      WHEN quantity_txt IS NULL OR quantity_txt = '' THEN NULL\n      WHEN lower(quantity_txt) IN ('unknown','na','n/a') THEN NULL\n      WHEN quantity_txt ~ '^-?\\d+$' THEN quantity_txt::int\n      ELSE NULL\n    END AS quantity,\n\n  \n    CASE\n      WHEN movement_date_txt ~ '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'\n      THEN to_date(movement_date_txt,'YYYY-MM-DD')\n    END AS movement_date_raw,\n\n    movement_date_txt\n  FROM src\n),\n\n\ndated AS (\n  SELECT\n    movement_id, product_id, store_id, movement_type, quantity,\n    CASE\n      WHEN movement_date_raw IS NOT NULL\n       AND to_char(movement_date_raw,'YYYY-MM-DD') = movement_date_txt\n      THEN movement_date_raw\n    END AS movement_date\n  FROM typed\n)\n\nSELECT\n  movement_id,\n  product_id,\n  store_id,\n  movement_type,\n  quantity,\n  movement_date\nFROM dated\nWHERE movement_id   IS NOT NULL AND movement_id   > 0\n  AND product_id    IS NOT NULL AND product_id    > 0\n  AND store_id      IS NOT NULL AND store_id      > 0\n  AND movement_type IS NOT NULL\n  AND quantity      IS NOT NULL AND quantity      > 0\n  AND movement_date IS NOT NULL\n  AND movement_date <= DATE '2025-08-22'", "relation_name": "\"postgres\".\"silver_staging\".\"stg_stock_movements\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:28.242716Z", "completed_at": "2025-08-28T03:15:28.247014Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:28.248145Z", "completed_at": "2025-08-28T03:15:31.161038Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.921520233154297, "adapter_response": {}, "message": "Database Error in model stg_shipments (models/staging/stg_shipments.sql)\n  relation \"raw.shipments\" does not exist\n  LINE 10:     select * from \"postgres\".\"raw\".\"shipments\"\n                             ^\n  compiled code at target/run/retail_dbt/models/staging/stg_shipments.sql", "failures": null, "unique_id": "model.retail_dbt.stg_shipments", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * from \"postgres\".\"raw\".\"shipments\"\n),\n\nfinal as (\n    select\n        cast(shipment_id as int) as shipment_id,\n        cast(order_id as int) as order_id,\n        cast(store_id as int) as store_id,\n        cast(shipped_date as timestamp) as shipped_date,\n        cast(received_date as timestamp) as received_date\n    from source_data\n    where shipment_id is not null\n        and order_id is not null\n        and store_id is not null\n        and shipped_date is not null\n        and received_date is not null\n        and shipped_date < received_date\n        and shipped_date <= '2025-08-22 00:00:00'\n        and received_date <= '2025-08-22 00:00:00'\n        and shipment_id != 'N/A'\n        and order_id != 'N/A'\n        and store_id != 'N/A'\n        and shipped_date != 'N/A'\n        and received_date != 'N/A'\n)\n\nselect * from final", "relation_name": "\"postgres\".\"silver_staging\".\"stg_shipments\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:28.828167Z", "completed_at": "2025-08-28T03:15:28.831425Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:28.831799Z", "completed_at": "2025-08-28T03:15:31.757697Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.932809829711914, "adapter_response": {}, "message": "Database Error in model stg_store_visits (models/staging/stg_store_visits.sql)\n  relation \"raw.store_visits\" does not exist\n  LINE 15:   FROM \"postgres\".\"raw\".\"store_visits\"\n                  ^\n  compiled code at target/run/retail_dbt/models/staging/stg_store_visits.sql", "failures": null, "unique_id": "model.retail_dbt.stg_store_visits", "compiled": true, "compiled_code": "\n\nWITH src AS (\n  SELECT\n    TRIM(CAST(visit_id    AS text)) AS visit_id_txt,\n    TRIM(CAST(customer_id AS text)) AS customer_id_txt,\n    TRIM(CAST(store_id    AS text)) AS store_id_txt,\n    TRIM(REPLACE(CAST(visit_date AS text), E'\\r','')) AS visit_date_txt\n  FROM \"postgres\".\"raw\".\"store_visits\"\n),\n\ntyped AS (\n  SELECT\n    \n    CASE WHEN visit_id_txt    ~ '^\\d+$' THEN visit_id_txt::int    END AS visit_id,\n    CASE WHEN customer_id_txt ~ '^\\d+$' THEN customer_id_txt::int END AS customer_id,\n    CASE WHEN store_id_txt    ~ '^\\d+$' THEN store_id_txt::int    END AS store_id,\n\n    \n    CASE\n      WHEN visit_date_txt ~ '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'\n      THEN to_date(visit_date_txt,'YYYY-MM-DD')\n    END AS visit_date_raw,\n\n    visit_date_txt\n  FROM src\n),\n\n\nvalidated AS (\n  SELECT\n    visit_id, customer_id, store_id,\n    CASE\n      WHEN visit_date_raw IS NOT NULL\n       AND to_char(visit_date_raw,'YYYY-MM-DD') = visit_date_txt\n      THEN visit_date_raw\n    END AS visit_date\n  FROM typed\n)\n\nSELECT\n  visit_id,\n  customer_id,\n  store_id,\n  visit_date\nFROM validated\nWHERE visit_id    IS NOT NULL\n  AND customer_id IS NOT NULL\n  AND store_id    IS NOT NULL\n  AND visit_date  IS NOT NULL\n  AND visit_date <= DATE '2025-08-22'", "relation_name": "\"postgres\".\"silver_staging\".\"stg_store_visits\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:30.354473Z", "completed_at": "2025-08-28T03:15:30.357153Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:30.357514Z", "completed_at": "2025-08-28T03:15:33.210919Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.8596503734588623, "adapter_response": {}, "message": "Database Error in model stg_stores (models/staging/stg_stores.sql)\n  relation \"raw.stores\" does not exist\n  LINE 15:   FROM raw.stores\n                  ^\n  compiled code at target/run/retail_dbt/models/staging/stg_stores.sql", "failures": null, "unique_id": "model.retail_dbt.stg_stores", "compiled": true, "compiled_code": "\n\nWITH src AS (\n  SELECT\n    store_id::int      AS store_id,\n    NULLIF(TRIM(name), '')     AS name,\n    NULLIF(TRIM(location), '') AS location,\n    manager_id::int    AS manager_id\n  FROM raw.stores\n)\n\nSELECT\n  store_id,\n  name,\n  location,\n  manager_id\nFROM src", "relation_name": "\"postgres\".\"silver_staging\".\"stg_stores\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:30.685857Z", "completed_at": "2025-08-28T03:15:30.688554Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:30.688887Z", "completed_at": "2025-08-28T03:15:33.237159Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.5543341636657715, "adapter_response": {}, "message": "Database Error in model stg_suppliers (models/staging/stg_suppliers.sql)\n  relation \"raw.suppliers\" does not exist\n  LINE 14:     FROM raw.suppliers\n                    ^\n  compiled code at target/run/retail_dbt/models/staging/stg_suppliers.sql", "failures": null, "unique_id": "model.retail_dbt.stg_suppliers", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        supplier_id::int                               AS supplier_id,\n        NULLIF(TRIM(name), '')                         AS name,\n        NULLIF(TRIM(contact_info), '')                 AS contact_info\n    FROM raw.suppliers\n)\n\nSELECT\n    supplier_id,\n    name,\n    contact_info\nFROM src", "relation_name": "\"postgres\".\"silver_staging\".\"stg_suppliers\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-08-28T03:15:31.167333Z", "completed_at": "2025-08-28T03:15:31.170093Z"}, {"name": "execute", "started_at": "2025-08-28T03:15:31.170380Z", "completed_at": "2025-08-28T03:15:34.049581Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.8854851722717285, "adapter_response": {}, "message": "Database Error in model stg_tax_rules (models/staging/stg_tax_rules.sql)\n  relation \"raw.tax_rules\" does not exist\n  LINE 15:     FROM raw.tax_rules\n                    ^\n  compiled code at target/run/retail_dbt/models/staging/stg_tax_rules.sql", "failures": null, "unique_id": "model.retail_dbt.stg_tax_rules", "compiled": true, "compiled_code": "\n\nWITH src AS (\n    SELECT\n        tax_id::int                                    AS tax_id,\n        product_id::int                                AS product_id,\n        NULLIF(NULLIF(NULLIF(LOWER(TRIM(tax_rate)), 'none'), 'n/a'), '') AS tax_rate_clean,\n        TRIM(region)                                   AS region\n    FROM raw.tax_rules\n),\n\ntyped AS (\n    SELECT\n        tax_id,\n        product_id,\n        CASE\n            WHEN tax_rate_clean ~ '^[0-9]+(\\.[0-9]+)?$'\n                 AND tax_rate_clean::numeric > 0\n            THEN tax_rate_clean::numeric\n        END AS tax_rate,\n        region\n    FROM src\n)\n\nSELECT *\nFROM typed\nWHERE tax_rate IS NOT NULL", "relation_name": "\"postgres\".\"silver_staging\".\"stg_tax_rules\"", "batch_results": null}], "elapsed_time": 34.668479204177856, "args": {"use_colors_file": true, "log_path": "/opt/airflow/dbt/logs", "skip_nodes_if_on_run_start_fails": false, "require_generic_test_arguments_property": true, "macro_debugging": false, "use_fast_test_edges": false, "exclude": [], "show_resource_report": false, "upload_to_artifacts_ingest_api": false, "require_yaml_configuration_for_mf_time_spines": false, "select": ["path:models/staging"], "require_nested_cumulative_type_params": false, "defer": false, "write_json": true, "populate_cache": true, "version_check": true, "source_freshness_run_project_hooks": true, "log_format_file": "debug", "favor_state": false, "introspect": true, "indirect_selection": "eager", "cache_selected_only": false, "print": true, "strict_mode": false, "invocation_command": "dbt run --select path:models/staging --full-refresh --profiles-dir /home/airflow/.dbt", "printer_width": 80, "validate_macro_args": false, "which": "run", "state_modified_compare_more_unrendered_values": false, "log_level": "info", "full_refresh": true, "log_file_max_bytes": 10485760, "empty": false, "require_batched_execution_for_custom_microbatch_strategy": false, "require_resource_names_without_spaces": true, "profiles_dir": "/home/airflow/.dbt", "partial_parse_file_diff": true, "use_colors": true, "require_all_warnings_handled_by_warn_error": false, "quiet": false, "require_explicit_package_overrides_for_builtin_materializations": true, "warn_error_options": {"error": [], "warn": [], "silence": []}, "vars": {}, "static_parser": true, "log_level_file": "debug", "send_anonymous_usage_stats": true, "project_dir": "/opt/airflow/dbt", "show_all_deprecations": false, "log_format": "default", "partial_parse": true, "state_modified_compare_vars": false}}